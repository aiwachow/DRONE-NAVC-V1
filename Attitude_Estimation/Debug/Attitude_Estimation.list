
Attitude_Estimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  0800c748  0800c748  0001c748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfe4  0800cfe4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfe4  0800cfe4  0001cfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfec  0800cfec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfec  0800cfec  0001cfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cff0  0800cff0  0001cff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001e0  0800d1d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  0800d1d4  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019004  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003377  00000000  00000000  00039214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005084  00000000  00000000  0003ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a859  00000000  00000000  00043cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9801  00000000  00000000  0005e555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157d56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c8  00000000  00000000  00157da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c72c 	.word	0x0800c72c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c72c 	.word	0x0800c72c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <BMI088_Read_Reg>:
/*
 *  I2C COMMUNICATION POLLING FUNCTIONS
 */
// select: 0 - acc, 1 - gyro
 static HAL_StatusTypeDef  BMI088_Read_Reg(BMI088_t *dev, uint8_t reg, uint8_t *data, uint8_t select)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af04      	add	r7, sp, #16
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	461a      	mov	r2, r3
 8000f58:	460b      	mov	r3, r1
 8000f5a:	72fb      	strb	r3, [r7, #11]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	72bb      	strb	r3, [r7, #10]
	if(select){
 8000f60:	7abb      	ldrb	r3, [r7, #10]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d012      	beq.n	8000f8c <BMI088_Read_Reg+0x40>
		return HAL_I2C_Mem_Read(dev->i2cHandle, dev->GYROaddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f70:	b299      	uxth	r1, r3
 8000f72:	7afb      	ldrb	r3, [r7, #11]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	9302      	str	r3, [sp, #8]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	f003 fa94 	bl	80044b0 <HAL_I2C_Mem_Read>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	e011      	b.n	8000fb0 <BMI088_Read_Reg+0x64>

	}
	else{
		return HAL_I2C_Mem_Read(dev->i2cHandle, dev->ACCaddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000f96:	b299      	uxth	r1, r3
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f003 fa81 	bl	80044b0 <HAL_I2C_Mem_Read>
 8000fae:	4603      	mov	r3, r0
	}
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <BMI088_Read_Regs>:

 static HAL_StatusTypeDef  BMI088_Read_Regs(BMI088_t *dev, uint8_t reg, uint8_t *data, uint8_t length,uint8_t select)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	72fb      	strb	r3, [r7, #11]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	72bb      	strb	r3, [r7, #10]
		if(select){
 8000fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <BMI088_Read_Regs+0x44>
			return HAL_I2C_Mem_Read(dev->i2cHandle, dev->GYROaddress, reg, I2C_MEMADD_SIZE_8BIT, data, length, I2C_MAX_TIME);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	7abb      	ldrb	r3, [r7, #10]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2464      	movs	r4, #100	; 0x64
 8000fea:	9402      	str	r4, [sp, #8]
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f003 fa5c 	bl	80044b0 <HAL_I2C_Mem_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	e012      	b.n	8001022 <BMI088_Read_Regs+0x6a>
		}
		else{
			return HAL_I2C_Mem_Read(dev->i2cHandle, dev->ACCaddress, reg, I2C_MEMADD_SIZE_8BIT, data, length, I2C_MAX_TIME);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001006:	b299      	uxth	r1, r3
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	b29a      	uxth	r2, r3
 800100c:	7abb      	ldrb	r3, [r7, #10]
 800100e:	b29b      	uxth	r3, r3
 8001010:	2464      	movs	r4, #100	; 0x64
 8001012:	9402      	str	r4, [sp, #8]
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	f003 fa48 	bl	80044b0 <HAL_I2C_Mem_Read>
 8001020:	4603      	mov	r3, r0
			}
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}

0800102a <BMI088_Write_Reg>:

 static HAL_StatusTypeDef  BMI088_Write_Reg(BMI088_t *dev, uint8_t reg, uint8_t *data, uint8_t select)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	af04      	add	r7, sp, #16
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	461a      	mov	r2, r3
 8001036:	460b      	mov	r3, r1
 8001038:	72fb      	strb	r3, [r7, #11]
 800103a:	4613      	mov	r3, r2
 800103c:	72bb      	strb	r3, [r7, #10]
		if(select){
 800103e:	7abb      	ldrb	r3, [r7, #10]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d012      	beq.n	800106a <BMI088_Write_Reg+0x40>
			return HAL_I2C_Mem_Write(dev->i2cHandle, dev->GYROaddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800104e:	b299      	uxth	r1, r3
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	b29a      	uxth	r2, r3
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	f003 f911 	bl	8004288 <HAL_I2C_Mem_Write>
 8001066:	4603      	mov	r3, r0
 8001068:	e011      	b.n	800108e <BMI088_Write_Reg+0x64>
			}
		else{
			return HAL_I2C_Mem_Write(dev->i2cHandle, dev->ACCaddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001074:	b299      	uxth	r1, r3
 8001076:	7afb      	ldrb	r3, [r7, #11]
 8001078:	b29a      	uxth	r2, r3
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2301      	movs	r3, #1
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	f003 f8fe 	bl	8004288 <HAL_I2C_Mem_Write>
 800108c:	4603      	mov	r3, r0
			}
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <CheckErrors>:

 static uint16_t CheckErrors(HAL_StatusTypeDef Status)
 {
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
	 uint8_t errors = 0x00; // MSB - Hard errors (HAL_ERROR),  LSB - soft errors(HAL_BUSY)
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]

	 if(Status != HAL_OK)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d008      	beq.n	80010bc <CheckErrors+0x26>
	 {
		 if(Status == HAL_ERROR){
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d005      	beq.n	80010bc <CheckErrors+0x26>
			 errors += (1 << 8);

		 }
		 else if(Status == HAL_BUSY){
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d102      	bne.n	80010bc <CheckErrors+0x26>
			 errors++;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]

		 }
	 }

	 return errors;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	b29b      	uxth	r3, r3

 }
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <BMI088_ID_CORRECT>:
	 	}
}


static uint8_t BMI088_ID_CORRECT(BMI088_t *dev, uint8_t ChipID, uint8_t select)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
 80010d8:	4613      	mov	r3, r2
 80010da:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef Status;
	uint8_t errors = 0, Data = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	2300      	movs	r3, #0
 80010e2:	737b      	strb	r3, [r7, #13]

 	Status = BMI088_Read_Reg(dev, ChipID, &Data, select);
 80010e4:	78bb      	ldrb	r3, [r7, #2]
 80010e6:	f107 020d 	add.w	r2, r7, #13
 80010ea:	78f9      	ldrb	r1, [r7, #3]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff2d 	bl	8000f4c <BMI088_Read_Reg>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73bb      	strb	r3, [r7, #14]
 	errors += (Status != HAL_OK);
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	4413      	add	r3, r2
 8001108:	73fb      	strb	r3, [r7, #15]
 	return Data;
 800110a:	7b7b      	ldrb	r3, [r7, #13]

}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <BMI088_INIT>:

uint8_t BMI088_INIT(BMI088_t *dev, I2C_HandleTypeDef *i2cHandle)
 {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	 HAL_StatusTypeDef Status;
	 uint8_t errors = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
	 uint8_t Data_write = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	737b      	strb	r3, [r7, #13]
	 uint8_t Data_read = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	733b      	strb	r3, [r7, #12]

		dev->i2cHandle		= i2cHandle;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	601a      	str	r2, [r3, #0]
		dev->ACCaddress 	= BMI088_ACC_I2C_ADDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		dev->GYROaddress 	= BMI088_GYR_I2C_ADDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	22d0      	movs	r2, #208	; 0xd0
 800113c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		dev->Gyr_ScaleFactor= 0.0f;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
		dev->Acc_ScaleFactor= 0.0f;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	; 0x28

		dev->acc_ms2[0] = 0.0f;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
		dev->acc_ms2[1] = 0.0f;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
		dev->acc_ms2[2] = 0.0f;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	60da      	str	r2, [r3, #12]

		dev->gyr_degs[0] = 0.0f;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
		dev->gyr_degs[1] = 0.0f;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
		dev->gyr_degs[2] = 0.0f;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	619a      	str	r2, [r3, #24]

		dev->Temperature = 0.0f;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c

		dev->GYROrange = BMI088_GYRO_SCALE_1000DPS;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2020 	strb.w	r2, [r3, #32]
		dev->ACCrange  = BMI088_ACCEL_FS_SEL_3G;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


	/* Check twice if the device is alive */
    HAL_Delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f002 fcbb 	bl	8003b14 <HAL_Delay>
	if(HAL_I2C_IsDeviceReady(dev->i2cHandle, dev->ACCaddress, 2, I2C_MAX_TIME) != HAL_OK ||
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011a8:	b299      	uxth	r1, r3
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2202      	movs	r2, #2
 80011ae:	f003 fa99 	bl	80046e4 <HAL_I2C_IsDeviceReady>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10c      	bne.n	80011d2 <BMI088_INIT+0xbe>
			HAL_I2C_IsDeviceReady(dev->i2cHandle, dev->GYROaddress, 2, I2C_MAX_TIME) != HAL_OK){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011c2:	b299      	uxth	r1, r3
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	2202      	movs	r2, #2
 80011c8:	f003 fa8c 	bl	80046e4 <HAL_I2C_IsDeviceReady>
 80011cc:	4603      	mov	r3, r0
	if(HAL_I2C_IsDeviceReady(dev->i2cHandle, dev->ACCaddress, 2, I2C_MAX_TIME) != HAL_OK ||
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <BMI088_INIT+0xc2>
		 return 0xFF;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	e165      	b.n	80014a2 <BMI088_INIT+0x38e>
	}
	if(BMI088_ID_CORRECT(dev,BMI088_ACC_CHIP_ID, I2CAcc) != 0x1E ||  BMI088_ID_CORRECT(dev,BMI088_GYR_CHIP_ID, I2CGyro) != 0x0F){
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff76 	bl	80010cc <BMI088_ID_CORRECT>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b1e      	cmp	r3, #30
 80011e4:	d107      	bne.n	80011f6 <BMI088_INIT+0xe2>
 80011e6:	2201      	movs	r2, #1
 80011e8:	2100      	movs	r1, #0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff6e 	bl	80010cc <BMI088_ID_CORRECT>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d001      	beq.n	80011fa <BMI088_INIT+0xe6>
		 return 0xFF;
 80011f6:	23ff      	movs	r3, #255	; 0xff
 80011f8:	e153      	b.n	80014a2 <BMI088_INIT+0x38e>
	 }

	 Data_read = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	733b      	strb	r3, [r7, #12]
	  */



	 // check first acc fatal errors
	 Status = BMI088_Read_Reg(dev, BMI088_ACC_ERR_REG ,&Data_read, I2CAcc);
 80011fe:	f107 020c 	add.w	r2, r7, #12
 8001202:	2300      	movs	r3, #0
 8001204:	2102      	movs	r1, #2
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fea0 	bl	8000f4c <BMI088_Read_Reg>
 800120c:	4603      	mov	r3, r0
 800120e:	73bb      	strb	r3, [r7, #14]
	 if (IS_BIT_SET(Data_read, 0)){
 8001210:	7b3b      	ldrb	r3, [r7, #12]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d015      	beq.n	8001246 <BMI088_INIT+0x132>
	     // Do soft reset
		 Data_write = 0xB6;
 800121a:	23b6      	movs	r3, #182	; 0xb6
 800121c:	737b      	strb	r3, [r7, #13]
		 BMI088_Write_Reg(dev, BMI088_ACC_SOFTRESET  ,&Data_write, I2CAcc);
 800121e:	f107 020d 	add.w	r2, r7, #13
 8001222:	2300      	movs	r3, #0
 8001224:	217e      	movs	r1, #126	; 0x7e
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff feff 	bl	800102a <BMI088_Write_Reg>
		 errors += (Status != HAL_OK);
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4413      	add	r3, r2
 800123e:	73fb      	strb	r3, [r7, #15]
		 HAL_Delay(100);
 8001240:	2064      	movs	r0, #100	; 0x64
 8001242:	f002 fc67 	bl	8003b14 <HAL_Delay>
	 }

     errors += (CheckErrors(BMI088_Read_Reg(dev, BMI088_ACC_ERR_REG ,&Data_read, I2CAcc)));
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	2300      	movs	r3, #0
 800124c:	2102      	movs	r1, #2
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe7c 	bl	8000f4c <BMI088_Read_Reg>
 8001254:	4603      	mov	r3, r0
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff1d 	bl	8001096 <CheckErrors>
 800125c:	4603      	mov	r3, r0
 800125e:	b2da      	uxtb	r2, r3
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4413      	add	r3, r2
 8001264:	73fb      	strb	r3, [r7, #15]


    // acc data rate and low pass
    // default data rate 100hz
	Data_write = 0xA8;
 8001266:	23a8      	movs	r3, #168	; 0xa8
 8001268:	737b      	strb	r3, [r7, #13]
	Status = BMI088_Write_Reg(dev, BMI088_ACC_CONF ,&Data_write, I2CAcc);
 800126a:	f107 020d 	add.w	r2, r7, #13
 800126e:	2300      	movs	r3, #0
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fed9 	bl	800102a <BMI088_Write_Reg>
 8001278:	4603      	mov	r3, r0
 800127a:	73bb      	strb	r3, [r7, #14]
	errors += (Status != HAL_OK);
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf14      	ite	ne
 8001282:	2301      	movne	r3, #1
 8001284:	2300      	moveq	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4413      	add	r3, r2
 800128e:	73fb      	strb	r3, [r7, #15]

	Status = BMI088_Write_Reg(dev, BMI088_ACC_RANGE ,&dev->ACCrange, I2CAcc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8001296:	2300      	movs	r3, #0
 8001298:	2141      	movs	r1, #65	; 0x41
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fec5 	bl	800102a <BMI088_Write_Reg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73bb      	strb	r3, [r7, #14]
	errors += (Status != HAL_OK);
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	4413      	add	r3, r2
 80012b6:	73fb      	strb	r3, [r7, #15]

	/* ACC INTERRUPTS */

	Data_write = 0x0A; // INT1 active high, output
 80012b8:	230a      	movs	r3, #10
 80012ba:	737b      	strb	r3, [r7, #13]
	Status = BMI088_Write_Reg(dev, BMI088_INT1_IO_CONF ,&Data_write,  I2CAcc);
 80012bc:	f107 020d 	add.w	r2, r7, #13
 80012c0:	2300      	movs	r3, #0
 80012c2:	2153      	movs	r1, #83	; 0x53
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff feb0 	bl	800102a <BMI088_Write_Reg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73bb      	strb	r3, [r7, #14]
	errors += (Status != HAL_OK);
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	4413      	add	r3, r2
 80012e0:	73fb      	strb	r3, [r7, #15]

	Data_write = 0x04; // INT1 active high, output
 80012e2:	2304      	movs	r3, #4
 80012e4:	737b      	strb	r3, [r7, #13]
	Status = BMI088_Write_Reg(dev, BMI088_INT1_INT2_MAP_DATA ,&Data_write,  I2CAcc);
 80012e6:	f107 020d 	add.w	r2, r7, #13
 80012ea:	2300      	movs	r3, #0
 80012ec:	2158      	movs	r1, #88	; 0x58
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fe9b 	bl	800102a <BMI088_Write_Reg>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73bb      	strb	r3, [r7, #14]
	errors += (Status != HAL_OK);
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4413      	add	r3, r2
 800130a:	73fb      	strb	r3, [r7, #15]
	 * write 4 to BMI088_ACC_PWR_CTRL
	 * wait 50ms
	 */

    // put acc in active mode
	Data_write = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	737b      	strb	r3, [r7, #13]
	Status = BMI088_Write_Reg(dev, BMI088_ACC_PWR_CONF ,&Data_write,  I2CAcc);
 8001310:	f107 020d 	add.w	r2, r7, #13
 8001314:	2300      	movs	r3, #0
 8001316:	217c      	movs	r1, #124	; 0x7c
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fe86 	bl	800102a <BMI088_Write_Reg>
 800131e:	4603      	mov	r3, r0
 8001320:	73bb      	strb	r3, [r7, #14]
	errors += (Status != HAL_OK);
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4413      	add	r3, r2
 8001334:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(10);
 8001336:	200a      	movs	r0, #10
 8001338:	f002 fbec 	bl	8003b14 <HAL_Delay>
	 // then check if acc is active
	Status = BMI088_Read_Reg(dev, BMI088_ACC_PWR_CONF ,&Data_read, I2CAcc);
 800133c:	f107 020c 	add.w	r2, r7, #12
 8001340:	2300      	movs	r3, #0
 8001342:	217c      	movs	r1, #124	; 0x7c
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fe01 	bl	8000f4c <BMI088_Read_Reg>
 800134a:	4603      	mov	r3, r0
 800134c:	73bb      	strb	r3, [r7, #14]
	if(Data_read != 0x00){
 800134e:	7b3b      	ldrb	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <BMI088_INIT+0x244>
	 	 return 0xFF;
 8001354:	23ff      	movs	r3, #255	; 0xff
 8001356:	e0a4      	b.n	80014a2 <BMI088_INIT+0x38e>
	 	     // error handler (maybe in future)
	}

    // turn on acc
	Data_write = 0x04;
 8001358:	2304      	movs	r3, #4
 800135a:	737b      	strb	r3, [r7, #13]
	Status = BMI088_Write_Reg(dev, BMI088_ACC_PWR_CTRL ,&Data_write,  I2CAcc);
 800135c:	f107 020d 	add.w	r2, r7, #13
 8001360:	2300      	movs	r3, #0
 8001362:	217d      	movs	r1, #125	; 0x7d
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe60 	bl	800102a <BMI088_Write_Reg>
 800136a:	4603      	mov	r3, r0
 800136c:	73bb      	strb	r3, [r7, #14]
	errors += (Status != HAL_OK);
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	4413      	add	r3, r2
 8001380:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8001382:	2064      	movs	r0, #100	; 0x64
 8001384:	f002 fbc6 	bl	8003b14 <HAL_Delay>



	/* Pre-compute accelerometer conversion from LSB to acceleration (m/s^2) */
	// pow(2, content of the ACC_RANGE register + 1)
	switch(dev->ACCrange)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800138e:	2b03      	cmp	r3, #3
 8001390:	d81a      	bhi.n	80013c8 <BMI088_INIT+0x2b4>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <BMI088_INIT+0x284>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013b1 	.word	0x080013b1
 80013a0:	080013b9 	.word	0x080013b9
 80013a4:	080013c1 	.word	0x080013c1
	{
	case 0x00:
		dev->Acc_ScaleFactor = 9.81f / 32768.0f * pow(2, 0 + 1) * 1.5f;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a40      	ldr	r2, [pc, #256]	; (80014ac <BMI088_INIT+0x398>)
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80013ae:	e00c      	b.n	80013ca <BMI088_INIT+0x2b6>
	case 0x01:
		dev->Acc_ScaleFactor = 9.81f / 32768.0f * pow(2, 1 + 1) * 1.5f;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <BMI088_INIT+0x39c>)
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80013b6:	e008      	b.n	80013ca <BMI088_INIT+0x2b6>

	case 0x02:
		dev->Acc_ScaleFactor = 9.81f / 32768.0f * pow(2, 2 + 1) * 1.5f;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3e      	ldr	r2, [pc, #248]	; (80014b4 <BMI088_INIT+0x3a0>)
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80013be:	e004      	b.n	80013ca <BMI088_INIT+0x2b6>
	case 0x03:
		dev->Acc_ScaleFactor = 9.81f / 32768.0f * pow(2, 3 + 1) * 1.5f;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a3d      	ldr	r2, [pc, #244]	; (80014b8 <BMI088_INIT+0x3a4>)
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80013c6:	e000      	b.n	80013ca <BMI088_INIT+0x2b6>

	default:
		break;
 80013c8:	bf00      	nop



		   // Gyr data rate and low pass
		    // default data rate 100hz
			Data_write = 0x07;
 80013ca:	2307      	movs	r3, #7
 80013cc:	737b      	strb	r3, [r7, #13]
			Status = BMI088_Write_Reg(dev, BMI088_GYR_BANDWIDTH ,&Data_write, I2CGyro);
 80013ce:	f107 020d 	add.w	r2, r7, #13
 80013d2:	2301      	movs	r3, #1
 80013d4:	2110      	movs	r1, #16
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe27 	bl	800102a <BMI088_Write_Reg>
 80013dc:	4603      	mov	r3, r0
 80013de:	73bb      	strb	r3, [r7, #14]
			errors += (Status != HAL_OK);
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	4413      	add	r3, r2
 80013f2:	73fb      	strb	r3, [r7, #15]

			Status = BMI088_Write_Reg(dev, BMI088_GYR_RANGE ,&dev->GYROrange, I2CGyro);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f103 0220 	add.w	r2, r3, #32
 80013fa:	2301      	movs	r3, #1
 80013fc:	210f      	movs	r1, #15
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fe13 	bl	800102a <BMI088_Write_Reg>
 8001404:	4603      	mov	r3, r0
 8001406:	73bb      	strb	r3, [r7, #14]
			errors += (Status != HAL_OK);
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	4413      	add	r3, r2
 800141a:	73fb      	strb	r3, [r7, #15]

			/* GYRO INTERRUPTS */

			Data_write = 0x80; // Enables the new data interrupt to be triggered
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	737b      	strb	r3, [r7, #13]
			Status = BMI088_Write_Reg(dev, BMI088_GYR_INT_CTRL ,&Data_write,  I2CGyro);
 8001420:	f107 020d 	add.w	r2, r7, #13
 8001424:	2301      	movs	r3, #1
 8001426:	2115      	movs	r1, #21
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fdfe 	bl	800102a <BMI088_Write_Reg>
 800142e:	4603      	mov	r3, r0
 8001430:	73bb      	strb	r3, [r7, #14]
			errors += (Status != HAL_OK);
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	4413      	add	r3, r2
 8001444:	73fb      	strb	r3, [r7, #15]

			Data_write = 0x01; // INT3 active high, push-pull
 8001446:	2301      	movs	r3, #1
 8001448:	737b      	strb	r3, [r7, #13]
			Status = BMI088_Write_Reg(dev, BMI088_GYR_INT3_INT4_IO_CONF ,&Data_write,  I2CGyro);
 800144a:	f107 020d 	add.w	r2, r7, #13
 800144e:	2301      	movs	r3, #1
 8001450:	2116      	movs	r1, #22
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fde9 	bl	800102a <BMI088_Write_Reg>
 8001458:	4603      	mov	r3, r0
 800145a:	73bb      	strb	r3, [r7, #14]
			errors += (Status != HAL_OK);
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf14      	ite	ne
 8001462:	2301      	movne	r3, #1
 8001464:	2300      	moveq	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	4413      	add	r3, r2
 800146e:	73fb      	strb	r3, [r7, #15]


			Data_write = 0x01;
 8001470:	2301      	movs	r3, #1
 8001472:	737b      	strb	r3, [r7, #13]
			Status = BMI088_Write_Reg(dev, BMI088_GYR_INT3_INT4_IO_MAP ,&Data_write,  I2CGyro);
 8001474:	f107 020d 	add.w	r2, r7, #13
 8001478:	2301      	movs	r3, #1
 800147a:	2118      	movs	r1, #24
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fdd4 	bl	800102a <BMI088_Write_Reg>
 8001482:	4603      	mov	r3, r0
 8001484:	73bb      	strb	r3, [r7, #14]
			errors += (Status != HAL_OK);
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf14      	ite	ne
 800148c:	2301      	movne	r3, #1
 800148e:	2300      	moveq	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	4413      	add	r3, r2
 8001498:	73fb      	strb	r3, [r7, #15]



			/* Pre-compute gyroscope conversion from LSB to angular velocity (rads per second) */
			dev->Gyr_ScaleFactor = (1.0f / (180.0f / 3.14159f)) * 1000.0f / 32768.0f;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <BMI088_INIT+0x3a8>)
 800149e:	625a      	str	r2, [r3, #36]	; 0x24


		return errors;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 }
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	3a6b70a4 	.word	0x3a6b70a4
 80014b0:	3aeb70a4 	.word	0x3aeb70a4
 80014b4:	3b6b70a4 	.word	0x3b6b70a4
 80014b8:	3beb70a4 	.word	0x3beb70a4
 80014bc:	3a0ba050 	.word	0x3a0ba050

080014c0 <BMI088_ReadAcc>:


uint8_t BMI088_ReadAcc(BMI088_t *dev)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status;
    uint8_t ACCRawData[6];
    uint8_t errors = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	75fb      	strb	r3, [r7, #23]

    int16_t XYZ_ACC_datas[3];

	Status = BMI088_Read_Regs(dev, BMI088_ACC_DATA ,ACCRawData,6, I2CAcc);
 80014cc:	f107 0210 	add.w	r2, r7, #16
 80014d0:	2300      	movs	r3, #0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2306      	movs	r3, #6
 80014d6:	2112      	movs	r1, #18
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fd6d 	bl	8000fb8 <BMI088_Read_Regs>
 80014de:	4603      	mov	r3, r0
 80014e0:	75bb      	strb	r3, [r7, #22]
	errors += (Status != HAL_OK);
 80014e2:	7dbb      	ldrb	r3, [r7, #22]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf14      	ite	ne
 80014e8:	2301      	movne	r3, #1
 80014ea:	2300      	moveq	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	4413      	add	r3, r2
 80014f4:	75fb      	strb	r3, [r7, #23]

	XYZ_ACC_datas[0] = ((int16_t) ACCRawData[1] << 8 | ((int16_t) ACCRawData[0]));
 80014f6:	7c7b      	ldrb	r3, [r7, #17]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7c3b      	ldrb	r3, [r7, #16]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	813b      	strh	r3, [r7, #8]
	XYZ_ACC_datas[1] = ((int16_t) ACCRawData[3] << 8 | ((int16_t) ACCRawData[2]));
 8001506:	7cfb      	ldrb	r3, [r7, #19]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	7cbb      	ldrb	r3, [r7, #18]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21b      	sxth	r3, r3
 8001514:	817b      	strh	r3, [r7, #10]
	XYZ_ACC_datas[2] = ((int16_t) ACCRawData[5] << 8 | ((int16_t) ACCRawData[4]));
 8001516:	7d7b      	ldrb	r3, [r7, #21]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	7d3b      	ldrb	r3, [r7, #20]
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21b      	sxth	r3, r3
 8001524:	81bb      	strh	r3, [r7, #12]

	dev->acc_ms2[0] = dev->Acc_ScaleFactor * XYZ_ACC_datas[0];
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800152c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_ms2[1] = dev->Acc_ScaleFactor * XYZ_ACC_datas[1];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001548:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_ms2[2] = dev->Acc_ScaleFactor * XYZ_ACC_datas[2];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001564:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	edc3 7a03 	vstr	s15, [r3, #12]

	return errors;
 800157a:	7dfb      	ldrb	r3, [r7, #23]


}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <BMI088_ReadGyro>:
void BMI088_ReadGyro(BMI088_t *dev)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af02      	add	r7, sp, #8
 800158a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Status;
    uint8_t GYRORawData[6];
    uint8_t errors = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]

	int16_t XYZ_Gryo_datas[3];

	Status = BMI088_Read_Regs(dev,BMI088_GYR_DATA ,GYRORawData, 6, I2CGyro);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	2301      	movs	r3, #1
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2306      	movs	r3, #6
 800159a:	2102      	movs	r1, #2
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fd0b 	bl	8000fb8 <BMI088_Read_Regs>
 80015a2:	4603      	mov	r3, r0
 80015a4:	75bb      	strb	r3, [r7, #22]
	errors += (Status != HAL_OK);
 80015a6:	7dbb      	ldrb	r3, [r7, #22]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	4413      	add	r3, r2
 80015b8:	75fb      	strb	r3, [r7, #23]

	XYZ_Gryo_datas[0] = ((int16_t) GYRORawData[0] | ((int16_t) GYRORawData[1] << 8));
 80015ba:	7c3b      	ldrb	r3, [r7, #16]
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7c7b      	ldrb	r3, [r7, #17]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	813b      	strh	r3, [r7, #8]
	XYZ_Gryo_datas[1] = ((int16_t) GYRORawData[2] | ((int16_t) GYRORawData[3] << 8));
 80015ca:	7cbb      	ldrb	r3, [r7, #18]
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7cfb      	ldrb	r3, [r7, #19]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	817b      	strh	r3, [r7, #10]
	XYZ_Gryo_datas[2] = ((int16_t) GYRORawData[4] | ((int16_t) GYRORawData[5] << 8));
 80015da:	7d3b      	ldrb	r3, [r7, #20]
 80015dc:	b21a      	sxth	r2, r3
 80015de:	7d7b      	ldrb	r3, [r7, #21]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	81bb      	strh	r3, [r7, #12]

	dev->gyr_degs[0] =  XYZ_Gryo_datas[0] * dev->Gyr_ScaleFactor;
 80015ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyr_degs[1] =  XYZ_Gryo_datas[1] * dev->Gyr_ScaleFactor;
 8001606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyr_degs[2] =  XYZ_Gryo_datas[2] * dev->Gyr_ScaleFactor;
 8001622:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	edc3 7a06 	vstr	s15, [r3, #24]


}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <QMC5883L_Read_Reg>:
static float Rad_to_Deg = 57.295f;
/*
 *  I2C COMMUNICATION POLLING FUNCTIONS
 */
 static HAL_StatusTypeDef  QMC5883L_Read_Reg(QMC5883L_t *dev, uint8_t reg, uint8_t *data)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b088      	sub	sp, #32
 800164a:	af04      	add	r7, sp, #16
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	460b      	mov	r3, r1
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800165e:	b299      	uxth	r1, r3
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	b29a      	uxth	r2, r3
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2301      	movs	r3, #1
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	f002 ff1d 	bl	80044b0 <HAL_I2C_Mem_Read>
 8001676:	4603      	mov	r3, r0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <QMC5883L_Read_Regs>:

 static HAL_StatusTypeDef  QMC5883L_Read_Regs(QMC5883L_t *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af04      	add	r7, sp, #16
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	461a      	mov	r2, r3
 800168c:	460b      	mov	r3, r1
 800168e:	72fb      	strb	r3, [r7, #11]
 8001690:	4613      	mov	r3, r2
 8001692:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, length, I2C_MAX_TIME);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800169e:	b299      	uxth	r1, r3
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	7abb      	ldrb	r3, [r7, #10]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2464      	movs	r4, #100	; 0x64
 80016aa:	9402      	str	r4, [sp, #8]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	f002 fefc 	bl	80044b0 <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}

080016c2 <QMC5883L_Write_Reg>:

 static HAL_StatusTypeDef  QMC5883L_Write_Reg(QMC5883L_t *dev, uint8_t reg, uint8_t *data)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af04      	add	r7, sp, #16
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	460b      	mov	r3, r1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016da:	b299      	uxth	r1, r3
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	2364      	movs	r3, #100	; 0x64
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	2301      	movs	r3, #1
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	f002 fdcb 	bl	8004288 <HAL_I2C_Mem_Write>
 80016f2:	4603      	mov	r3, r0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <QMC5883L_INIT>:

uint8_t QMC5883L_INIT(QMC5883L_t *dev, I2C_HandleTypeDef *i2cHandle, uint8_t address)
 {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef Status;
	 uint8_t errors = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
	 uint8_t Data_write = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	757b      	strb	r3, [r7, #21]
	 uint8_t Data_read = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	753b      	strb	r3, [r7, #20]



		dev->i2cHandle		= i2cHandle;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	601a      	str	r2, [r3, #0]
		dev->address 		= address;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		dev->CalMagData[0]  = 0.0f;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	605a      	str	r2, [r3, #4]


		dev->Mag_ScaleFactor = 0.0f ;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
		dev->Yaw = 0.0f ;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	611a      	str	r2, [r3, #16]


		dev->HardIronMagneticOffset[0] = -5.1982f;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a3d      	ldr	r2, [pc, #244]	; (8001834 <QMC5883L_INIT+0x138>)
 8001740:	619a      	str	r2, [r3, #24]
		dev->HardIronMagneticOffset[1] = 19.9262f;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a3c      	ldr	r2, [pc, #240]	; (8001838 <QMC5883L_INIT+0x13c>)
 8001746:	61da      	str	r2, [r3, #28]
		dev->HardIronMagneticOffset[2] = 0.7850f;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <QMC5883L_INIT+0x140>)
 800174c:	621a      	str	r2, [r3, #32]

		dev->SoftIronMagneticMapping[0][0] =  1.0106f; dev->SoftIronMagneticMapping[0][1] = -0.0293f; dev->SoftIronMagneticMapping[0][2] =  0.0103f;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a3b      	ldr	r2, [pc, #236]	; (8001840 <QMC5883L_INIT+0x144>)
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a3b      	ldr	r2, [pc, #236]	; (8001844 <QMC5883L_INIT+0x148>)
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a3a      	ldr	r2, [pc, #232]	; (8001848 <QMC5883L_INIT+0x14c>)
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
		dev->SoftIronMagneticMapping[1][0] = -0.0293f; dev->SoftIronMagneticMapping[1][1] =  0.9453f; dev->SoftIronMagneticMapping[1][2] = -0.00516f;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a38      	ldr	r2, [pc, #224]	; (8001844 <QMC5883L_INIT+0x148>)
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4a38      	ldr	r2, [pc, #224]	; (800184c <QMC5883L_INIT+0x150>)
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a38      	ldr	r2, [pc, #224]	; (8001850 <QMC5883L_INIT+0x154>)
 8001770:	639a      	str	r2, [r3, #56]	; 0x38
		dev->SoftIronMagneticMapping[2][0] =  0.0103f; dev->SoftIronMagneticMapping[2][1] = -0.0051f; dev->SoftIronMagneticMapping[2][2] =  1.0478f;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a34      	ldr	r2, [pc, #208]	; (8001848 <QMC5883L_INIT+0x14c>)
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a36      	ldr	r2, [pc, #216]	; (8001854 <QMC5883L_INIT+0x158>)
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4a35      	ldr	r2, [pc, #212]	; (8001858 <QMC5883L_INIT+0x15c>)
 8001782:	645a      	str	r2, [r3, #68]	; 0x44



	/* Check twice if the device is alive */

	if(HAL_I2C_IsDeviceReady(dev->i2cHandle, dev->address, 2, I2C_MAX_TIME) == HAL_OK){
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800178e:	b299      	uxth	r1, r3
 8001790:	2364      	movs	r3, #100	; 0x64
 8001792:	2202      	movs	r2, #2
 8001794:	f002 ffa6 	bl	80046e4 <HAL_I2C_IsDeviceReady>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d112      	bne.n	80017c4 <QMC5883L_INIT+0xc8>

	 Status = QMC5883L_Read_Reg(dev,  QMC5883L_WHO_AM_I, &Data_read);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	461a      	mov	r2, r3
 80017a4:	210d      	movs	r1, #13
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f7ff ff4d 	bl	8001646 <QMC5883L_Read_Reg>
 80017ac:	4603      	mov	r3, r0
 80017ae:	75bb      	strb	r3, [r7, #22]
	 errors += (Status != HAL_OK);
 80017b0:	7dbb      	ldrb	r3, [r7, #22]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	4413      	add	r3, r2
 80017c2:	75fb      	strb	r3, [r7, #23]

	}

	 if(Data_read != QMC5883L_ID){
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	2bff      	cmp	r3, #255	; 0xff
 80017c8:	d001      	beq.n	80017ce <QMC5883L_INIT+0xd2>
		 return 0xFF;
 80017ca:	23ff      	movs	r3, #255	; 0xff
 80017cc:	e02e      	b.n	800182c <QMC5883L_INIT+0x130>

	 /* if ok lets do initialization	  */


	 // Data rate = 100hz, scale 2G, oversampling 256
	 Data_write = 0x49;
 80017ce:	2349      	movs	r3, #73	; 0x49
 80017d0:	757b      	strb	r3, [r7, #21]
	 Status = QMC5883L_Write_Reg(dev,  QMC5883L_CONFIG_1, &Data_write);
 80017d2:	f107 0315 	add.w	r3, r7, #21
 80017d6:	461a      	mov	r2, r3
 80017d8:	2109      	movs	r1, #9
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff ff71 	bl	80016c2 <QMC5883L_Write_Reg>
 80017e0:	4603      	mov	r3, r0
 80017e2:	75bb      	strb	r3, [r7, #22]
	 errors += (Status != HAL_OK);
 80017e4:	7dbb      	ldrb	r3, [r7, #22]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	4413      	add	r3, r2
 80017f6:	75fb      	strb	r3, [r7, #23]


	 Data_write = 0x01; // datasheet p. 18
 80017f8:	2301      	movs	r3, #1
 80017fa:	757b      	strb	r3, [r7, #21]
	 Status = QMC5883L_Write_Reg(dev,  QMC5883L_CONFIG_3, &Data_write);
 80017fc:	f107 0315 	add.w	r3, r7, #21
 8001800:	461a      	mov	r2, r3
 8001802:	210b      	movs	r1, #11
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff ff5c 	bl	80016c2 <QMC5883L_Write_Reg>
 800180a:	4603      	mov	r3, r0
 800180c:	75bb      	strb	r3, [r7, #22]
	 errors += (Status != HAL_OK);
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	4413      	add	r3, r2
 8001820:	75fb      	strb	r3, [r7, #23]

	 dev->Mag_ScaleFactor = 2.0f / 32768.0f;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001828:	615a      	str	r2, [r3, #20]



		return errors;
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 }
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	c0a657a8 	.word	0xc0a657a8
 8001838:	419f68dc 	.word	0x419f68dc
 800183c:	3f48f5c3 	.word	0x3f48f5c3
 8001840:	3f815b57 	.word	0x3f815b57
 8001844:	bcf0068e 	.word	0xbcf0068e
 8001848:	3c28c155 	.word	0x3c28c155
 800184c:	3f71ff2e 	.word	0x3f71ff2e
 8001850:	bba91538 	.word	0xbba91538
 8001854:	bba71de7 	.word	0xbba71de7
 8001858:	3f861e4f 	.word	0x3f861e4f

0800185c <QMC5883L_ReadMag>:



uint8_t  QMC5883L_ReadMag(QMC5883L_t *dev, float ALPHA_MAG)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b090      	sub	sp, #64	; 0x40
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	ed87 0a00 	vstr	s0, [r7]
	HAL_StatusTypeDef Status;
    uint8_t MagRawData[6];
    uint8_t errors = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    int16_t XYZ_Mag_datas[3]       = {0};
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	809a      	strh	r2, [r3, #4]
    float   PreScale_Mag_Data[3]   = {0.0f};
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
    float   LP_PreScale_MagData[3]      = {0.0f};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
    float   HARD_LP_MagData[3] = {0.0f};
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]

	Status = QMC5883L_Read_Regs(dev, QMC5883L_DATA_READ_X_LSB ,MagRawData,6);
 800189c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018a0:	2306      	movs	r3, #6
 80018a2:	2100      	movs	r1, #0
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff feeb 	bl	8001680 <QMC5883L_Read_Regs>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	errors += (Status != HAL_OK);
 80018b0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf14      	ite	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	2300      	moveq	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018c4:	4413      	add	r3, r2
 80018c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	// COMBINE DATA FROM REGISTERS
	XYZ_Mag_datas[0] = ((int16_t) MagRawData[1] << 8 | ((int16_t) MagRawData[0]));
 80018ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b21b      	sxth	r3, r3
 80018dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	XYZ_Mag_datas[1] = ((int16_t) MagRawData[3] << 8 | ((int16_t) MagRawData[2]));
 80018de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	XYZ_Mag_datas[2] = ((int16_t) MagRawData[5] << 8 | ((int16_t) MagRawData[4]));
 80018f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21b      	sxth	r3, r3
 8001904:	863b      	strh	r3, [r7, #48]	; 0x30

	// SCALE RAW DATA, CONVERT TO MICRO TESLA
	PreScale_Mag_Data[0] = dev->Mag_ScaleFactor * XYZ_Mag_datas[0] * Gauss_To_uTesla;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	ed93 7a05 	vldr	s14, [r3, #20]
 800190c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001ab4 <QMC5883L_ReadMag+0x258>
 8001920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001924:	edc7 7a08 	vstr	s15, [r7, #32]
	PreScale_Mag_Data[1] = dev->Mag_ScaleFactor * XYZ_Mag_datas[1] * Gauss_To_uTesla;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ed93 7a05 	vldr	s14, [r3, #20]
 800192e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001ab4 <QMC5883L_ReadMag+0x258>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001946:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	PreScale_Mag_Data[2] = dev->Mag_ScaleFactor * XYZ_Mag_datas[2] * Gauss_To_uTesla;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001950:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ab4 <QMC5883L_ReadMag+0x258>
 8001964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001968:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// LOW PASS
	LP_PreScale_MagData[0] = ALPHA_MAG * PreScale_Mag_Data[0] + (1.0f - ALPHA_MAG) *  LP_PreScale_MagData[0];
 800196c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001970:	edd7 7a00 	vldr	s15, [r7]
 8001974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800197c:	edd7 7a00 	vldr	s15, [r7]
 8001980:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001984:	edd7 7a05 	vldr	s15, [r7, #20]
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	edc7 7a05 	vstr	s15, [r7, #20]
	LP_PreScale_MagData[1] = ALPHA_MAG * PreScale_Mag_Data[1] + (1.0f - ALPHA_MAG) *  LP_PreScale_MagData[1];
 8001994:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001998:	edd7 7a00 	vldr	s15, [r7]
 800199c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019a4:	edd7 7a00 	vldr	s15, [r7]
 80019a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	edc7 7a06 	vstr	s15, [r7, #24]
	LP_PreScale_MagData[2] = ALPHA_MAG * PreScale_Mag_Data[2] + (1.0f - ALPHA_MAG) *  LP_PreScale_MagData[2];
 80019bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019c0:	edd7 7a00 	vldr	s15, [r7]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019cc:	edd7 7a00 	vldr	s15, [r7]
 80019d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	edc7 7a07 	vstr	s15, [r7, #28]

    // ELIMINATE HARD IRON EFFECT
	HARD_LP_MagData[0] = (LP_PreScale_MagData[0] - dev->HardIronMagneticOffset[0]);
 80019e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	edc7 7a02 	vstr	s15, [r7, #8]
	HARD_LP_MagData[1] = (LP_PreScale_MagData[1] - dev->HardIronMagneticOffset[1]);
 80019f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	edc7 7a03 	vstr	s15, [r7, #12]
	HARD_LP_MagData[2] = (LP_PreScale_MagData[2] - dev->HardIronMagneticOffset[2]);
 8001a08:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	edc7 7a04 	vstr	s15, [r7, #16]

	// ELIMIATE SOFT IRON EFFECT
	for(uint8_t i = 0; i < 3; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a20:	e03d      	b.n	8001a9e <QMC5883L_ReadMag+0x242>
	{
		dev->CalMagData[i] =   (dev->SoftIronMagneticMapping[i][0] * HARD_LP_MagData[0])
 8001a22:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3324      	adds	r3, #36	; 0x24
 8001a34:	ed93 7a00 	vldr	s14, [r3]
 8001a38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
		                     + (dev->SoftIronMagneticMapping[i][1] * HARD_LP_MagData[1])
 8001a40:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3328      	adds	r3, #40	; 0x28
 8001a52:	edd3 6a00 	vldr	s13, [r3]
 8001a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
		                     + (dev->SoftIronMagneticMapping[i][2] * HARD_LP_MagData[2]);
 8001a62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	332c      	adds	r3, #44	; 0x2c
 8001a74:	edd3 6a00 	vldr	s13, [r3]
 8001a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		dev->CalMagData[i] =   (dev->SoftIronMagneticMapping[i][0] * HARD_LP_MagData[0])
 8001a80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
		                     + (dev->SoftIronMagneticMapping[i][2] * HARD_LP_MagData[2]);
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
		dev->CalMagData[i] =   (dev->SoftIronMagneticMapping[i][0] * HARD_LP_MagData[0])
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3304      	adds	r3, #4
 8001a90:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; i++)
 8001a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d9bd      	bls.n	8001a22 <QMC5883L_ReadMag+0x1c6>
	}



	return errors;
 8001aa6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e


}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3740      	adds	r7, #64	; 0x40
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	42c80000 	.word	0x42c80000

08001ab8 <SPL06_Read_Reg>:

/*
 *  I2C COMMUNICATION POLLING FUNCTIONS
 */
 static HAL_StatusTypeDef  SPL06_Read_Reg(SPL06_t *dev, uint8_t reg, uint8_t *data)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af04      	add	r7, sp, #16
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	791b      	ldrb	r3, [r3, #4]
 8001ace:	b299      	uxth	r1, r3
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f002 fce5 	bl	80044b0 <HAL_I2C_Mem_Read>
 8001ae6:	4603      	mov	r3, r0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <SPL06_Read_Regs>:

 static HAL_StatusTypeDef  SPL06_Read_Regs(SPL06_t *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af04      	add	r7, sp, #16
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	461a      	mov	r2, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	72fb      	strb	r3, [r7, #11]
 8001b00:	4613      	mov	r3, r2
 8001b02:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, length, I2C_MAX_TIME);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	7abb      	ldrb	r3, [r7, #10]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2464      	movs	r4, #100	; 0x64
 8001b18:	9402      	str	r4, [sp, #8]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	f002 fcc5 	bl	80044b0 <HAL_I2C_Mem_Read>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}

08001b30 <SPL06_Write_Reg>:

 static HAL_StatusTypeDef  SPL06_Write_Reg(SPL06_t *dev, uint8_t reg, uint8_t *data)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af04      	add	r7, sp, #16
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, dev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_MAX_TIME);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	b299      	uxth	r1, r3
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2364      	movs	r3, #100	; 0x64
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2301      	movs	r3, #1
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f002 fb95 	bl	8004288 <HAL_I2C_Mem_Write>
 8001b5e:	4603      	mov	r3, r0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <SPL06_INIT>:




 uint8_t SPL06_INIT(SPL06_t *dev, I2C_HandleTypeDef *i2cHandle, uint8_t address)
  {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	71fb      	strb	r3, [r7, #7]
 	 HAL_StatusTypeDef Status;
 	 uint8_t errors = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	 uint8_t Data_write = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 	 uint8_t Data_read = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


        dev->ALPHA			= 0.2f;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4aaa      	ldr	r2, [pc, #680]	; (8001e34 <SPL06_INIT+0x2cc>)
 8001b8c:	615a      	str	r2, [r3, #20]
 		dev->i2cHandle		= i2cHandle;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	601a      	str	r2, [r3, #0]
 		dev->address 		= address;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	711a      	strb	r2, [r3, #4]
 		dev->temp_cel 		= 0.0f;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
 		dev->altitude		= 0.0f;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]

 	/* Check twice if the device is alive */

 	if(HAL_I2C_IsDeviceReady(dev->i2cHandle, dev->address, 2, I2C_MAX_TIME) == HAL_OK){
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	b299      	uxth	r1, r3
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f002 fd94 	bl	80046e4 <HAL_I2C_IsDeviceReady>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <SPL06_INIT+0x88>
 	 Status = SPL06_Read_Reg(dev,  SPL06_WHO_AM_I, &Data_read);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	210d      	movs	r1, #13
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff ff74 	bl	8001ab8 <SPL06_Read_Reg>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 	 errors += (Status != HAL_OK);
 8001bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bea:	4413      	add	r3, r2
 8001bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	}
 	 if(Data_read != 0x10){
 8001bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d001      	beq.n	8001bfc <SPL06_INIT+0x94>
 		 return 0xFF;
 8001bf8:	23ff      	movs	r3, #255	; 0xff
 8001bfa:	e1de      	b.n	8001fba <SPL06_INIT+0x452>
 	 }

 	 Data_read = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	 /* if ok lets do initialization
 	  * first get the coefficients */

 	 // Wait for coefficients and sensor in general to be ready p. 23

 	Status = SPL06_Read_Reg(dev,  SPL06_MEAS_CFG, &Data_read);
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	461a      	mov	r2, r3
 8001c08:	2108      	movs	r1, #8
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f7ff ff54 	bl	8001ab8 <SPL06_Read_Reg>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 	errors += (Status != HAL_OK);
 8001c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

 	 while((Data_read & 0xC0) != 0xC0 ){
 8001c30:	e006      	b.n	8001c40 <SPL06_INIT+0xd8>
 		SPL06_Read_Reg(dev,  SPL06_MEAS_CFG, &Data_read);
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	461a      	mov	r2, r3
 8001c38:	2108      	movs	r1, #8
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff ff3c 	bl	8001ab8 <SPL06_Read_Reg>
 	 while((Data_read & 0xC0) != 0xC0 ){
 8001c40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c48:	2bc0      	cmp	r3, #192	; 0xc0
 8001c4a:	d1f2      	bne.n	8001c32 <SPL06_INIT+0xca>
 	 }


 	 uint8_t Coefficient_Data[18] = {0};
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	819a      	strh	r2, [r3, #12]
 	  Status = SPL06_Read_Regs(dev,  COEF_START, Coefficient_Data, 18);
 8001c5e:	f107 0210 	add.w	r2, r7, #16
 8001c62:	2312      	movs	r3, #18
 8001c64:	2110      	movs	r1, #16
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff ff42 	bl	8001af0 <SPL06_Read_Regs>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 	  errors += (Status != HAL_OK);
 8001c72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c86:	4413      	add	r3, r2
 8001c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

 	 dev->c0 = ((uint16_t)Coefficient_Data[0] << 4) | ((uint16_t)Coefficient_Data[1] >> 4);
 8001c8c:	7c3b      	ldrb	r3, [r7, #16]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	7c7b      	ldrb	r3, [r7, #17]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	83da      	strh	r2, [r3, #30]
 	 dev->c1 = ((uint16_t)(Coefficient_Data[1] & 0x0F) << 8) | (uint16_t)Coefficient_Data[2];
 8001ca2:	7c7b      	ldrb	r3, [r7, #17]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	7cbb      	ldrb	r3, [r7, #18]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	841a      	strh	r2, [r3, #32]
 	 dev->c00 = ((uint32_t)Coefficient_Data[3] << 12) | ((uint32_t)Coefficient_Data[4] << 4) | ((uint16_t)Coefficient_Data[5] >> 4);
 8001cba:	7cfb      	ldrb	r3, [r7, #19]
 8001cbc:	031a      	lsls	r2, r3, #12
 8001cbe:	7d3b      	ldrb	r3, [r7, #20]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	7d7a      	ldrb	r2, [r7, #21]
 8001cc6:	0912      	lsrs	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
 	 dev->c10 = ((uint32_t)(Coefficient_Data[5] & 0x0F) << 16) | ((uint32_t)Coefficient_Data[6] << 8) | (uint32_t)Coefficient_Data[7];
 8001cd2:	7d7b      	ldrb	r3, [r7, #21]
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001cda:	7dbb      	ldrb	r3, [r7, #22]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	7dfa      	ldrb	r2, [r7, #23]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28

 	 dev->c01 = ((uint16_t)Coefficient_Data[8] << 8) | (uint16_t)Coefficient_Data[9];
 8001cea:	7e3b      	ldrb	r3, [r7, #24]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	7e7b      	ldrb	r3, [r7, #25]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	859a      	strh	r2, [r3, #44]	; 0x2c
 	 dev->c11 = ((uint16_t)Coefficient_Data[10] << 8) | (uint16_t)Coefficient_Data[11];
 8001cfc:	7ebb      	ldrb	r3, [r7, #26]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	7efb      	ldrb	r3, [r7, #27]
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
 	 dev->c20 = ((uint16_t)Coefficient_Data[12] << 8) | (uint16_t)Coefficient_Data[13];
 8001d0e:	7f3b      	ldrb	r3, [r7, #28]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7f7b      	ldrb	r3, [r7, #29]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	861a      	strh	r2, [r3, #48]	; 0x30
 	 dev->c21 = ((uint16_t)Coefficient_Data[14] << 8) | (uint16_t)Coefficient_Data[15];
 8001d20:	7fbb      	ldrb	r3, [r7, #30]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	865a      	strh	r2, [r3, #50]	; 0x32
 	 dev->c30 = ((uint16_t)Coefficient_Data[16] << 8) | (uint16_t)Coefficient_Data[17];
 8001d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	869a      	strh	r2, [r3, #52]	; 0x34

 	 // Check if MSB coefficient is signed
 	 dev->c0 = (dev->c0 & (1 << 11)) ? (dev->c0 | 0xF000) : dev->c0;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <SPL06_INIT+0x202>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d5e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001d62:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	e002      	b.n	8001d70 <SPL06_INIT+0x208>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	83d3      	strh	r3, [r2, #30]
 	 dev->c1 = (dev->c1 & (1 << 11)) ? (dev->c1 | 0xF000) : dev->c1;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <SPL06_INIT+0x22e>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d8a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001d8e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	e002      	b.n	8001d9c <SPL06_INIT+0x234>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	8413      	strh	r3, [r2, #32]
 	 dev->c00 = (dev->c00 & (1 << 19)) ? (dev->c00 | 0xFFF00000) : dev->c00;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <SPL06_INIT+0x252>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001db4:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001db8:	e001      	b.n	8001dbe <SPL06_INIT+0x256>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	6253      	str	r3, [r2, #36]	; 0x24
 	 dev->c10 = (dev->c10 & (1 << 19)) ? (dev->c10 | 0xFFF00000) : dev->c10;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <SPL06_INIT+0x274>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001dd6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001dda:	e001      	b.n	8001de0 <SPL06_INIT+0x278>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6293      	str	r3, [r2, #40]	; 0x28
 	 dev->c01 = (dev->c01 & (1 << 11)) ? (dev->c01 | 0xF000) : dev->c01;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <SPL06_INIT+0x29e>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001dfa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001dfe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	e002      	b.n	8001e0c <SPL06_INIT+0x2a4>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	8593      	strh	r3, [r2, #44]	; 0x2c
 	 dev->c11 = (dev->c11 & (1 << 11)) ? (dev->c11 | 0xF000) : dev->c11;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <SPL06_INIT+0x2d0>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e26:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e2a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	e005      	b.n	8001e3e <SPL06_INIT+0x2d6>
 8001e32:	bf00      	nop
 8001e34:	3e4ccccd 	.word	0x3e4ccccd
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	85d3      	strh	r3, [r2, #46]	; 0x2e
 	 dev->c20 = (dev->c20 & (1 << 11)) ? (dev->c20 | 0xF000) : dev->c20;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <SPL06_INIT+0x2fc>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001e58:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e5c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	e002      	b.n	8001e6a <SPL06_INIT+0x302>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	8613      	strh	r3, [r2, #48]	; 0x30
 	 dev->c21 = (dev->c21 & (1 << 11)) ? (dev->c21 | 0xF000) : dev->c21;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <SPL06_INIT+0x328>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001e84:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e88:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	e002      	b.n	8001e96 <SPL06_INIT+0x32e>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	8653      	strh	r3, [r2, #50]	; 0x32
 	 dev->c30 = (dev->c30 & (1 << 11)) ? (dev->c30 | 0xF000) : dev->c30;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <SPL06_INIT+0x354>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001eb0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001eb4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	e002      	b.n	8001ec2 <SPL06_INIT+0x35a>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	8693      	strh	r3, [r2, #52]	; 0x34



 		// Pressure Configuation 8Hz rate, 8x oversampling

 		Data_write = (0x30 | 0x03);
 8001ec6:	2333      	movs	r3, #51	; 0x33
 8001ec8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

 		Status = SPL06_Write_Reg(dev, SPL06_PRS_CFG, &Data_write);
 8001ecc:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2106      	movs	r1, #6
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff fe2b 	bl	8001b30 <SPL06_Write_Reg>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 		errors += (Status != HAL_OK);
 8001ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 		HAL_Delay(25);
 8001efa:	2019      	movs	r0, #25
 8001efc:	f001 fe0a 	bl	8003b14 <HAL_Delay>

 		// Temperature Configuation 8Hz rate, 8x oversampling

 		Data_write = (0xB0 | 0x03);
 8001f00:	23b3      	movs	r3, #179	; 0xb3
 8001f02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

 	 	Status = SPL06_Write_Reg(dev, SPL06_TMP_CFG, &Data_write);
 8001f06:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2107      	movs	r1, #7
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff fe0e 	bl	8001b30 <SPL06_Write_Reg>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 	 	errors += (Status != HAL_OK);
 8001f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2e:	4413      	add	r3, r2
 8001f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	 	HAL_Delay(25);
 8001f34:	2019      	movs	r0, #25
 8001f36:	f001 fded 	bl	8003b14 <HAL_Delay>

 	 	//  measurement mode: temp and press continous

 		Data_write = 0x07;
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

 	 	Status = SPL06_Write_Reg(dev, SPL06_MEAS_CFG, &Data_write);
 8001f40:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8001f44:	461a      	mov	r2, r3
 8001f46:	2108      	movs	r1, #8
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff fdf1 	bl	8001b30 <SPL06_Write_Reg>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 	 	errors += (Status != HAL_OK);
 8001f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f68:	4413      	add	r3, r2
 8001f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	 	HAL_Delay(25);
 8001f6e:	2019      	movs	r0, #25
 8001f70:	f001 fdd0 	bl	8003b14 <HAL_Delay>


 		//  Enable data ready interrupt

 	 		Data_write = 0xA0;
 8001f74:	23a0      	movs	r3, #160	; 0xa0
 8001f76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

 	 	 	Status = SPL06_Write_Reg(dev, SPL06_CFG_REG, &Data_write);
 8001f7a:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2109      	movs	r1, #9
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7ff fdd4 	bl	8001b30 <SPL06_Write_Reg>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 	 	 	errors += (Status != HAL_OK);
 8001f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	 	 	HAL_Delay(25);
 8001fa8:	2019      	movs	r0, #25
 8001faa:	f001 fdb3 	bl	8003b14 <HAL_Delay>


 	 	 	dev->pressure_hPa = 0.0f;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]

 	 	 	return errors;
 8001fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

  }
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop

08001fc4 <SPL06_READ_TEMP_PRESS>:

 HAL_StatusTypeDef SPL06_READ_TEMP_PRESS(SPL06_t *dev)
 {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 	 HAL_StatusTypeDef Status;
 	 uint8_t errors = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 	 uint8_t RawData[6];
 	 float ScalingFactor = 7864320.0f;
 8001fd2:	4b70      	ldr	r3, [pc, #448]	; (8002194 <SPL06_READ_TEMP_PRESS+0x1d0>)
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 	 int32_t Traw_sc, Praw_sc;
 	 uint8_t Data_read = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	72fb      	strb	r3, [r7, #11]

 	 Status = SPL06_Read_Regs(dev, SPL06_PSR_B2 , RawData, 6);
 8001fda:	f107 020c 	add.w	r2, r7, #12
 8001fde:	2306      	movs	r3, #6
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd84 	bl	8001af0 <SPL06_Read_Regs>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	 errors += (Status != HAL_OK);
 8001fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002002:	4413      	add	r3, r2
 8002004:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

 	 Praw_sc = (((uint32_t)RawData[0] << 16) | ((uint32_t)RawData[1] << 8) | ((uint32_t)RawData[2]));
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	7b7b      	ldrb	r3, [r7, #13]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	4313      	orrs	r3, r2
 8002012:	7bba      	ldrb	r2, [r7, #14]
 8002014:	4313      	orrs	r3, r2
 8002016:	623b      	str	r3, [r7, #32]
 	 Praw_sc = (Praw_sc & 1 << 23) ? (Praw_sc | 0xFF000000) : Praw_sc;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <SPL06_READ_TEMP_PRESS+0x66>
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002028:	e000      	b.n	800202c <SPL06_READ_TEMP_PRESS+0x68>
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	623b      	str	r3, [r7, #32]

 	 Traw_sc = (((uint32_t)RawData[3] << 16) | ((uint32_t)RawData[4] << 8) | ((uint32_t)RawData[5]));
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	7c3b      	ldrb	r3, [r7, #16]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	4313      	orrs	r3, r2
 8002038:	7c7a      	ldrb	r2, [r7, #17]
 800203a:	4313      	orrs	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]
 	 Traw_sc = ( Traw_sc & 1 << 23) ? ( Traw_sc | 0xFF000000) :  Traw_sc;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <SPL06_READ_TEMP_PRESS+0x8c>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800204e:	e000      	b.n	8002052 <SPL06_READ_TEMP_PRESS+0x8e>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	61fb      	str	r3, [r7, #28]


 	float tempraw = (float) Traw_sc / ScalingFactor;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800205e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002066:	edc7 7a06 	vstr	s15, [r7, #24]
 	float presraw = (float) Praw_sc / ScalingFactor;
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002074:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207c:	edc7 7a05 	vstr	s15, [r7, #20]

 	 dev->temp_cel = dev->c0*0.5f + dev->c1*tempraw;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80020a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	edc3 7a03 	vstr	s15, [r3, #12]


 	 dev->pressure_hPa = ((dev->c00 + presraw * (dev->c10 + presraw * (dev->c20 + presraw * dev->c30)) +
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80020ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80020f2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80020f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002102:	edd7 7a05 	vldr	s15, [r7, #20]
 8002106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210a:	ee37 7a27 	vadd.f32	s14, s14, s15
 		tempraw * dev->c01 + tempraw * presraw * (dev->c11 + presraw*dev->c21))) / 100.0f;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800211c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 	 dev->pressure_hPa = ((dev->c00 + presraw * (dev->c10 + presraw * (dev->c20 + presraw * dev->c30)) +
 8002124:	ee37 7a27 	vadd.f32	s14, s14, s15
 		tempraw * dev->c01 + tempraw * presraw * (dev->c11 + presraw*dev->c21))) / 100.0f;
 8002128:	edd7 6a06 	vldr	s13, [r7, #24]
 800212c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002130:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002150:	edd7 7a05 	vldr	s15, [r7, #20]
 8002154:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002158:	ee76 7a27 	vadd.f32	s15, s12, s15
 800215c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002164:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002198 <SPL06_READ_TEMP_PRESS+0x1d4>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 	 dev->pressure_hPa = ((dev->c00 + presraw * (dev->c10 + presraw * (dev->c20 + presraw * dev->c30)) +
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edc3 7a02 	vstr	s15, [r3, #8]



 	 Status = SPL06_Read_Reg(dev, SPL06_INT_STS, &Data_read);
 8002172:	f107 030b 	add.w	r3, r7, #11
 8002176:	461a      	mov	r2, r3
 8002178:	210a      	movs	r1, #10
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fc9c 	bl	8001ab8 <SPL06_Read_Reg>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	 return errors;
 8002186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 }
 800218a:	4618      	mov	r0, r3
 800218c:	3730      	adds	r7, #48	; 0x30
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	4af00000 	.word	0x4af00000
 8002198:	42c80000 	.word	0x42c80000

0800219c <SPL06_PRESS_AND_TEMP_READY>:


 uint8_t SPL06_PRESS_AND_TEMP_READY(SPL06_t *dev)
 {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 	HAL_StatusTypeDef Status;
 	 uint8_t Data_read = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73bb      	strb	r3, [r7, #14]
 	 if((Status = SPL06_Read_Reg(dev, SPL06_MEAS_CFG, &Data_read)) != HAL_OK)
 80021a8:	f107 030e 	add.w	r3, r7, #14
 80021ac:	461a      	mov	r2, r3
 80021ae:	2108      	movs	r1, #8
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fc81 	bl	8001ab8 <SPL06_Read_Reg>
 80021b6:	4603      	mov	r3, r0
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SPL06_PRESS_AND_TEMP_READY+0x28>
 		 return 0xff;
 80021c0:	23ff      	movs	r3, #255	; 0xff
 80021c2:	e003      	b.n	80021cc <SPL06_PRESS_AND_TEMP_READY+0x30>

 	 return Is_Pressure_DataReady(Data_read);
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80021ca:	b2db      	uxtb	r3, r3
 }
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <INIT_ALTIMETER>:
#include <Altimeter.h>

static uint8_t PrepareAverageData = 0;

void INIT_ALTIMETER(Altimeter_t *dev, float currpress)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	ed87 0a00 	vstr	s0, [r7]


	dev->Altitude_1    = 0.0f;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
	dev->Altitude_2    = 0.0f;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
	dev->AveragePress  = 0.0f;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
	dev->AverageTemp   = 0.0f;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
	dev->ProcPress 	   = currpress;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	615a      	str	r2, [r3, #20]
	dev->Air_density   = 0.0f;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	609a      	str	r2, [r3, #8]

}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	0000      	movs	r0, r0
 800221c:	0000      	movs	r0, r0
	...

08002220 <Estimate_Altitude>:

void Estimate_Altitude(Altimeter_t *dev ,SPL06_t *SPL_dev,float CurrentPress, float CurrentTemp, uint8_t TURN_ON)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6178      	str	r0, [r7, #20]
 8002228:	6139      	str	r1, [r7, #16]
 800222a:	ed87 0a03 	vstr	s0, [r7, #12]
 800222e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	71fb      	strb	r3, [r7, #7]
//	 if(PrepareAverageData != TURN_ON){
//		 DataPrepareForAlitmeter(dev,SPL_dev,16.0f);
//		 PrepareAverageData = TURN_ON;
//	 }

	 if(TURN_ON){
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d05b      	beq.n	80022f4 <Estimate_Altitude+0xd4>
		  /* LOW PASS FILTER */
	 dev->ProcPress =  ALPHA * CurrentPress + (1.0f - ALPHA) *  dev->ProcPress;
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7fe f983 	bl	8000548 <__aeabi_f2d>
 8002242:	a331      	add	r3, pc, #196	; (adr r3, 8002308 <Estimate_Altitude+0xe8>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe f9d6 	bl	80005f8 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4614      	mov	r4, r2
 8002252:	461d      	mov	r5, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f975 	bl	8000548 <__aeabi_f2d>
 800225e:	a32c      	add	r3, pc, #176	; (adr r3, 8002310 <Estimate_Altitude+0xf0>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f9c8 	bl	80005f8 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f80c 	bl	800028c <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc94 	bl	8000ba8 <__aeabi_d2f>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	615a      	str	r2, [r3, #20]

	 /* BAROMETRIC FORMULA */
	 dev->Altitude_1 = -29.271769 * (CurrentTemp + 273.15) * log(dev->ProcPress / dev->AveragePress);
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	f7fe f95e 	bl	8000548 <__aeabi_f2d>
 800228c:	a322      	add	r3, pc, #136	; (adr r3, 8002318 <Estimate_Altitude+0xf8>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fd fffb 	bl	800028c <__adddf3>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	a320      	add	r3, pc, #128	; (adr r3, 8002320 <Estimate_Altitude+0x100>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fe f9a8 	bl	80005f8 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4614      	mov	r4, r2
 80022ae:	461d      	mov	r5, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	ed93 7a05 	vldr	s14, [r3, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022c0:	ee16 0a90 	vmov	r0, s13
 80022c4:	f7fe f940 	bl	8000548 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	ec43 2b10 	vmov	d0, r2, r3
 80022d0:	f008 ffa2 	bl	800b218 <log>
 80022d4:	ec53 2b10 	vmov	r2, r3, d0
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fe f98c 	bl	80005f8 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc5e 	bl	8000ba8 <__aeabi_d2f>
 80022ec:	4602      	mov	r2, r0
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
	 {
		 dev->Altitude_1 = 0.0f;
	 }


}
 80022f2:	e003      	b.n	80022fc <Estimate_Altitude+0xdc>
		 dev->Altitude_1 = 0.0f;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bdb0      	pop	{r4, r5, r7, pc}
 8002304:	f3af 8000 	nop.w
 8002308:	9999999a 	.word	0x9999999a
 800230c:	3fb99999 	.word	0x3fb99999
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	3feccccc 	.word	0x3feccccc
 8002318:	66666666 	.word	0x66666666
 800231c:	40711266 	.word	0x40711266
 8002320:	a737110e 	.word	0xa737110e
 8002324:	c03d4592 	.word	0xc03d4592

08002328 <DataPrepareForAlitmeter>:

void DataPrepareForAlitmeter(Altimeter_t *dev,SPL06_t *SPL_dev, float SAMPLE_NUM)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	ed87 0a01 	vstr	s0, [r7, #4]
	for(int i = 0; i < SAMPLE_NUM; ++i){
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e022      	b.n	8002382 <DataPrepareForAlitmeter+0x5a>
		while(SPL06_PRESS_AND_TEMP_READY(SPL_dev) == 0){;}
 800233c:	bf00      	nop
 800233e:	68b8      	ldr	r0, [r7, #8]
 8002340:	f7ff ff2c 	bl	800219c <SPL06_PRESS_AND_TEMP_READY>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f9      	beq.n	800233e <DataPrepareForAlitmeter+0x16>
	    SPL06_READ_TEMP_PRESS(SPL_dev);
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	f7ff fe3a 	bl	8001fc4 <SPL06_READ_TEMP_PRESS>

	    dev->AveragePress += SPL_dev->pressure_hPa ;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	ed93 7a03 	vldr	s14, [r3, #12]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	edd3 7a02 	vldr	s15, [r3, #8]
 800235c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	edc3 7a03 	vstr	s15, [r3, #12]
	    dev->AverageTemp += SPL_dev->temp_cel;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	ed93 7a04 	vldr	s14, [r3, #16]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	edc3 7a04 	vstr	s15, [r3, #16]
	for(int i = 0; i < SAMPLE_NUM; ++i){
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	dcd0      	bgt.n	800233c <DataPrepareForAlitmeter+0x14>
	}

	dev->AveragePress /= SAMPLE_NUM;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	edd3 6a03 	vldr	s13, [r3, #12]
 80023a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80023a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->AverageTemp  /= SAMPLE_NUM;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	edd3 6a04 	vldr	s13, [r3, #16]
 80023b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	edc3 7a04 	vstr	s15, [r3, #16]

}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <InitRollPitchYawEstimationFunc>:
 *
 */
static uint8_t ResetYawAngle = 0;

void InitRollPitchYawEstimationFunc(RollPitchYaw_t *RPY)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]

	RPY->RollAngle  = 0.0f;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
	RPY->PitchAngle = 0.0f;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
	RPY->YawAngle = 0.0f;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]

	RPY->RollAngleAcc = 0.0f;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
	RPY->PitchAngleAcc = 0.0f;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]


	RPY->RollAngleGyro = 0.0f;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
	RPY->PitchAngleGyro = 0.0f;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	619a      	str	r2, [r3, #24]


	RPY->LP_acc_ms2[0] = 0.0f;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	621a      	str	r2, [r3, #32]
	RPY->LP_acc_ms2[1] = 0.0f;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
	RPY->LP_acc_ms2[2] = 0.0f;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	629a      	str	r2, [r3, #40]	; 0x28


	RPY->LP_gyr_degs[0] = 0.0f;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
	RPY->LP_gyr_degs[1] = 0.0f;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
	RPY->LP_gyr_degs[2] = 0.0f;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	635a      	str	r2, [r3, #52]	; 0x34

	RPY->RollAngleDot  = 0.0f;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
	RPY->PitchAngleDot = 0.0f;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	63da      	str	r2, [r3, #60]	; 0x3c
	RPY->YawAngleDot = 0.0f;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <EstimateEulerRPYAngle>:
}



static void EstimateEulerRPYAngle(RollPitchYaw_t *RPY, float ax, float ay, float az)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	ed87 0a02 	vstr	s0, [r7, #8]
 800246c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002470:	ed87 1a00 	vstr	s2, [r7]
	 if(az == 0.0f){
 8002474:	edd7 7a00 	vldr	s15, [r7]
 8002478:	eef5 7a40 	vcmp.f32	s15, #0.0
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	d101      	bne.n	8002486 <EstimateEulerRPYAngle+0x26>
		 // poor protection against going angles out of range ( Gimbal lock)
			   az = 0.01f;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <EstimateEulerRPYAngle+0x64>)
 8002484:	603b      	str	r3, [r7, #0]
	   }
	RPY->RollAngleAcc  = atan2f(ay , az);
 8002486:	edd7 0a00 	vldr	s1, [r7]
 800248a:	ed97 0a01 	vldr	s0, [r7, #4]
 800248e:	f008 ff2d 	bl	800b2ec <atan2f>
 8002492:	eef0 7a40 	vmov.f32	s15, s0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	edc3 7a03 	vstr	s15, [r3, #12]
	RPY->PitchAngleAcc = asinf(ax /  EarthGravity);
 800249c:	edd7 7a02 	vldr	s15, [r7, #8]
 80024a0:	eddf 6a09 	vldr	s13, [pc, #36]	; 80024c8 <EstimateEulerRPYAngle+0x68>
 80024a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024a8:	eeb0 0a47 	vmov.f32	s0, s14
 80024ac:	f008 fef2 	bl	800b294 <asinf>
 80024b0:	eef0 7a40 	vmov.f32	s15, s0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	3c23d70a 	.word	0x3c23d70a
 80024c8:	411cf5c3 	.word	0x411cf5c3

080024cc <EstimateEulerRPYAngleDot>:

static void EstimateEulerRPYAngleDot(RollPitchYaw_t *RPY, float p, float q, float r)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	ed2d 8b02 	vpush	{d8}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80024dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80024e0:	ed87 1a00 	vstr	s2, [r7]
   if(cosf(RPY->PitchAngle) == 0.0f || sinf(RPY->PitchAngle) == 0.0f ){
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ea:	eeb0 0a67 	vmov.f32	s0, s15
 80024ee:	f008 fddd 	bl	800b0ac <cosf>
 80024f2:	eef0 7a40 	vmov.f32	s15, s0
 80024f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d00d      	beq.n	800251c <EstimateEulerRPYAngleDot+0x50>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	edd3 7a01 	vldr	s15, [r3, #4]
 8002506:	eeb0 0a67 	vmov.f32	s0, s15
 800250a:	f008 fe13 	bl	800b134 <sinf>
 800250e:	eef0 7a40 	vmov.f32	s15, s0
 8002512:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	d102      	bne.n	8002522 <EstimateEulerRPYAngleDot+0x56>
	   // poor protection against going angles out of range
		   RPY->PitchAngle = 0.01f;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a49      	ldr	r2, [pc, #292]	; (8002644 <EstimateEulerRPYAngleDot+0x178>)
 8002520:	605a      	str	r2, [r3, #4]
   }
   RPY->RollAngleDot  = p + tanf(RPY->PitchAngle)*(q * sinf( RPY->RollAngle) + r * cosf(RPY->RollAngle));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	edd3 7a01 	vldr	s15, [r3, #4]
 8002528:	eeb0 0a67 	vmov.f32	s0, s15
 800252c:	f008 fe48 	bl	800b1c0 <tanf>
 8002530:	eef0 8a40 	vmov.f32	s17, s0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb0 0a67 	vmov.f32	s0, s15
 800253e:	f008 fdf9 	bl	800b134 <sinf>
 8002542:	eeb0 7a40 	vmov.f32	s14, s0
 8002546:	edd7 7a01 	vldr	s15, [r7, #4]
 800254a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eeb0 0a67 	vmov.f32	s0, s15
 8002558:	f008 fda8 	bl	800b0ac <cosf>
 800255c:	eeb0 7a40 	vmov.f32	s14, s0
 8002560:	edd7 7a00 	vldr	s15, [r7]
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ee78 7a27 	vadd.f32	s15, s16, s15
 800256c:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8002570:	edd7 7a02 	vldr	s15, [r7, #8]
 8002574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
   RPY->PitchAngleDot = q * cosf(RPY->RollAngle) - r * sinf( RPY->RollAngle);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	eeb0 0a67 	vmov.f32	s0, s15
 8002588:	f008 fd90 	bl	800b0ac <cosf>
 800258c:	eeb0 7a40 	vmov.f32	s14, s0
 8002590:	edd7 7a01 	vldr	s15, [r7, #4]
 8002594:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eeb0 0a67 	vmov.f32	s0, s15
 80025a2:	f008 fdc7 	bl	800b134 <sinf>
 80025a6:	eeb0 7a40 	vmov.f32	s14, s0
 80025aa:	edd7 7a00 	vldr	s15, [r7]
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
   RPY->YawAngleDot   = q * (sinf(RPY->RollAngle)*(1/cosf(RPY->PitchAngle))) + r* (cosf(RPY->RollAngle)*(1/cosf(RPY->PitchAngle)) );
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	eeb0 0a67 	vmov.f32	s0, s15
 80025c6:	f008 fdb5 	bl	800b134 <sinf>
 80025ca:	eeb0 8a40 	vmov.f32	s16, s0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80025d4:	eeb0 0a67 	vmov.f32	s0, s15
 80025d8:	f008 fd68 	bl	800b0ac <cosf>
 80025dc:	eeb0 7a40 	vmov.f32	s14, s0
 80025e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80025ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	eeb0 0a67 	vmov.f32	s0, s15
 80025fe:	f008 fd55 	bl	800b0ac <cosf>
 8002602:	eef0 8a40 	vmov.f32	s17, s0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	edd3 7a01 	vldr	s15, [r3, #4]
 800260c:	eeb0 0a67 	vmov.f32	s0, s15
 8002610:	f008 fd4c 	bl	800b0ac <cosf>
 8002614:	eeb0 7a40 	vmov.f32	s14, s0
 8002618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800261c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002620:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8002624:	edd7 7a00 	vldr	s15, [r7]
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	ecbd 8b02 	vpop	{d8}
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	3c23d70a 	.word	0x3c23d70a

08002648 <EstimateRollPitchYawComplementaryFilter>:


void EstimateRollPitchYawComplementaryFilter(RollPitchYaw_t *RPY, BMI088_t *BMI,QMC5883L_t *QMC, float ALPHA_ACC,
		float ALPHA_GYRO, uint16_t SAMPLE_TIME, float ALPHA_COMPLEMENTARY, uint8_t MAGNETOMETER_IS_ON)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	ed2d 8b02 	vpush	{d8}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	61f8      	str	r0, [r7, #28]
 8002654:	61b9      	str	r1, [r7, #24]
 8002656:	617a      	str	r2, [r7, #20]
 8002658:	ed87 0a04 	vstr	s0, [r7, #16]
 800265c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002660:	ed87 1a01 	vstr	s2, [r7, #4]
 8002664:	817b      	strh	r3, [r7, #10]

/* Basic I order IIR low-pass filter */

RPY->LP_acc_ms2[0] = ALPHA_ACC * BMI->acc_ms2[0] + (1.0f - ALPHA_ACC) *  RPY->LP_acc_ms2[0];
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	ed93 7a01 	vldr	s14, [r3, #4]
 800266c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002678:	edd7 7a04 	vldr	s15, [r7, #16]
 800267c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	edd3 7a08 	vldr	s15, [r3, #32]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	edc3 7a08 	vstr	s15, [r3, #32]
RPY->LP_acc_ms2[1] = ALPHA_ACC * BMI->acc_ms2[1] + (1.0f - ALPHA_ACC) *  RPY->LP_acc_ms2[1];
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	ed93 7a02 	vldr	s14, [r3, #8]
 800269a:	edd7 7a04 	vldr	s15, [r7, #16]
 800269e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80026b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
RPY->LP_acc_ms2[2] = ALPHA_ACC * BMI->acc_ms2[2] + (1.0f - ALPHA_ACC) *  RPY->LP_acc_ms2[2];
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80026c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80026e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

// Be careful with filtering gryo data, gyro carry high freq information so keep ALPHA_GYRO close to 1
RPY->LP_gyr_degs[0] = ALPHA_GYRO * BMI->gyr_degs[0] + (1.0f - ALPHA_GYRO) *  RPY->LP_gyr_degs[0];
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80026f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80026fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002702:	edd7 7a03 	vldr	s15, [r7, #12]
 8002706:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
RPY->LP_gyr_degs[1] = ALPHA_GYRO * BMI->gyr_degs[1] + (1.0f - ALPHA_GYRO) *  RPY->LP_gyr_degs[1];
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	ed93 7a05 	vldr	s14, [r3, #20]
 8002724:	edd7 7a03 	vldr	s15, [r7, #12]
 8002728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002730:	edd7 7a03 	vldr	s15, [r7, #12]
 8002734:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
RPY->LP_gyr_degs[2] = ALPHA_GYRO * BMI->gyr_degs[2] + (1.0f - ALPHA_GYRO) *  RPY->LP_gyr_degs[2];
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002752:	edd7 7a03 	vldr	s15, [r7, #12]
 8002756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800275e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002762:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34



/* Angles estimation by accelerometer */
EstimateEulerRPYAngle(RPY, RPY->LP_acc_ms2[0], RPY->LP_acc_ms2[1],RPY->LP_acc_ms2[2]);
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800278c:	eeb0 1a66 	vmov.f32	s2, s13
 8002790:	eef0 0a47 	vmov.f32	s1, s14
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	69f8      	ldr	r0, [r7, #28]
 800279a:	f7ff fe61 	bl	8002460 <EstimateEulerRPYAngle>

/* Speed of change of angles, gyroscope */
EstimateEulerRPYAngleDot(RPY, RPY->LP_gyr_degs[0], RPY->LP_gyr_degs[1], RPY->LP_gyr_degs[2]);
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80027b0:	eeb0 1a66 	vmov.f32	s2, s13
 80027b4:	eef0 0a47 	vmov.f32	s1, s14
 80027b8:	eeb0 0a67 	vmov.f32	s0, s15
 80027bc:	69f8      	ldr	r0, [r7, #28]
 80027be:	f7ff fe85 	bl	80024cc <EstimateEulerRPYAngleDot>


/* Roll & Pitch & Yaw */
RPY->RollAngle  = ALPHA_COMPLEMENTARY * RPY->RollAngleAcc  + (1.0f - ALPHA_COMPLEMENTARY) * (RPY->RollAngle
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80027c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	ed93 6a00 	vldr	s12, [r3]
		+   ((float)SAMPLE_TIME / 1000.0f) * RPY->RollAngleDot);
 80027e2:	897b      	ldrh	r3, [r7, #10]
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ec:	ed9f 5a94 	vldr	s10, [pc, #592]	; 8002a40 <EstimateRollPitchYawComplementaryFilter+0x3f8>
 80027f0:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80027fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80027fe:	ee76 7a27 	vadd.f32	s15, s12, s15
RPY->RollAngle  = ALPHA_COMPLEMENTARY * RPY->RollAngleAcc  + (1.0f - ALPHA_COMPLEMENTARY) * (RPY->RollAngle
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	edc3 7a00 	vstr	s15, [r3]

RPY->PitchAngle = ALPHA_COMPLEMENTARY * RPY->PitchAngleAcc + (1.0f - ALPHA_COMPLEMENTARY) * (RPY->PitchAngle
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	ed93 7a04 	vldr	s14, [r3, #16]
 8002816:	edd7 7a01 	vldr	s15, [r7, #4]
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002822:	edd7 7a01 	vldr	s15, [r7, #4]
 8002826:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	ed93 6a01 	vldr	s12, [r3, #4]
		+ ((float)SAMPLE_TIME / 1000.0f) * RPY->PitchAngleDot);
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	ed9f 5a81 	vldr	s10, [pc, #516]	; 8002a40 <EstimateRollPitchYawComplementaryFilter+0x3f8>
 800283e:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002848:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800284c:	ee76 7a27 	vadd.f32	s15, s12, s15
RPY->PitchAngle = ALPHA_COMPLEMENTARY * RPY->PitchAngleAcc + (1.0f - ALPHA_COMPLEMENTARY) * (RPY->PitchAngle
 8002850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	edc3 7a01 	vstr	s15, [r3, #4]


/* due to unpredictable magnetometer behaviour there is option to measure yaw only with gyro */
if(MAGNETOMETER_IS_ON){
 800285e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80ca 	beq.w	80029fc <EstimateRollPitchYawComplementaryFilter+0x3b4>
		 if(ResetYawAngle != MAGNETOMETER_IS_ON){
 8002868:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <EstimateRollPitchYawComplementaryFilter+0x3fc>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002870:	429a      	cmp	r2, r3
 8002872:	d007      	beq.n	8002884 <EstimateRollPitchYawComplementaryFilter+0x23c>
				RPY->YawAngle = 0.0f;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
				ResetYawAngle = MAGNETOMETER_IS_ON;
 800287c:	4a71      	ldr	r2, [pc, #452]	; (8002a44 <EstimateRollPitchYawComplementaryFilter+0x3fc>)
 800287e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002882:	7013      	strb	r3, [r2, #0]
		 }


	// fit mag data to euler rate
	RPY->Xmag = -cosf(RPY->RollAngle)*QMC->CalMagData[1] + sinf(RPY->RollAngle)*QMC->CalMagData[2];
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	f008 fc0d 	bl	800b0ac <cosf>
 8002892:	eef0 7a40 	vmov.f32	s15, s0
 8002896:	eeb1 7a67 	vneg.f32	s14, s15
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	edd3 7a02 	vldr	s15, [r3, #8]
 80028a0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eeb0 0a67 	vmov.f32	s0, s15
 80028ae:	f008 fc41 	bl	800b134 <sinf>
 80028b2:	eeb0 7a40 	vmov.f32	s14, s0
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80028bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	RPY->Ymag = QMC->CalMagData[0]*cosf(RPY->PitchAngle) + (sinf(RPY->PitchAngle)*sinf(RPY->RollAngle))*QMC->CalMagData[1]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	ed93 8a01 	vldr	s16, [r3, #4]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	f008 fbe7 	bl	800b0ac <cosf>
 80028de:	eef0 7a40 	vmov.f32	s15, s0
 80028e2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	f008 fc20 	bl	800b134 <sinf>
 80028f4:	eef0 8a40 	vmov.f32	s17, s0
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002902:	f008 fc17 	bl	800b134 <sinf>
 8002906:	eef0 7a40 	vmov.f32	s15, s0
 800290a:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	edd3 7a02 	vldr	s15, [r3, #8]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	ee38 8a27 	vadd.f32	s16, s16, s15
			+ (sinf(RPY->PitchAngle)*cosf(RPY->RollAngle))*QMC->CalMagData[2];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	f008 fc05 	bl	800b134 <sinf>
 800292a:	eef0 8a40 	vmov.f32	s17, s0
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	eeb0 0a67 	vmov.f32	s0, s15
 8002938:	f008 fbb8 	bl	800b0ac <cosf>
 800293c:	eef0 7a40 	vmov.f32	s15, s0
 8002940:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	edd3 7a03 	vldr	s15, [r3, #12]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	ee78 7a27 	vadd.f32	s15, s16, s15
	RPY->Ymag = QMC->CalMagData[0]*cosf(RPY->PitchAngle) + (sinf(RPY->PitchAngle)*sinf(RPY->RollAngle))*QMC->CalMagData[1]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	if(RPY->Xmag == 0){
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800295e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	d102      	bne.n	800296e <EstimateRollPitchYawComplementaryFilter+0x326>
		RPY->Xmag = 0.01f;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <EstimateRollPitchYawComplementaryFilter+0x400>)
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
	}

	RPY->YawAngle = atan2f(RPY->Xmag, RPY->Ymag) + (6.0f * 3.14/180);
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800297a:	eef0 0a47 	vmov.f32	s1, s14
 800297e:	eeb0 0a67 	vmov.f32	s0, s15
 8002982:	f008 fcb3 	bl	800b2ec <atan2f>
 8002986:	ee10 3a10 	vmov	r3, s0
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fddc 	bl	8000548 <__aeabi_f2d>
 8002990:	a329      	add	r3, pc, #164	; (adr r3, 8002a38 <EstimateRollPitchYawComplementaryFilter+0x3f0>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fc79 	bl	800028c <__adddf3>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7fe f901 	bl	8000ba8 <__aeabi_d2f>
 80029a6:	4602      	mov	r2, r0
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	609a      	str	r2, [r3, #8]
	RPY->YawAngle = ALPHA_COMPLEMENTARY * RPY->YawAngleMag  + (1.0f - ALPHA_COMPLEMENTARY) * (RPY->YawAngle
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80029b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029be:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	ed93 6a02 	vldr	s12, [r3, #8]
			+   ((float)SAMPLE_TIME / 1000.0f) * RPY->YawAngleDot);
 80029cc:	897b      	ldrh	r3, [r7, #10]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 8002a40 <EstimateRollPitchYawComplementaryFilter+0x3f8>
 80029da:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80029e4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80029e8:	ee76 7a27 	vadd.f32	s15, s12, s15
	RPY->YawAngle = ALPHA_COMPLEMENTARY * RPY->YawAngleMag  + (1.0f - ALPHA_COMPLEMENTARY) * (RPY->YawAngle
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	edc3 7a02 	vstr	s15, [r3, #8]

}



}
 80029fa:	e015      	b.n	8002a28 <EstimateRollPitchYawComplementaryFilter+0x3e0>
	RPY->YawAngle = (RPY->YawAngle  + ((float)SAMPLE_TIME / 1000.0f) * RPY->YawAngleDot);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8002a40 <EstimateRollPitchYawComplementaryFilter+0x3f8>
 8002a10:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	ecbd 8b02 	vpop	{d8}
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	f3af 8000 	nop.w
 8002a38:	46508dff 	.word	0x46508dff
 8002a3c:	3fbacb6f 	.word	0x3fbacb6f
 8002a40:	447a0000 	.word	0x447a0000
 8002a44:	200001fc 	.word	0x200001fc
 8002a48:	3c23d70a 	.word	0x3c23d70a

08002a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	4a3f      	ldr	r2, [pc, #252]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	4a39      	ldr	r2, [pc, #228]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	4a33      	ldr	r2, [pc, #204]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <MX_GPIO_Init+0x118>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Sensors_Led_Pin|Status_Led_Pin, GPIO_PIN_RESET);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002ab0:	482d      	ldr	r0, [pc, #180]	; (8002b68 <MX_GPIO_Init+0x11c>)
 8002ab2:	f001 fb0f 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPL_INT_Pin|BMI_ACC_INT_Pin|BMI_GYRO_INT_Pin|LPS25_INT_Pin;
 8002ab6:	f640 030e 	movw	r3, #2062	; 0x80e
 8002aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002abc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	4619      	mov	r1, r3
 8002acc:	4827      	ldr	r0, [pc, #156]	; (8002b6c <MX_GPIO_Init+0x120>)
 8002ace:	f001 f957 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Sensors_Led_Pin|Status_Led_Pin;
 8002ad2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4619      	mov	r1, r3
 8002aea:	481f      	ldr	r0, [pc, #124]	; (8002b68 <MX_GPIO_Init+0x11c>)
 8002aec:	f001 f948 	bl	8003d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTT_Pin;
 8002af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002af6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTT_GPIO_Port, &GPIO_InitStruct);
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4619      	mov	r1, r3
 8002b06:	4819      	ldr	r0, [pc, #100]	; (8002b6c <MX_GPIO_Init+0x120>)
 8002b08:	f001 f93a 	bl	8003d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2105      	movs	r1, #5
 8002b10:	2007      	movs	r0, #7
 8002b12:	f001 f8fe 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b16:	2007      	movs	r0, #7
 8002b18:	f001 f917 	bl	8003d4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2105      	movs	r1, #5
 8002b20:	2008      	movs	r0, #8
 8002b22:	f001 f8f6 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b26:	2008      	movs	r0, #8
 8002b28:	f001 f90f 	bl	8003d4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2105      	movs	r1, #5
 8002b30:	2009      	movs	r0, #9
 8002b32:	f001 f8ee 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b36:	2009      	movs	r0, #9
 8002b38:	f001 f907 	bl	8003d4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2103      	movs	r1, #3
 8002b40:	2017      	movs	r0, #23
 8002b42:	f001 f8e6 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b46:	2017      	movs	r0, #23
 8002b48:	f001 f8ff 	bl	8003d4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2105      	movs	r1, #5
 8002b50:	2028      	movs	r0, #40	; 0x28
 8002b52:	f001 f8de 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b56:	2028      	movs	r0, #40	; 0x28
 8002b58:	f001 f8f7 	bl	8003d4a <HAL_NVIC_EnableIRQ>

}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	48000800 	.word	0x48000800

08002b70 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <MX_I2C1_Init+0x78>)
 8002b78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <MX_I2C1_Init+0x7c>)
 8002b7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002baa:	480e      	ldr	r0, [pc, #56]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002bac:	f001 fadc 	bl	8004168 <HAL_I2C_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bb6:	f000 fb5d 	bl	8003274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4809      	ldr	r0, [pc, #36]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002bbe:	f002 f93f 	bl	8004e40 <HAL_I2CEx_ConfigAnalogFilter>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bc8:	f000 fb54 	bl	8003274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <MX_I2C1_Init+0x74>)
 8002bd0:	f002 f981 	bl	8004ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bda:	f000 fb4b 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000200 	.word	0x20000200
 8002be8:	40005400 	.word	0x40005400
 8002bec:	00702991 	.word	0x00702991

08002bf0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <MX_I2C2_Init+0x78>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702991;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <MX_I2C2_Init+0x7c>)
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c2a:	480e      	ldr	r0, [pc, #56]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c2c:	f001 fa9c 	bl	8004168 <HAL_I2C_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c36:	f000 fb1d 	bl	8003274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4809      	ldr	r0, [pc, #36]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c3e:	f002 f8ff 	bl	8004e40 <HAL_I2CEx_ConfigAnalogFilter>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c48:	f000 fb14 	bl	8003274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_I2C2_Init+0x74>)
 8002c50:	f002 f941 	bl	8004ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c5a:	f000 fb0b 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000254 	.word	0x20000254
 8002c68:	40005800 	.word	0x40005800
 8002c6c:	00702991 	.word	0x00702991

08002c70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b0ae      	sub	sp, #184	; 0xb8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	2288      	movs	r2, #136	; 0x88
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f005 fc5f 	bl	8008554 <memset>
  if(i2cHandle->Instance==I2C1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a42      	ldr	r2, [pc, #264]	; (8002da4 <HAL_I2C_MspInit+0x134>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d13c      	bne.n	8002d1a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 ffc3 	bl	8005c38 <HAL_RCCEx_PeriphCLKConfig>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002cb8:	f000 fadc 	bl	8003274 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbc:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc0:	4a39      	ldr	r2, [pc, #228]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc8:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cdc:	2312      	movs	r3, #18
 8002cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	482c      	ldr	r0, [pc, #176]	; (8002dac <HAL_I2C_MspInit+0x13c>)
 8002cfc:	f001 f840 	bl	8003d80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002d18:	e040      	b.n	8002d9c <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <HAL_I2C_MspInit+0x140>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d13b      	bne.n	8002d9c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 ff81 	bl	8005c38 <HAL_RCCEx_PeriphCLKConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002d3c:	f000 fa9a 	bl	8003274 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d58:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d60:	2312      	movs	r3, #18
 8002d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d72:	2304      	movs	r3, #4
 8002d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480b      	ldr	r0, [pc, #44]	; (8002dac <HAL_I2C_MspInit+0x13c>)
 8002d80:	f000 fffe 	bl	8003d80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_I2C_MspInit+0x138>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	37b8      	adds	r7, #184	; 0xb8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40005400 	.word	0x40005400
 8002da8:	40021000 	.word	0x40021000
 8002dac:	48000400 	.word	0x48000400
 8002db0:	40005800 	.word	0x40005800

08002db4 <ScanI2CBus>:
#define I2C_MAX_TIME 100



void ScanI2CBus(I2C_HandleTypeDef *i2cHandle)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	 uint8_t MaxNumberOfI2cDevices = (0xFF >> 1);
 8002dbc:	237f      	movs	r3, #127	; 0x7f
 8002dbe:	737b      	strb	r3, [r7, #13]
	 uint8_t counter = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
	 HAL_StatusTypeDef Status;

	 printf("Scanning Bus\n");
 8002dc4:	481e      	ldr	r0, [pc, #120]	; (8002e40 <ScanI2CBus+0x8c>)
 8002dc6:	f006 f8bd 	bl	8008f44 <puts>
	 for(uint8_t address = 0; address < MaxNumberOfI2cDevices; ++address)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73bb      	strb	r3, [r7, #14]
 8002dce:	e01f      	b.n	8002e10 <ScanI2CBus+0x5c>
	 {

	     Status = HAL_I2C_IsDeviceReady(i2cHandle, (uint16_t)(address<<1), 2, I2C_MAX_TIME);
 8002dd0:	7bbb      	ldrb	r3, [r7, #14]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	b299      	uxth	r1, r3
 8002dd8:	2364      	movs	r3, #100	; 0x64
 8002dda:	2202      	movs	r2, #2
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f001 fc81 	bl	80046e4 <HAL_I2C_IsDeviceReady>
 8002de2:	4603      	mov	r3, r0
 8002de4:	733b      	strb	r3, [r7, #12]
	     if (Status != HAL_OK) // No answer from that address
 8002de6:	7b3b      	ldrb	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <ScanI2CBus+0x40>
	     {
	         printf(" - ");
 8002dec:	4815      	ldr	r0, [pc, #84]	; (8002e44 <ScanI2CBus+0x90>)
 8002dee:	f006 f823 	bl	8008e38 <iprintf>
 8002df2:	e00a      	b.n	8002e0a <ScanI2CBus+0x56>
	     }
	     else if(Status == HAL_OK)
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <ScanI2CBus+0x56>
	     {
	    	counter++;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
	        printf("0x%X", address);
 8002e00:	7bbb      	ldrb	r3, [r7, #14]
 8002e02:	4619      	mov	r1, r3
 8002e04:	4810      	ldr	r0, [pc, #64]	; (8002e48 <ScanI2CBus+0x94>)
 8002e06:	f006 f817 	bl	8008e38 <iprintf>
	 for(uint8_t address = 0; address < MaxNumberOfI2cDevices; ++address)
 8002e0a:	7bbb      	ldrb	r3, [r7, #14]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	73bb      	strb	r3, [r7, #14]
 8002e10:	7bba      	ldrb	r2, [r7, #14]
 8002e12:	7b7b      	ldrb	r3, [r7, #13]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d3db      	bcc.n	8002dd0 <ScanI2CBus+0x1c>
	     }
	 }
	if(counter == 0){
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <ScanI2CBus+0x78>
		printf("No devices?\n");
 8002e1e:	480b      	ldr	r0, [pc, #44]	; (8002e4c <ScanI2CBus+0x98>)
 8002e20:	f006 f890 	bl	8008f44 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002e24:	2108      	movs	r1, #8
 8002e26:	480a      	ldr	r0, [pc, #40]	; (8002e50 <ScanI2CBus+0x9c>)
 8002e28:	f003 fc7a 	bl	8006720 <HAL_TIM_OC_Start_IT>

	}
	printf(" End of scanning, number of devices on Bus: %d\n", counter);
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4808      	ldr	r0, [pc, #32]	; (8002e54 <ScanI2CBus+0xa0>)
 8002e32:	f006 f801 	bl	8008e38 <iprintf>
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	0800c748 	.word	0x0800c748
 8002e44:	0800c758 	.word	0x0800c758
 8002e48:	0800c75c 	.word	0x0800c75c
 8002e4c:	0800c764 	.word	0x0800c764
 8002e50:	20000430 	.word	0x20000430
 8002e54:	0800c770 	.word	0x0800c770

08002e58 <CheckI2Cfaults>:


void CheckI2Cfaults(uint8_t errors)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
   if(errors != 0){
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <CheckI2Cfaults+0x18>
	   HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4803      	ldr	r0, [pc, #12]	; (8002e78 <CheckI2Cfaults+0x20>)
 8002e6c:	f003 fc58 	bl	8006720 <HAL_TIM_OC_Start_IT>
   }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000430 	.word	0x20000430

08002e7c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b0a      	cmp	r3, #10
 8002e88:	d102      	bne.n	8002e90 <__io_putchar+0x14>
    __io_putchar('\r');
 8002e8a:	200d      	movs	r0, #13
 8002e8c:	f7ff fff6 	bl	8002e7c <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002e90:	1d39      	adds	r1, r7, #4
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	2201      	movs	r2, #1
 8002e98:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <__io_putchar+0x2c>)
 8002e9a:	f004 fe35 	bl	8007b08 <HAL_UART_Transmit>

  return 1;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200004c8 	.word	0x200004c8

08002eac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LPS25_INT_Pin){
		//DataReadyLPS25 = 1;

	}

	if(GPIO_Pin == USER_BUTT_Pin){
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d132      	bne.n	8002f24 <HAL_GPIO_EXTI_Callback+0x78>

		ALTIcounter++;
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x80>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x80>)
 8002eca:	701a      	strb	r2, [r3, #0]
		MAGcounter++;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x84>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x84>)
 8002ed8:	701a      	strb	r2, [r3, #0]

		if(ALTIcounter >= ALTIMETER_ON){
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x80>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d916      	bls.n	8002f12 <HAL_GPIO_EXTI_Callback+0x66>
			HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4813      	ldr	r0, [pc, #76]	; (8002f34 <HAL_GPIO_EXTI_Callback+0x88>)
 8002ee8:	f003 fd6e 	bl	80069c8 <HAL_TIM_OC_Stop_IT>

			MAGcounter = 0;
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x84>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
			ALTIcounter = 0;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x80>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
			ALTI_ON ^= 1;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	f083 0301 	eor.w	r3, r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002f04:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(Sensors_Led_GPIO_Port,  Sensors_Led_Pin);
 8002f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f0a:	480c      	ldr	r0, [pc, #48]	; (8002f3c <HAL_GPIO_EXTI_Callback+0x90>)
 8002f0c:	f001 f8fa 	bl	8004104 <HAL_GPIO_TogglePin>

	}



}
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_EXTI_Callback+0x78>
		else if(ALTIcounter ==  ALTIMETER_OFF){
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x80>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d103      	bne.n	8002f24 <HAL_GPIO_EXTI_Callback+0x78>
			HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4805      	ldr	r0, [pc, #20]	; (8002f34 <HAL_GPIO_EXTI_Callback+0x88>)
 8002f20:	f003 fbfe 	bl	8006720 <HAL_TIM_OC_Start_IT>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000428 	.word	0x20000428
 8002f30:	20000429 	.word	0x20000429
 8002f34:	2000047c 	.word	0x2000047c
 8002f38:	2000042a 	.word	0x2000042a
 8002f3c:	48000400 	.word	0x48000400

08002f40 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if (htim == &htim4) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d121      	bne.n	8002f94 <HAL_TIM_OC_DelayElapsedCallback+0x54>
    switch (HAL_TIM_GetActiveChannel(&htim4)) {
 8002f50:	4827      	ldr	r0, [pc, #156]	; (8002ff0 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8002f52:	f004 f8a8 	bl	80070a6 <HAL_TIM_GetActiveChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d11d      	bne.n	8002f98 <HAL_TIM_OC_DelayElapsedCallback+0x58>
    case HAL_TIM_ACTIVE_CHANNEL_1:

    	ALTIcounter = 0;
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]

    	if(MAGcounter == MAGNETOMETER_ON){
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10e      	bne.n	8002f8a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
    		MAG_ON ^= 1;
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	f083 0301 	eor.w	r3, r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8002f78:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_TogglePin(Status_Led_GPIO_Port,  Status_Led_Pin);
 8002f7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f7e:	4820      	ldr	r0, [pc, #128]	; (8003000 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 8002f80:	f001 f8c0 	bl	8004104 <HAL_GPIO_TogglePin>
    		MAGcounter = 0;
 8002f84:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]

    	}
    	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4818      	ldr	r0, [pc, #96]	; (8002ff0 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8002f8e:	f003 fd1b 	bl	80069c8 <HAL_TIM_OC_Stop_IT>

      break;
 8002f92:	e002      	b.n	8002f9a <HAL_TIM_OC_DelayElapsedCallback+0x5a>

    default:
      break;
    }
  }
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_OC_DelayElapsedCallback+0x5a>
      break;
 8002f98:	bf00      	nop
  if (htim == &htim3) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d11e      	bne.n	8002fe0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
    switch (HAL_TIM_GetActiveChannel(&htim3)) {
 8002fa2:	4818      	ldr	r0, [pc, #96]	; (8003004 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8002fa4:	f004 f87f 	bl	80070a6 <HAL_TIM_GetActiveChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d012      	beq.n	8002fd4 <HAL_TIM_OC_DelayElapsedCallback+0x94>
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	dc18      	bgt.n	8002fe4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d002      	beq.n	8002fbc <HAL_TIM_OC_DelayElapsedCallback+0x7c>
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d006      	beq.n	8002fc8 <HAL_TIM_OC_DelayElapsedCallback+0x88>
    case HAL_TIM_ACTIVE_CHANNEL_3:
    	// No I2C devices status blinking with 4Hz
        HAL_GPIO_TogglePin(Status_Led_GPIO_Port,  Status_Led_Pin);
        break;
    default:
      break;
 8002fba:	e013      	b.n	8002fe4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
      HAL_GPIO_TogglePin(Sensors_Led_GPIO_Port,  Sensors_Led_Pin);
 8002fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fc0:	480f      	ldr	r0, [pc, #60]	; (8003000 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 8002fc2:	f001 f89f 	bl	8004104 <HAL_GPIO_TogglePin>
      break;
 8002fc6:	e00e      	b.n	8002fe6 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
      HAL_GPIO_TogglePin(Sensors_Led_GPIO_Port,  Sensors_Led_Pin);
 8002fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fcc:	480c      	ldr	r0, [pc, #48]	; (8003000 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 8002fce:	f001 f899 	bl	8004104 <HAL_GPIO_TogglePin>
      break;
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
        HAL_GPIO_TogglePin(Status_Led_GPIO_Port,  Status_Led_Pin);
 8002fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fd8:	4809      	ldr	r0, [pc, #36]	; (8003000 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 8002fda:	f001 f893 	bl	8004104 <HAL_GPIO_TogglePin>
        break;
 8002fde:	e002      	b.n	8002fe6 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
    }
  }
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
      break;
 8002fe4:	bf00      	nop
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000047c 	.word	0x2000047c
 8002ff4:	20000428 	.word	0x20000428
 8002ff8:	20000429 	.word	0x20000429
 8002ffc:	2000042b 	.word	0x2000042b
 8003000:	48000400 	.word	0x48000400
 8003004:	20000430 	.word	0x20000430

08003008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b088      	sub	sp, #32
 800300e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003010:	f000 fd0b 	bl	8003a2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003014:	f000 f8dc 	bl	80031d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003018:	f7ff fd18 	bl	8002a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 800301c:	f7ff fda8 	bl	8002b70 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003020:	f000 fc08 	bl	8003834 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003024:	f7ff fde4 	bl	8002bf0 <MX_I2C2_Init>
  MX_TIM3_Init();
 8003028:	f000 fa8a 	bl	8003540 <MX_TIM3_Init>
  MX_TIM4_Init();
 800302c:	f000 fb1a 	bl	8003664 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003030:	f000 fbd0 	bl	80037d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_EnableListen_IT(&hi2c1);
ScanI2CBus(&hi2c1); ScanI2CBus(&hi2c2);
 8003034:	4855      	ldr	r0, [pc, #340]	; (800318c <main+0x184>)
 8003036:	f7ff febd 	bl	8002db4 <ScanI2CBus>
 800303a:	4855      	ldr	r0, [pc, #340]	; (8003190 <main+0x188>)
 800303c:	f7ff feba 	bl	8002db4 <ScanI2CBus>
CheckI2Cfaults(SPL06_INIT(&Dev.SPL, &hi2c1, SPL06_I2C_ADDRESS_I));
 8003040:	22ee      	movs	r2, #238	; 0xee
 8003042:	4952      	ldr	r1, [pc, #328]	; (800318c <main+0x184>)
 8003044:	4853      	ldr	r0, [pc, #332]	; (8003194 <main+0x18c>)
 8003046:	f7fe fd8f 	bl	8001b68 <SPL06_INIT>
 800304a:	4603      	mov	r3, r0
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff03 	bl	8002e58 <CheckI2Cfaults>
CheckI2Cfaults(BMI088_INIT(&Dev.BMI, &hi2c2));
 8003052:	494f      	ldr	r1, [pc, #316]	; (8003190 <main+0x188>)
 8003054:	4850      	ldr	r0, [pc, #320]	; (8003198 <main+0x190>)
 8003056:	f7fe f85d 	bl	8001114 <BMI088_INIT>
 800305a:	4603      	mov	r3, r0
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fefb 	bl	8002e58 <CheckI2Cfaults>
CheckI2Cfaults(QMC5883L_INIT(&Dev.QMC,&hi2c1 , QMC5883L_ADDRESS));
 8003062:	221a      	movs	r2, #26
 8003064:	4949      	ldr	r1, [pc, #292]	; (800318c <main+0x184>)
 8003066:	484d      	ldr	r0, [pc, #308]	; (800319c <main+0x194>)
 8003068:	f7fe fb48 	bl	80016fc <QMC5883L_INIT>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fef2 	bl	8002e58 <CheckI2Cfaults>


// dummy read
QMC5883L_ReadMag(&Dev.QMC, 0.5f);
 8003074:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003078:	4848      	ldr	r0, [pc, #288]	; (800319c <main+0x194>)
 800307a:	f7fe fbef 	bl	800185c <QMC5883L_ReadMag>
SPL06_READ_TEMP_PRESS(&Dev.SPL);
 800307e:	4845      	ldr	r0, [pc, #276]	; (8003194 <main+0x18c>)
 8003080:	f7fe ffa0 	bl	8001fc4 <SPL06_READ_TEMP_PRESS>
BMI088_ReadAcc(&Dev.BMI); BMI088_ReadGyro(&Dev.BMI);
 8003084:	4844      	ldr	r0, [pc, #272]	; (8003198 <main+0x190>)
 8003086:	f7fe fa1b 	bl	80014c0 <BMI088_ReadAcc>
 800308a:	4843      	ldr	r0, [pc, #268]	; (8003198 <main+0x190>)
 800308c:	f7fe fa7a 	bl	8001584 <BMI088_ReadGyro>

INIT_ALTIMETER(&Dev.Altimeter, Dev.SPL.pressure_hPa);
 8003090:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <main+0x198>)
 8003092:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003096:	eeb0 0a67 	vmov.f32	s0, s15
 800309a:	4842      	ldr	r0, [pc, #264]	; (80031a4 <main+0x19c>)
 800309c:	f7ff f89a 	bl	80021d4 <INIT_ALTIMETER>
DataPrepareForAlitmeter(&Dev.Altimeter,&Dev.SPL, 50);
 80030a0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80031a8 <main+0x1a0>
 80030a4:	493b      	ldr	r1, [pc, #236]	; (8003194 <main+0x18c>)
 80030a6:	483f      	ldr	r0, [pc, #252]	; (80031a4 <main+0x19c>)
 80030a8:	f7ff f93e 	bl	8002328 <DataPrepareForAlitmeter>

InitRollPitchYawEstimationFunc(&RPY_dev);
 80030ac:	483f      	ldr	r0, [pc, #252]	; (80031ac <main+0x1a4>)
 80030ae:	f7ff f98c 	bl	80023ca <InitRollPitchYawEstimationFunc>
  /* USER CODE BEGIN WHILE */
  while (1)
{


	  if(HAL_GetTick() - time_tick >= Sample_time)
 80030b2:	f000 fd23 	bl	8003afc <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <main+0x1a8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	1ad2      	subs	r2, r2, r3
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <main+0x1ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3f5      	bcc.n	80030b2 <main+0xaa>
	 	  {

		  time_tick = HAL_GetTick();
 80030c6:	f000 fd19 	bl	8003afc <HAL_GetTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <main+0x1a8>)
 80030ce:	6013      	str	r3, [r2, #0]

		  BMI088_ReadAcc(&Dev.BMI);
 80030d0:	4831      	ldr	r0, [pc, #196]	; (8003198 <main+0x190>)
 80030d2:	f7fe f9f5 	bl	80014c0 <BMI088_ReadAcc>
		  BMI088_ReadGyro(&Dev.BMI);
 80030d6:	4830      	ldr	r0, [pc, #192]	; (8003198 <main+0x190>)
 80030d8:	f7fe fa54 	bl	8001584 <BMI088_ReadGyro>
		  QMC5883L_ReadMag(&Dev.QMC, 0.6f);
 80030dc:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80031b8 <main+0x1b0>
 80030e0:	482e      	ldr	r0, [pc, #184]	; (800319c <main+0x194>)
 80030e2:	f7fe fbbb 	bl	800185c <QMC5883L_ReadMag>
		  SPL06_READ_TEMP_PRESS(&Dev.SPL);
 80030e6:	482b      	ldr	r0, [pc, #172]	; (8003194 <main+0x18c>)
 80030e8:	f7fe ff6c 	bl	8001fc4 <SPL06_READ_TEMP_PRESS>
		  Estimate_Altitude(&Dev.Altimeter ,&Dev.SPL,Dev.SPL.pressure_hPa, Dev.SPL.temp_cel,1);
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <main+0x198>)
 80030ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <main+0x198>)
 80030f4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80030f8:	2201      	movs	r2, #1
 80030fa:	eef0 0a47 	vmov.f32	s1, s14
 80030fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003102:	4924      	ldr	r1, [pc, #144]	; (8003194 <main+0x18c>)
 8003104:	4827      	ldr	r0, [pc, #156]	; (80031a4 <main+0x19c>)
 8003106:	f7ff f88b 	bl	8002220 <Estimate_Altitude>
		  EstimateRollPitchYawComplementaryFilter(&RPY_dev, &Dev.BMI,&Dev.QMC,0.1f,0.8f,Sample_time , 0.1f, ALTI_ON);
 800310a:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <main+0x1ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <main+0x1b4>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80031c0 <main+0x1b8>
 800311a:	4613      	mov	r3, r2
 800311c:	eddf 0a29 	vldr	s1, [pc, #164]	; 80031c4 <main+0x1bc>
 8003120:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80031c0 <main+0x1b8>
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <main+0x194>)
 8003126:	491c      	ldr	r1, [pc, #112]	; (8003198 <main+0x190>)
 8003128:	4820      	ldr	r0, [pc, #128]	; (80031ac <main+0x1a4>)
 800312a:	f7ff fa8d 	bl	8002648 <EstimateRollPitchYawComplementaryFilter>

		  printf("%.3f,%.3f,%.3f,%.3f,%d,%d\n",RPY_dev.RollAngle , RPY_dev.PitchAngle,RPY_dev.YawAngle,Dev.Altimeter.Altitude_1, ALTI_ON, MAG_ON);
 800312e:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <main+0x1a4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fa08 	bl	8000548 <__aeabi_f2d>
 8003138:	4682      	mov	sl, r0
 800313a:	468b      	mov	fp, r1
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <main+0x1a4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fa01 	bl	8000548 <__aeabi_f2d>
 8003146:	4604      	mov	r4, r0
 8003148:	460d      	mov	r5, r1
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <main+0x1a4>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f9fa 	bl	8000548 <__aeabi_f2d>
 8003154:	4680      	mov	r8, r0
 8003156:	4689      	mov	r9, r1
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <main+0x198>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9f3 	bl	8000548 <__aeabi_f2d>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4915      	ldr	r1, [pc, #84]	; (80031bc <main+0x1b4>)
 8003168:	7809      	ldrb	r1, [r1, #0]
 800316a:	4608      	mov	r0, r1
 800316c:	4916      	ldr	r1, [pc, #88]	; (80031c8 <main+0x1c0>)
 800316e:	7809      	ldrb	r1, [r1, #0]
 8003170:	9107      	str	r1, [sp, #28]
 8003172:	9006      	str	r0, [sp, #24]
 8003174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003178:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800317c:	e9cd 4500 	strd	r4, r5, [sp]
 8003180:	4652      	mov	r2, sl
 8003182:	465b      	mov	r3, fp
 8003184:	4811      	ldr	r0, [pc, #68]	; (80031cc <main+0x1c4>)
 8003186:	f005 fe57 	bl	8008e38 <iprintf>
	  if(HAL_GetTick() - time_tick >= Sample_time)
 800318a:	e792      	b.n	80030b2 <main+0xaa>
 800318c:	20000200 	.word	0x20000200
 8003190:	20000254 	.word	0x20000254
 8003194:	200002c8 	.word	0x200002c8
 8003198:	2000034c 	.word	0x2000034c
 800319c:	2000038c 	.word	0x2000038c
 80031a0:	200002a8 	.word	0x200002a8
 80031a4:	20000300 	.word	0x20000300
 80031a8:	42480000 	.word	0x42480000
 80031ac:	200003d8 	.word	0x200003d8
 80031b0:	20000424 	.word	0x20000424
 80031b4:	20000000 	.word	0x20000000
 80031b8:	3f19999a 	.word	0x3f19999a
 80031bc:	2000042a 	.word	0x2000042a
 80031c0:	3dcccccd 	.word	0x3dcccccd
 80031c4:	3f4ccccd 	.word	0x3f4ccccd
 80031c8:	2000042b 	.word	0x2000042b
 80031cc:	0800c7a0 	.word	0x0800c7a0

080031d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b096      	sub	sp, #88	; 0x58
 80031d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	2244      	movs	r2, #68	; 0x44
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f005 f9b8 	bl	8008554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e4:	463b      	mov	r3, r7
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80031f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031f6:	f001 fec9 	bl	8004f8c <HAL_PWREx_ControlVoltageScaling>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003200:	f000 f838 	bl	8003274 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003204:	2310      	movs	r3, #16
 8003206:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003208:	2301      	movs	r3, #1
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003210:	2360      	movs	r3, #96	; 0x60
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003214:	2302      	movs	r3, #2
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003218:	2301      	movs	r3, #1
 800321a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800321c:	2301      	movs	r3, #1
 800321e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003220:	2328      	movs	r3, #40	; 0x28
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003224:	2307      	movs	r3, #7
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003228:	2302      	movs	r3, #2
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800322c:	2302      	movs	r3, #2
 800322e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4618      	mov	r0, r3
 8003236:	f001 feff 	bl	8005038 <HAL_RCC_OscConfig>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003240:	f000 f818 	bl	8003274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003244:	230f      	movs	r3, #15
 8003246:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003248:	2303      	movs	r3, #3
 800324a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003258:	463b      	mov	r3, r7
 800325a:	2104      	movs	r1, #4
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fac7 	bl	80057f0 <HAL_RCC_ClockConfig>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003268:	f000 f804 	bl	8003274 <Error_Handler>
  }
}
 800326c:	bf00      	nop
 800326e:	3758      	adds	r7, #88	; 0x58
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003278:	b672      	cpsid	i
}
 800327a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800327c:	e7fe      	b.n	800327c <Error_Handler+0x8>
	...

08003280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_MspInit+0x44>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_MspInit+0x44>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6613      	str	r3, [r2, #96]	; 0x60
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_MspInit+0x44>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_MspInit+0x44>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <HAL_MspInit+0x44>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_MspInit+0x44>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000

080032c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <NMI_Handler+0x4>

080032ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <HardFault_Handler+0x4>

080032d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d8:	e7fe      	b.n	80032d8 <MemManage_Handler+0x4>

080032da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032de:	e7fe      	b.n	80032de <BusFault_Handler+0x4>

080032e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <UsageFault_Handler+0x4>

080032e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003314:	f000 fbde 	bl	8003ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}

0800331c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPL_INT_Pin);
 8003320:	2002      	movs	r0, #2
 8003322:	f000 ff09 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}

0800332a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BMI_ACC_INT_Pin);
 800332e:	2004      	movs	r0, #4
 8003330:	f000 ff02 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BMI_GYRO_INT_Pin);
 800333c:	2008      	movs	r0, #8
 800333e:	f000 fefb 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}

08003346 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTT_Pin);
 800334a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800334e:	f000 fef3 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800335c:	4802      	ldr	r0, [pc, #8]	; (8003368 <TIM3_IRQHandler+0x10>)
 800335e:	f003 fc17 	bl	8006b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000430 	.word	0x20000430

0800336c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <TIM4_IRQHandler+0x10>)
 8003372:	f003 fc0d 	bl	8006b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000047c 	.word	0x2000047c

08003380 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS25_INT_Pin);
 8003384:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003388:	f000 fed6 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}

08003390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return 1;
 8003394:	2301      	movs	r3, #1
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_kill>:

int _kill(int pid, int sig)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033aa:	f005 f8a9 	bl	8008500 <__errno>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2216      	movs	r2, #22
 80033b2:	601a      	str	r2, [r3, #0]
  return -1;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_exit>:

void _exit (int status)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ffe7 	bl	80033a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033d2:	e7fe      	b.n	80033d2 <_exit+0x12>

080033d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e00a      	b.n	80033fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033e6:	f3af 8000 	nop.w
 80033ea:	4601      	mov	r1, r0
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	60ba      	str	r2, [r7, #8]
 80033f2:	b2ca      	uxtb	r2, r1
 80033f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	dbf0      	blt.n	80033e6 <_read+0x12>
  }

  return len;
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e009      	b.n	8003434 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	60ba      	str	r2, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fd27 	bl	8002e7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3301      	adds	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	dbf1      	blt.n	8003420 <_write+0x12>
  }
  return len;
 800343c:	687b      	ldr	r3, [r7, #4]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_close>:

int _close(int file)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800346e:	605a      	str	r2, [r3, #4]
  return 0;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <_isatty>:

int _isatty(int file)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003486:	2301      	movs	r3, #1
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f005 f80e 	bl	8008500 <__errno>
 80034e4:	4603      	mov	r3, r0
 80034e6:	220c      	movs	r2, #12
 80034e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20018000 	.word	0x20018000
 8003510:	00000400 	.word	0x00000400
 8003514:	2000042c 	.word	0x2000042c
 8003518:	200005e8 	.word	0x200005e8

0800351c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <SystemInit+0x20>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <SystemInit+0x20>)
 8003528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800352c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08e      	sub	sp, #56	; 0x38
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003554:	f107 031c 	add.w	r3, r7, #28
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003560:	463b      	mov	r3, r7
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	611a      	str	r2, [r3, #16]
 800356e:	615a      	str	r2, [r3, #20]
 8003570:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003572:	4b3a      	ldr	r3, [pc, #232]	; (800365c <MX_TIM3_Init+0x11c>)
 8003574:	4a3a      	ldr	r2, [pc, #232]	; (8003660 <MX_TIM3_Init+0x120>)
 8003576:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8003578:	4b38      	ldr	r3, [pc, #224]	; (800365c <MX_TIM3_Init+0x11c>)
 800357a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800357e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003580:	4b36      	ldr	r3, [pc, #216]	; (800365c <MX_TIM3_Init+0x11c>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003586:	4b35      	ldr	r3, [pc, #212]	; (800365c <MX_TIM3_Init+0x11c>)
 8003588:	f242 720f 	movw	r2, #9999	; 0x270f
 800358c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800358e:	4b33      	ldr	r3, [pc, #204]	; (800365c <MX_TIM3_Init+0x11c>)
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <MX_TIM3_Init+0x11c>)
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800359a:	4830      	ldr	r0, [pc, #192]	; (800365c <MX_TIM3_Init+0x11c>)
 800359c:	f003 f808 	bl	80065b0 <HAL_TIM_Base_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80035a6:	f7ff fe65 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b4:	4619      	mov	r1, r3
 80035b6:	4829      	ldr	r0, [pc, #164]	; (800365c <MX_TIM3_Init+0x11c>)
 80035b8:	f003 fc84 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80035c2:	f7ff fe57 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80035c6:	4825      	ldr	r0, [pc, #148]	; (800365c <MX_TIM3_Init+0x11c>)
 80035c8:	f003 f849 	bl	800665e <HAL_TIM_OC_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80035d2:	f7ff fe4f 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	4619      	mov	r1, r3
 80035e4:	481d      	ldr	r0, [pc, #116]	; (800365c <MX_TIM3_Init+0x11c>)
 80035e6:	f004 f99b 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80035f0:	f7ff fe40 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80035f4:	2300      	movs	r3, #0
 80035f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003604:	463b      	mov	r3, r7
 8003606:	2200      	movs	r2, #0
 8003608:	4619      	mov	r1, r3
 800360a:	4814      	ldr	r0, [pc, #80]	; (800365c <MX_TIM3_Init+0x11c>)
 800360c:	f003 fbe0 	bl	8006dd0 <HAL_TIM_OC_ConfigChannel>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003616:	f7ff fe2d 	bl	8003274 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 800361a:	f241 3388 	movw	r3, #5000	; 0x1388
 800361e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003620:	463b      	mov	r3, r7
 8003622:	2204      	movs	r2, #4
 8003624:	4619      	mov	r1, r3
 8003626:	480d      	ldr	r0, [pc, #52]	; (800365c <MX_TIM3_Init+0x11c>)
 8003628:	f003 fbd2 	bl	8006dd0 <HAL_TIM_OC_ConfigChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8003632:	f7ff fe1f 	bl	8003274 <Error_Handler>
  }
  sConfigOC.Pulse = 2500;
 8003636:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800363a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800363c:	463b      	mov	r3, r7
 800363e:	2208      	movs	r2, #8
 8003640:	4619      	mov	r1, r3
 8003642:	4806      	ldr	r0, [pc, #24]	; (800365c <MX_TIM3_Init+0x11c>)
 8003644:	f003 fbc4 	bl	8006dd0 <HAL_TIM_OC_ConfigChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800364e:	f7ff fe11 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	3738      	adds	r7, #56	; 0x38
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000430 	.word	0x20000430
 8003660:	40000400 	.word	0x40000400

08003664 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800366a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003678:	f107 031c 	add.w	r3, r7, #28
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003684:	463b      	mov	r3, r7
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	611a      	str	r2, [r3, #16]
 8003692:	615a      	str	r2, [r3, #20]
 8003694:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <MX_TIM4_Init+0xe4>)
 8003698:	4a2c      	ldr	r2, [pc, #176]	; (800374c <MX_TIM4_Init+0xe8>)
 800369a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <MX_TIM4_Init+0xe4>)
 800369e:	f242 720f 	movw	r2, #9999	; 0x270f
 80036a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <MX_TIM4_Init+0xe4>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80036aa:	4b27      	ldr	r3, [pc, #156]	; (8003748 <MX_TIM4_Init+0xe4>)
 80036ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80036b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b2:	4b25      	ldr	r3, [pc, #148]	; (8003748 <MX_TIM4_Init+0xe4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <MX_TIM4_Init+0xe4>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036be:	4822      	ldr	r0, [pc, #136]	; (8003748 <MX_TIM4_Init+0xe4>)
 80036c0:	f002 ff76 	bl	80065b0 <HAL_TIM_Base_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80036ca:	f7ff fdd3 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d8:	4619      	mov	r1, r3
 80036da:	481b      	ldr	r0, [pc, #108]	; (8003748 <MX_TIM4_Init+0xe4>)
 80036dc:	f003 fbf2 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80036e6:	f7ff fdc5 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80036ea:	4817      	ldr	r0, [pc, #92]	; (8003748 <MX_TIM4_Init+0xe4>)
 80036ec:	f002 ffb7 	bl	800665e <HAL_TIM_OC_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80036f6:	f7ff fdbd 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003702:	f107 031c 	add.w	r3, r7, #28
 8003706:	4619      	mov	r1, r3
 8003708:	480f      	ldr	r0, [pc, #60]	; (8003748 <MX_TIM4_Init+0xe4>)
 800370a:	f004 f909 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8003714:	f7ff fdae 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003718:	2300      	movs	r3, #0
 800371a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003728:	463b      	mov	r3, r7
 800372a:	2200      	movs	r2, #0
 800372c:	4619      	mov	r1, r3
 800372e:	4806      	ldr	r0, [pc, #24]	; (8003748 <MX_TIM4_Init+0xe4>)
 8003730:	f003 fb4e 	bl	8006dd0 <HAL_TIM_OC_ConfigChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800373a:	f7ff fd9b 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	3738      	adds	r7, #56	; 0x38
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	2000047c 	.word	0x2000047c
 800374c:	40000800 	.word	0x40000800

08003750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <HAL_TIM_Base_MspInit+0x78>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d114      	bne.n	800378c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_TIM_Base_MspInit+0x7c>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_TIM_Base_MspInit+0x7c>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6593      	str	r3, [r2, #88]	; 0x58
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <HAL_TIM_Base_MspInit+0x7c>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2102      	movs	r1, #2
 800377e:	201d      	movs	r0, #29
 8003780:	f000 fac7 	bl	8003d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003784:	201d      	movs	r0, #29
 8003786:	f000 fae0 	bl	8003d4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800378a:	e018      	b.n	80037be <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <HAL_TIM_Base_MspInit+0x80>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_TIM_Base_MspInit+0x7c>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	4a0c      	ldr	r2, [pc, #48]	; (80037cc <HAL_TIM_Base_MspInit+0x7c>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6593      	str	r3, [r2, #88]	; 0x58
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_TIM_Base_MspInit+0x7c>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2102      	movs	r1, #2
 80037b2:	201e      	movs	r0, #30
 80037b4:	f000 faad 	bl	8003d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037b8:	201e      	movs	r0, #30
 80037ba:	f000 fac6 	bl	8003d4a <HAL_NVIC_EnableIRQ>
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40000800 	.word	0x40000800

080037d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <MX_USART1_UART_Init+0x58>)
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <MX_USART1_UART_Init+0x5c>)
 80037dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <MX_USART1_UART_Init+0x58>)
 80037e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <MX_USART1_UART_Init+0x58>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MX_USART1_UART_Init+0x58>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <MX_USART1_UART_Init+0x58>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <MX_USART1_UART_Init+0x58>)
 80037fa:	220c      	movs	r2, #12
 80037fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <MX_USART1_UART_Init+0x58>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <MX_USART1_UART_Init+0x58>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <MX_USART1_UART_Init+0x58>)
 800380c:	2200      	movs	r2, #0
 800380e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <MX_USART1_UART_Init+0x58>)
 8003812:	2200      	movs	r2, #0
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003816:	4805      	ldr	r0, [pc, #20]	; (800382c <MX_USART1_UART_Init+0x58>)
 8003818:	f004 f928 	bl	8007a6c <HAL_UART_Init>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003822:	f7ff fd27 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200004c8 	.word	0x200004c8
 8003830:	40013800 	.word	0x40013800

08003834 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <MX_USART2_UART_Init+0x58>)
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <MX_USART2_UART_Init+0x5c>)
 800383c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <MX_USART2_UART_Init+0x58>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <MX_USART2_UART_Init+0x58>)
 800385a:	220c      	movs	r2, #12
 800385c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003866:	2200      	movs	r2, #0
 8003868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <MX_USART2_UART_Init+0x58>)
 800386c:	2200      	movs	r2, #0
 800386e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003872:	2200      	movs	r2, #0
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003876:	4805      	ldr	r0, [pc, #20]	; (800388c <MX_USART2_UART_Init+0x58>)
 8003878:	f004 f8f8 	bl	8007a6c <HAL_UART_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003882:	f7ff fcf7 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2000054c 	.word	0x2000054c
 8003890:	40004400 	.word	0x40004400

08003894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b0ae      	sub	sp, #184	; 0xb8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	2288      	movs	r2, #136	; 0x88
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fe4d 	bl	8008554 <memset>
  if(uartHandle->Instance==USART1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a43      	ldr	r2, [pc, #268]	; (80039cc <HAL_UART_MspInit+0x138>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d13d      	bne.n	8003940 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038c8:	2300      	movs	r3, #0
 80038ca:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038cc:	f107 031c 	add.w	r3, r7, #28
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 f9b1 	bl	8005c38 <HAL_RCCEx_PeriphCLKConfig>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038dc:	f7ff fcca 	bl	8003274 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 80038e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e4:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 80038e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ea:	6613      	str	r3, [r2, #96]	; 0x60
 80038ec:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 80038ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f8:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003904:	4b32      	ldr	r3, [pc, #200]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003910:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003924:	2303      	movs	r3, #3
 8003926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800392a:	2307      	movs	r3, #7
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003934:	4619      	mov	r1, r3
 8003936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800393a:	f000 fa21 	bl	8003d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800393e:	e040      	b.n	80039c2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_UART_MspInit+0x140>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d13b      	bne.n	80039c2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800394a:	2302      	movs	r3, #2
 800394c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800394e:	2300      	movs	r3, #0
 8003950:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003952:	f107 031c 	add.w	r3, r7, #28
 8003956:	4618      	mov	r0, r3
 8003958:	f002 f96e 	bl	8005c38 <HAL_RCCEx_PeriphCLKConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003962:	f7ff fc87 	bl	8003274 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	6593      	str	r3, [r2, #88]	; 0x58
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_UART_MspInit+0x13c>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003996:	230c      	movs	r3, #12
 8003998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039ae:	2307      	movs	r3, #7
 80039b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039b8:	4619      	mov	r1, r3
 80039ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039be:	f000 f9df 	bl	8003d80 <HAL_GPIO_Init>
}
 80039c2:	bf00      	nop
 80039c4:	37b8      	adds	r7, #184	; 0xb8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40004400 	.word	0x40004400

080039d8 <Reset_Handler>:
 80039d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a10 <LoopForever+0x2>
 80039dc:	f7ff fd9e 	bl	800351c <SystemInit>
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <LoopForever+0x6>)
 80039e2:	490d      	ldr	r1, [pc, #52]	; (8003a18 <LoopForever+0xa>)
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <LoopForever+0xe>)
 80039e6:	2300      	movs	r3, #0
 80039e8:	e002      	b.n	80039f0 <LoopCopyDataInit>

080039ea <CopyDataInit>:
 80039ea:	58d4      	ldr	r4, [r2, r3]
 80039ec:	50c4      	str	r4, [r0, r3]
 80039ee:	3304      	adds	r3, #4

080039f0 <LoopCopyDataInit>:
 80039f0:	18c4      	adds	r4, r0, r3
 80039f2:	428c      	cmp	r4, r1
 80039f4:	d3f9      	bcc.n	80039ea <CopyDataInit>
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <LoopForever+0x12>)
 80039f8:	4c0a      	ldr	r4, [pc, #40]	; (8003a24 <LoopForever+0x16>)
 80039fa:	2300      	movs	r3, #0
 80039fc:	e001      	b.n	8003a02 <LoopFillZerobss>

080039fe <FillZerobss>:
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	3204      	adds	r2, #4

08003a02 <LoopFillZerobss>:
 8003a02:	42a2      	cmp	r2, r4
 8003a04:	d3fb      	bcc.n	80039fe <FillZerobss>
 8003a06:	f004 fd81 	bl	800850c <__libc_init_array>
 8003a0a:	f7ff fafd 	bl	8003008 <main>

08003a0e <LoopForever>:
 8003a0e:	e7fe      	b.n	8003a0e <LoopForever>
 8003a10:	20018000 	.word	0x20018000
 8003a14:	20000000 	.word	0x20000000
 8003a18:	200001e0 	.word	0x200001e0
 8003a1c:	0800cff4 	.word	0x0800cff4
 8003a20:	200001e0 	.word	0x200001e0
 8003a24:	200005e4 	.word	0x200005e4

08003a28 <ADC1_2_IRQHandler>:
 8003a28:	e7fe      	b.n	8003a28 <ADC1_2_IRQHandler>

08003a2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a34:	2003      	movs	r0, #3
 8003a36:	f000 f961 	bl	8003cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f000 f80e 	bl	8003a5c <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	71fb      	strb	r3, [r7, #7]
 8003a4a:	e001      	b.n	8003a50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a4c:	f7ff fc18 	bl	8003280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a50:	79fb      	ldrb	r3, [r7, #7]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <HAL_InitTick+0x6c>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d023      	beq.n	8003ab8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a70:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_InitTick+0x70>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_InitTick+0x6c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f96d 	bl	8003d66 <HAL_SYSTICK_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10f      	bne.n	8003ab2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d809      	bhi.n	8003aac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	f000 f937 	bl	8003d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_InitTick+0x74>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e007      	b.n	8003abc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e004      	b.n	8003abc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e001      	b.n	8003abc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	20000004 	.word	0x20000004
 8003ad0:	20000008 	.word	0x20000008

08003ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_IncTick+0x20>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_IncTick+0x24>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_IncTick+0x24>)
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	2000000c 	.word	0x2000000c
 8003af8:	200005d0 	.word	0x200005d0

08003afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return uwTick;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_GetTick+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200005d0 	.word	0x200005d0

08003b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff ffee 	bl	8003afc <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d005      	beq.n	8003b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_Delay+0x44>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b3a:	bf00      	nop
 8003b3c:	f7ff ffde 	bl	8003afc <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d8f7      	bhi.n	8003b3c <HAL_Delay+0x28>
  {
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <__NVIC_GetPriorityGrouping+0x18>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 0307 	and.w	r3, r3, #7
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0b      	blt.n	8003bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <__NVIC_EnableIRQ+0x38>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f1c3 0307 	rsb	r3, r3, #7
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	bf28      	it	cs
 8003c6e:	2304      	movcs	r3, #4
 8003c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d902      	bls.n	8003c80 <NVIC_EncodePriority+0x30>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b03      	subs	r3, #3
 8003c7e:	e000      	b.n	8003c82 <NVIC_EncodePriority+0x32>
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	401a      	ands	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	4313      	orrs	r3, r2
         );
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc8:	d301      	bcc.n	8003cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00f      	b.n	8003cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <SysTick_Config+0x40>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd6:	210f      	movs	r1, #15
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	f7ff ff8e 	bl	8003bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce6:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce8:	2207      	movs	r2, #7
 8003cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	e000e010 	.word	0xe000e010

08003cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff29 	bl	8003b5c <__NVIC_SetPriorityGrouping>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d24:	f7ff ff3e 	bl	8003ba4 <__NVIC_GetPriorityGrouping>
 8003d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff ff8e 	bl	8003c50 <NVIC_EncodePriority>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff5d 	bl	8003bfc <__NVIC_SetPriority>
}
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff31 	bl	8003bc0 <__NVIC_EnableIRQ>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ffa2 	bl	8003cb8 <SysTick_Config>
 8003d74:	4603      	mov	r3, r0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d8e:	e17f      	b.n	8004090 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8171 	beq.w	800408a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d005      	beq.n	8003dc0 <HAL_GPIO_Init+0x40>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d130      	bne.n	8003e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	2203      	movs	r2, #3
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003df6:	2201      	movs	r2, #1
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 0201 	and.w	r2, r3, #1
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d118      	bne.n	8003e60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003e34:	2201      	movs	r2, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	08db      	lsrs	r3, r3, #3
 8003e4a:	f003 0201 	and.w	r2, r3, #1
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d017      	beq.n	8003e9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d123      	bne.n	8003ef0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	6939      	ldr	r1, [r7, #16]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80ac 	beq.w	800408a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	4a5e      	ldr	r2, [pc, #376]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_GPIO_Init+0x330>)
 8003f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f4a:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f74:	d025      	beq.n	8003fc2 <HAL_GPIO_Init+0x242>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4f      	ldr	r2, [pc, #316]	; (80040b8 <HAL_GPIO_Init+0x338>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01f      	beq.n	8003fbe <HAL_GPIO_Init+0x23e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4e      	ldr	r2, [pc, #312]	; (80040bc <HAL_GPIO_Init+0x33c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d019      	beq.n	8003fba <HAL_GPIO_Init+0x23a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4d      	ldr	r2, [pc, #308]	; (80040c0 <HAL_GPIO_Init+0x340>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_GPIO_Init+0x236>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4c      	ldr	r2, [pc, #304]	; (80040c4 <HAL_GPIO_Init+0x344>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00d      	beq.n	8003fb2 <HAL_GPIO_Init+0x232>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <HAL_GPIO_Init+0x348>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <HAL_GPIO_Init+0x22e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4a      	ldr	r2, [pc, #296]	; (80040cc <HAL_GPIO_Init+0x34c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d101      	bne.n	8003faa <HAL_GPIO_Init+0x22a>
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	e00c      	b.n	8003fc4 <HAL_GPIO_Init+0x244>
 8003faa:	2307      	movs	r3, #7
 8003fac:	e00a      	b.n	8003fc4 <HAL_GPIO_Init+0x244>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e008      	b.n	8003fc4 <HAL_GPIO_Init+0x244>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_Init+0x244>
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e004      	b.n	8003fc4 <HAL_GPIO_Init+0x244>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_Init+0x244>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x244>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	f002 0203 	and.w	r2, r2, #3
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fd4:	4937      	ldr	r1, [pc, #220]	; (80040b4 <HAL_GPIO_Init+0x334>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_GPIO_Init+0x350>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004006:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_GPIO_Init+0x350>)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800400c:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <HAL_GPIO_Init+0x350>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <HAL_GPIO_Init+0x350>)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_GPIO_Init+0x350>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_GPIO_Init+0x350>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_GPIO_Init+0x350>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004084:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_GPIO_Init+0x350>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	3301      	adds	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	f47f ae78 	bne.w	8003d90 <HAL_GPIO_Init+0x10>
  }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40010000 	.word	0x40010000
 80040b8:	48000400 	.word	0x48000400
 80040bc:	48000800 	.word	0x48000800
 80040c0:	48000c00 	.word	0x48000c00
 80040c4:	48001000 	.word	0x48001000
 80040c8:	48001400 	.word	0x48001400
 80040cc:	48001800 	.word	0x48001800
 80040d0:	40010400 	.word	0x40010400

080040d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
 80040e0:	4613      	mov	r3, r2
 80040e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040f0:	e002      	b.n	80040f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4013      	ands	r3, r2
 800411c:	041a      	lsls	r2, r3, #16
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	43d9      	mvns	r1, r3
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	400b      	ands	r3, r1
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	619a      	str	r2, [r3, #24]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004142:	4b08      	ldr	r3, [pc, #32]	; (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fea8 	bl	8002eac <HAL_GPIO_EXTI_Callback>
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40010400 	.word	0x40010400

08004168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e081      	b.n	800427e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fe fd6e 	bl	8002c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	e006      	b.n	80041f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d104      	bne.n	8004202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69d9      	ldr	r1, [r3, #28]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4603      	mov	r3, r0
 8004298:	817b      	strh	r3, [r7, #10]
 800429a:	460b      	mov	r3, r1
 800429c:	813b      	strh	r3, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	f040 80f9 	bne.w	80044a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_I2C_Mem_Write+0x34>
 80042b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0ed      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_I2C_Mem_Write+0x4e>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e0e6      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042de:	f7ff fc0d 	bl	8003afc <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2319      	movs	r3, #25
 80042ea:	2201      	movs	r2, #1
 80042ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fbcb 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0d1      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2221      	movs	r2, #33	; 0x21
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004328:	88f8      	ldrh	r0, [r7, #6]
 800432a:	893a      	ldrh	r2, [r7, #8]
 800432c:	8979      	ldrh	r1, [r7, #10]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4603      	mov	r3, r0
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fadb 	bl	80048f4 <I2C_RequestMemoryWrite>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0a9      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2bff      	cmp	r3, #255	; 0xff
 8004358:	d90e      	bls.n	8004378 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	b2da      	uxtb	r2, r3
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	2300      	movs	r3, #0
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fd33 	bl	8004ddc <I2C_TransferConfig>
 8004376:	e00f      	b.n	8004398 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	b2da      	uxtb	r2, r3
 8004388:	8979      	ldrh	r1, [r7, #10]
 800438a:	2300      	movs	r3, #0
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fd22 	bl	8004ddc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fbb5 	bl	8004b0c <I2C_WaitOnTXISFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e07b      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d034      	beq.n	8004450 <HAL_I2C_Mem_Write+0x1c8>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d130      	bne.n	8004450 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fb47 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e04d      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2bff      	cmp	r3, #255	; 0xff
 8004410:	d90e      	bls.n	8004430 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	b2da      	uxtb	r2, r3
 800441e:	8979      	ldrh	r1, [r7, #10]
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fcd7 	bl	8004ddc <I2C_TransferConfig>
 800442e:	e00f      	b.n	8004450 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	b2da      	uxtb	r2, r3
 8004440:	8979      	ldrh	r1, [r7, #10]
 8004442:	2300      	movs	r3, #0
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fcc6 	bl	8004ddc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d19e      	bne.n	8004398 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fb94 	bl	8004b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e01a      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <HAL_I2C_Mem_Write+0x224>)
 8004482:	400b      	ands	r3, r1
 8004484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e000      	b.n	80044a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	fe00e800 	.word	0xfe00e800

080044b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	817b      	strh	r3, [r7, #10]
 80044c2:	460b      	mov	r3, r1
 80044c4:	813b      	strh	r3, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	f040 80fd 	bne.w	80046d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_I2C_Mem_Read+0x34>
 80044de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0f1      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_I2C_Mem_Read+0x4e>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0ea      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004506:	f7ff faf9 	bl	8003afc <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2319      	movs	r3, #25
 8004512:	2201      	movs	r2, #1
 8004514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fab7 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0d5      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2222      	movs	r2, #34	; 0x22
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2240      	movs	r2, #64	; 0x40
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004550:	88f8      	ldrh	r0, [r7, #6]
 8004552:	893a      	ldrh	r2, [r7, #8]
 8004554:	8979      	ldrh	r1, [r7, #10]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	4603      	mov	r3, r0
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fa1b 	bl	800499c <I2C_RequestMemoryRead>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0ad      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2bff      	cmp	r3, #255	; 0xff
 8004580:	d90e      	bls.n	80045a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	22ff      	movs	r2, #255	; 0xff
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	b2da      	uxtb	r2, r3
 800458e:	8979      	ldrh	r1, [r7, #10]
 8004590:	4b52      	ldr	r3, [pc, #328]	; (80046dc <HAL_I2C_Mem_Read+0x22c>)
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fc1f 	bl	8004ddc <I2C_TransferConfig>
 800459e:	e00f      	b.n	80045c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	8979      	ldrh	r1, [r7, #10]
 80045b2:	4b4a      	ldr	r3, [pc, #296]	; (80046dc <HAL_I2C_Mem_Read+0x22c>)
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fc0e 	bl	8004ddc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	2200      	movs	r2, #0
 80045c8:	2104      	movs	r1, #4
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fa5e 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07c      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d034      	beq.n	8004680 <HAL_I2C_Mem_Read+0x1d0>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	d130      	bne.n	8004680 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	2200      	movs	r2, #0
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fa2f 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e04d      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2bff      	cmp	r3, #255	; 0xff
 8004640:	d90e      	bls.n	8004660 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	22ff      	movs	r2, #255	; 0xff
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	b2da      	uxtb	r2, r3
 800464e:	8979      	ldrh	r1, [r7, #10]
 8004650:	2300      	movs	r3, #0
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fbbf 	bl	8004ddc <I2C_TransferConfig>
 800465e:	e00f      	b.n	8004680 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	b2da      	uxtb	r2, r3
 8004670:	8979      	ldrh	r1, [r7, #10]
 8004672:	2300      	movs	r3, #0
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fbae 	bl	8004ddc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d19a      	bne.n	80045c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fa7c 	bl	8004b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e01a      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2220      	movs	r2, #32
 80046a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_I2C_Mem_Read+0x230>)
 80046b2:	400b      	ands	r3, r1
 80046b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	80002400 	.word	0x80002400
 80046e0:	fe00e800 	.word	0xfe00e800

080046e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	460b      	mov	r3, r1
 80046f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b20      	cmp	r3, #32
 8004702:	f040 80f1 	bne.w	80048e8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004714:	d101      	bne.n	800471a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004716:	2302      	movs	r3, #2
 8004718:	e0e7      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_I2C_IsDeviceReady+0x44>
 8004724:	2302      	movs	r3, #2
 8004726:	e0e0      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_I2C_IsDeviceReady+0x72>
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800474c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004754:	e004      	b.n	8004760 <HAL_I2C_IsDeviceReady+0x7c>
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800475c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004766:	f7ff f9c9 	bl	8003afc <HAL_GetTick>
 800476a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b20      	cmp	r3, #32
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b10      	cmp	r3, #16
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004798:	e034      	b.n	8004804 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d01a      	beq.n	80047d8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7ff f9ab 	bl	8003afc <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <HAL_I2C_IsDeviceReady+0xd4>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10f      	bne.n	80047d8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e088      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004804:	7ffb      	ldrb	r3, [r7, #31]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <HAL_I2C_IsDeviceReady+0x12c>
 800480a:	7fbb      	ldrb	r3, [r7, #30]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0c4      	beq.n	800479a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b10      	cmp	r3, #16
 800481c:	d01a      	beq.n	8004854 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2200      	movs	r2, #0
 8004826:	2120      	movs	r1, #32
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f92f 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e058      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2220      	movs	r2, #32
 800483e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e04a      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	2120      	movs	r1, #32
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f914 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e03d      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2210      	movs	r2, #16
 8004874:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2220      	movs	r2, #32
 800487c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	d118      	bne.n	80048b8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004894:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	2120      	movs	r1, #32
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f8f3 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e01c      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2220      	movs	r2, #32
 80048b6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3301      	adds	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f63f af3b 	bhi.w	800473e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	817b      	strh	r3, [r7, #10]
 8004906:	460b      	mov	r3, r1
 8004908:	813b      	strh	r3, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	8979      	ldrh	r1, [r7, #10]
 8004914:	4b20      	ldr	r3, [pc, #128]	; (8004998 <I2C_RequestMemoryWrite+0xa4>)
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fa5d 	bl	8004ddc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f8f0 	bl	8004b0c <I2C_WaitOnTXISFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e02c      	b.n	8004990 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d105      	bne.n	8004948 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800493c:	893b      	ldrh	r3, [r7, #8]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
 8004946:	e015      	b.n	8004974 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004948:	893b      	ldrh	r3, [r7, #8]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	b29b      	uxth	r3, r3
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	69b9      	ldr	r1, [r7, #24]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f8d6 	bl	8004b0c <I2C_WaitOnTXISFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e012      	b.n	8004990 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2200      	movs	r2, #0
 800497c:	2180      	movs	r1, #128	; 0x80
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f884 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	80002000 	.word	0x80002000

0800499c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	460b      	mov	r3, r1
 80049b0:	813b      	strh	r3, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	8979      	ldrh	r1, [r7, #10]
 80049bc:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <I2C_RequestMemoryRead+0xa4>)
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa0a 	bl	8004ddc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	69b9      	ldr	r1, [r7, #24]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f89d 	bl	8004b0c <I2C_WaitOnTXISFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e02c      	b.n	8004a36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049e2:	893b      	ldrh	r3, [r7, #8]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
 80049ec:	e015      	b.n	8004a1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ee:	893b      	ldrh	r3, [r7, #8]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	69b9      	ldr	r1, [r7, #24]
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f883 	bl	8004b0c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e012      	b.n	8004a36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2140      	movs	r1, #64	; 0x40
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f831 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	80002000 	.word	0x80002000

08004a44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d103      	bne.n	8004a62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d007      	beq.n	8004a80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	619a      	str	r2, [r3, #24]
  }
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a9c:	e022      	b.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d01e      	beq.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7ff f829 	bl	8003afc <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d113      	bne.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e00f      	b.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d0cd      	beq.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b18:	e02c      	b.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f870 	bl	8004c04 <I2C_IsErrorOccurred>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e02a      	b.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d01e      	beq.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fe ffe1 	bl	8003afc <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d113      	bne.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e007      	b.n	8004b84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d1cb      	bne.n	8004b1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b98:	e028      	b.n	8004bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f830 	bl	8004c04 <I2C_IsErrorOccurred>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e026      	b.n	8004bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bae:	f7fe ffa5 	bl	8003afc <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d302      	bcc.n	8004bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d113      	bne.n	8004bec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e007      	b.n	8004bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d1cf      	bne.n	8004b9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d075      	beq.n	8004d1c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2210      	movs	r2, #16
 8004c36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c38:	e056      	b.n	8004ce8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d052      	beq.n	8004ce8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fe ff5b 	bl	8003afc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <I2C_IsErrorOccurred+0x54>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d147      	bne.n	8004ce8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7a:	d12e      	bne.n	8004cda <I2C_IsErrorOccurred+0xd6>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c82:	d02a      	beq.n	8004cda <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d027      	beq.n	8004cda <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c9a:	f7fe ff2f 	bl	8003afc <HAL_GetTick>
 8004c9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca0:	e01b      	b.n	8004cda <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ca2:	f7fe ff2b 	bl	8003afc <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b19      	cmp	r3, #25
 8004cae:	d914      	bls.n	8004cda <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d1dc      	bne.n	8004ca2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d003      	beq.n	8004cfe <I2C_IsErrorOccurred+0xfa>
 8004cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d09d      	beq.n	8004c3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	f043 0308 	orr.w	r3, r3, #8
 8004d56:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01c      	beq.n	8004dcc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff fe56 	bl	8004a44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <I2C_IsErrorOccurred+0x1d4>)
 8004da4:	400b      	ands	r3, r1
 8004da6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3728      	adds	r7, #40	; 0x28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	fe00e800 	.word	0xfe00e800

08004ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	817b      	strh	r3, [r7, #10]
 8004dea:	4613      	mov	r3, r2
 8004dec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004df4:	7a7b      	ldrb	r3, [r7, #9]
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	0d5b      	lsrs	r3, r3, #21
 8004e16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <I2C_TransferConfig+0x60>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	ea02 0103 	and.w	r1, r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	03ff63ff 	.word	0x03ff63ff

08004e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d138      	bne.n	8004ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e032      	b.n	8004eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d139      	bne.n	8004f60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e033      	b.n	8004f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2224      	movs	r2, #36	; 0x24
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e000      	b.n	8004f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40007000 	.word	0x40007000

08004f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9a:	d130      	bne.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f9c:	4b23      	ldr	r3, [pc, #140]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d038      	beq.n	800501c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004faa:	4b20      	ldr	r3, [pc, #128]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2232      	movs	r2, #50	; 0x32
 8004fc0:	fb02 f303 	mul.w	r3, r2, r3
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	0c9b      	lsrs	r3, r3, #18
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd0:	e002      	b.n	8004fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe4:	d102      	bne.n	8004fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f2      	bne.n	8004fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d110      	bne.n	800501c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e00f      	b.n	800501e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d007      	beq.n	800501c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005014:	4a05      	ldr	r2, [pc, #20]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800501a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40007000 	.word	0x40007000
 8005030:	20000004 	.word	0x20000004
 8005034:	431bde83 	.word	0x431bde83

08005038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e3ca      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504a:	4b97      	ldr	r3, [pc, #604]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005054:	4b94      	ldr	r3, [pc, #592]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80e4 	beq.w	8005234 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_RCC_OscConfig+0x4a>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	f040 808b 	bne.w	8005190 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b01      	cmp	r3, #1
 800507e:	f040 8087 	bne.w	8005190 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005082:	4b89      	ldr	r3, [pc, #548]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_RCC_OscConfig+0x62>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e3a2      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1a      	ldr	r2, [r3, #32]
 800509e:	4b82      	ldr	r3, [pc, #520]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <HAL_RCC_OscConfig+0x7c>
 80050aa:	4b7f      	ldr	r3, [pc, #508]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b2:	e005      	b.n	80050c0 <HAL_RCC_OscConfig+0x88>
 80050b4:	4b7c      	ldr	r3, [pc, #496]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d223      	bcs.n	800510c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd55 	bl	8005b78 <RCC_SetFlashLatencyFromMSIRange>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e383      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d8:	4b73      	ldr	r3, [pc, #460]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a72      	ldr	r2, [pc, #456]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050de:	f043 0308 	orr.w	r3, r3, #8
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	4b70      	ldr	r3, [pc, #448]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	496d      	ldr	r1, [pc, #436]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050f6:	4b6c      	ldr	r3, [pc, #432]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	4968      	ldr	r1, [pc, #416]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
 800510a:	e025      	b.n	8005158 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800510c:	4b66      	ldr	r3, [pc, #408]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005112:	f043 0308 	orr.w	r3, r3, #8
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	4960      	ldr	r1, [pc, #384]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800512a:	4b5f      	ldr	r3, [pc, #380]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	495b      	ldr	r1, [pc, #364]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800513a:	4313      	orrs	r3, r2
 800513c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fd15 	bl	8005b78 <RCC_SetFlashLatencyFromMSIRange>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e343      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005158:	f000 fc4a 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b52      	ldr	r3, [pc, #328]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	4950      	ldr	r1, [pc, #320]	; (80052ac <HAL_RCC_OscConfig+0x274>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
 8005174:	4a4e      	ldr	r2, [pc, #312]	; (80052b0 <HAL_RCC_OscConfig+0x278>)
 8005176:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005178:	4b4e      	ldr	r3, [pc, #312]	; (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe fc6d 	bl	8003a5c <HAL_InitTick>
 8005182:	4603      	mov	r3, r0
 8005184:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d052      	beq.n	8005232 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	e327      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d032      	beq.n	80051fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005198:	4b43      	ldr	r3, [pc, #268]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a42      	ldr	r2, [pc, #264]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051a4:	f7fe fcaa 	bl	8003afc <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ac:	f7fe fca6 	bl	8003afc <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e310      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051be:	4b3a      	ldr	r3, [pc, #232]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ca:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a36      	ldr	r2, [pc, #216]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051d0:	f043 0308 	orr.w	r3, r3, #8
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b34      	ldr	r3, [pc, #208]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	4931      	ldr	r1, [pc, #196]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e8:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	492c      	ldr	r1, [pc, #176]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	e01a      	b.n	8005234 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051fe:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800520a:	f7fe fc77 	bl	8003afc <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005212:	f7fe fc73 	bl	8003afc <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e2dd      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005224:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f0      	bne.n	8005212 <HAL_RCC_OscConfig+0x1da>
 8005230:	e000      	b.n	8005234 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005232:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d074      	beq.n	800532a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d005      	beq.n	8005252 <HAL_RCC_OscConfig+0x21a>
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d10e      	bne.n	800526a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d10b      	bne.n	800526a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d064      	beq.n	8005328 <HAL_RCC_OscConfig+0x2f0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d160      	bne.n	8005328 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e2ba      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x24a>
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0b      	ldr	r2, [pc, #44]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800527a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	e026      	b.n	80052d0 <HAL_RCC_OscConfig+0x298>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800528a:	d115      	bne.n	80052b8 <HAL_RCC_OscConfig+0x280>
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a02      	ldr	r2, [pc, #8]	; (80052a8 <HAL_RCC_OscConfig+0x270>)
 800529e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	e014      	b.n	80052d0 <HAL_RCC_OscConfig+0x298>
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	0800c7bc 	.word	0x0800c7bc
 80052b0:	20000004 	.word	0x20000004
 80052b4:	20000008 	.word	0x20000008
 80052b8:	4ba0      	ldr	r3, [pc, #640]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a9f      	ldr	r2, [pc, #636]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80052be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	4b9d      	ldr	r3, [pc, #628]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a9c      	ldr	r2, [pc, #624]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80052ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d013      	beq.n	8005300 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fe fc10 	bl	8003afc <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e0:	f7fe fc0c 	bl	8003afc <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e276      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052f2:	4b92      	ldr	r3, [pc, #584]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x2a8>
 80052fe:	e014      	b.n	800532a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fe fbfc 	bl	8003afc <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005308:	f7fe fbf8 	bl	8003afc <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	; 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e262      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800531a:	4b88      	ldr	r3, [pc, #544]	; (800553c <HAL_RCC_OscConfig+0x504>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x2d0>
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d060      	beq.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b04      	cmp	r3, #4
 800533a:	d005      	beq.n	8005348 <HAL_RCC_OscConfig+0x310>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b0c      	cmp	r3, #12
 8005340:	d119      	bne.n	8005376 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d116      	bne.n	8005376 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005348:	4b7c      	ldr	r3, [pc, #496]	; (800553c <HAL_RCC_OscConfig+0x504>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_OscConfig+0x328>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e23f      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005360:	4b76      	ldr	r3, [pc, #472]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	061b      	lsls	r3, r3, #24
 800536e:	4973      	ldr	r1, [pc, #460]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005370:	4313      	orrs	r3, r2
 8005372:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005374:	e040      	b.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d023      	beq.n	80053c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800537e:	4b6f      	ldr	r3, [pc, #444]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a6e      	ldr	r2, [pc, #440]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fe fbb7 	bl	8003afc <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005392:	f7fe fbb3 	bl	8003afc <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e21d      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a4:	4b65      	ldr	r3, [pc, #404]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b0:	4b62      	ldr	r3, [pc, #392]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	061b      	lsls	r3, r3, #24
 80053be:	495f      	ldr	r1, [pc, #380]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
 80053c4:	e018      	b.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c6:	4b5d      	ldr	r3, [pc, #372]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a5c      	ldr	r2, [pc, #368]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80053cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fe fb93 	bl	8003afc <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053da:	f7fe fb8f 	bl	8003afc <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e1f9      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ec:	4b53      	ldr	r3, [pc, #332]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d03c      	beq.n	800547e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01c      	beq.n	8005446 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540c:	4b4b      	ldr	r3, [pc, #300]	; (800553c <HAL_RCC_OscConfig+0x504>)
 800540e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005412:	4a4a      	ldr	r2, [pc, #296]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541c:	f7fe fb6e 	bl	8003afc <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005424:	f7fe fb6a 	bl	8003afc <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e1d4      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ef      	beq.n	8005424 <HAL_RCC_OscConfig+0x3ec>
 8005444:	e01b      	b.n	800547e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005446:	4b3d      	ldr	r3, [pc, #244]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800544c:	4a3b      	ldr	r2, [pc, #236]	; (800553c <HAL_RCC_OscConfig+0x504>)
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005456:	f7fe fb51 	bl	8003afc <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545e:	f7fe fb4d 	bl	8003afc <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e1b7      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005470:	4b32      	ldr	r3, [pc, #200]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1ef      	bne.n	800545e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80a6 	beq.w	80055d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800548c:	2300      	movs	r3, #0
 800548e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005490:	4b2a      	ldr	r3, [pc, #168]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800549c:	4b27      	ldr	r3, [pc, #156]	; (800553c <HAL_RCC_OscConfig+0x504>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	4a26      	ldr	r2, [pc, #152]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6593      	str	r3, [r2, #88]	; 0x58
 80054a8:	4b24      	ldr	r3, [pc, #144]	; (800553c <HAL_RCC_OscConfig+0x504>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054b4:	2301      	movs	r3, #1
 80054b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <HAL_RCC_OscConfig+0x508>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d118      	bne.n	80054f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c4:	4b1e      	ldr	r3, [pc, #120]	; (8005540 <HAL_RCC_OscConfig+0x508>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_RCC_OscConfig+0x508>)
 80054ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d0:	f7fe fb14 	bl	8003afc <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d8:	f7fe fb10 	bl	8003afc <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e17a      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <HAL_RCC_OscConfig+0x508>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d108      	bne.n	8005510 <HAL_RCC_OscConfig+0x4d8>
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	4a0d      	ldr	r2, [pc, #52]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800550e:	e029      	b.n	8005564 <HAL_RCC_OscConfig+0x52c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b05      	cmp	r3, #5
 8005516:	d115      	bne.n	8005544 <HAL_RCC_OscConfig+0x50c>
 8005518:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_RCC_OscConfig+0x504>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	4a07      	ldr	r2, [pc, #28]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005520:	f043 0304 	orr.w	r3, r3, #4
 8005524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <HAL_RCC_OscConfig+0x504>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	4a03      	ldr	r2, [pc, #12]	; (800553c <HAL_RCC_OscConfig+0x504>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005538:	e014      	b.n	8005564 <HAL_RCC_OscConfig+0x52c>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	40007000 	.word	0x40007000
 8005544:	4b9c      	ldr	r3, [pc, #624]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554a:	4a9b      	ldr	r2, [pc, #620]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005554:	4b98      	ldr	r3, [pc, #608]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	4a97      	ldr	r2, [pc, #604]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800555c:	f023 0304 	bic.w	r3, r3, #4
 8005560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d016      	beq.n	800559a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fe fac6 	bl	8003afc <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005572:	e00a      	b.n	800558a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005574:	f7fe fac2 	bl	8003afc <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e12a      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800558a:	4b8b      	ldr	r3, [pc, #556]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800558c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ed      	beq.n	8005574 <HAL_RCC_OscConfig+0x53c>
 8005598:	e015      	b.n	80055c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559a:	f7fe faaf 	bl	8003afc <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a0:	e00a      	b.n	80055b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a2:	f7fe faab 	bl	8003afc <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e113      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b8:	4b7f      	ldr	r3, [pc, #508]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1ed      	bne.n	80055a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c6:	7ffb      	ldrb	r3, [r7, #31]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d105      	bne.n	80055d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055cc:	4b7a      	ldr	r3, [pc, #488]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	4a79      	ldr	r2, [pc, #484]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80055d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80fe 	beq.w	80057de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	f040 80d0 	bne.w	800578c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055ec:	4b72      	ldr	r3, [pc, #456]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 0203 	and.w	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d130      	bne.n	8005662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	3b01      	subs	r3, #1
 800560c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d127      	bne.n	8005662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800561e:	429a      	cmp	r2, r3
 8005620:	d11f      	bne.n	8005662 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800562c:	2a07      	cmp	r2, #7
 800562e:	bf14      	ite	ne
 8005630:	2201      	movne	r2, #1
 8005632:	2200      	moveq	r2, #0
 8005634:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005636:	4293      	cmp	r3, r2
 8005638:	d113      	bne.n	8005662 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	3b01      	subs	r3, #1
 8005648:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d109      	bne.n	8005662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	3b01      	subs	r3, #1
 800565c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800565e:	429a      	cmp	r2, r3
 8005660:	d06e      	beq.n	8005740 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d069      	beq.n	800573c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005668:	4b53      	ldr	r3, [pc, #332]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005674:	4b50      	ldr	r3, [pc, #320]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0ad      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005684:	4b4c      	ldr	r3, [pc, #304]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a4b      	ldr	r2, [pc, #300]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800568a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800568e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005690:	f7fe fa34 	bl	8003afc <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7fe fa30 	bl	8003afc <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e09a      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056aa:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b6:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <HAL_RCC_OscConfig+0x784>)
 80056bc:	4013      	ands	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056c6:	3a01      	subs	r2, #1
 80056c8:	0112      	lsls	r2, r2, #4
 80056ca:	4311      	orrs	r1, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056d0:	0212      	lsls	r2, r2, #8
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056d8:	0852      	lsrs	r2, r2, #1
 80056da:	3a01      	subs	r2, #1
 80056dc:	0552      	lsls	r2, r2, #21
 80056de:	4311      	orrs	r1, r2
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056e4:	0852      	lsrs	r2, r2, #1
 80056e6:	3a01      	subs	r2, #1
 80056e8:	0652      	lsls	r2, r2, #25
 80056ea:	4311      	orrs	r1, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056f0:	0912      	lsrs	r2, r2, #4
 80056f2:	0452      	lsls	r2, r2, #17
 80056f4:	430a      	orrs	r2, r1
 80056f6:	4930      	ldr	r1, [pc, #192]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056fc:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2d      	ldr	r2, [pc, #180]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005708:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800570e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005714:	f7fe f9f2 	bl	8003afc <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7fe f9ee 	bl	8003afc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e058      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572e:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800573a:	e050      	b.n	80057de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e04f      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005740:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d148      	bne.n	80057de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800574c:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005756:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005758:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800575e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005762:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005764:	f7fe f9ca 	bl	8003afc <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576c:	f7fe f9c6 	bl	8003afc <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e030      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577e:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x734>
 800578a:	e028      	b.n	80057de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b0c      	cmp	r3, #12
 8005790:	d023      	beq.n	80057da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fe f9ad 	bl	8003afc <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a4:	e00c      	b.n	80057c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fe f9a9 	bl	8003afc <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d905      	bls.n	80057c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e013      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
 80057b8:	40021000 	.word	0x40021000
 80057bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <HAL_RCC_OscConfig+0x7b0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ec      	bne.n	80057a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_RCC_OscConfig+0x7b0>)
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	4905      	ldr	r1, [pc, #20]	; (80057e8 <HAL_RCC_OscConfig+0x7b0>)
 80057d2:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_RCC_OscConfig+0x7b4>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	60cb      	str	r3, [r1, #12]
 80057d8:	e001      	b.n	80057de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40021000 	.word	0x40021000
 80057ec:	feeefffc 	.word	0xfeeefffc

080057f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0e7      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005804:	4b75      	ldr	r3, [pc, #468]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d910      	bls.n	8005834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005812:	4b72      	ldr	r3, [pc, #456]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 0207 	bic.w	r2, r3, #7
 800581a:	4970      	ldr	r1, [pc, #448]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	4b6e      	ldr	r3, [pc, #440]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0cf      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d010      	beq.n	8005862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	4b66      	ldr	r3, [pc, #408]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584c:	429a      	cmp	r2, r3
 800584e:	d908      	bls.n	8005862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005850:	4b63      	ldr	r3, [pc, #396]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4960      	ldr	r1, [pc, #384]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d04c      	beq.n	8005908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b03      	cmp	r3, #3
 8005874:	d107      	bne.n	8005886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005876:	4b5a      	ldr	r3, [pc, #360]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d121      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e0a6      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d107      	bne.n	800589e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588e:	4b54      	ldr	r3, [pc, #336]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d115      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e09a      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058a6:	4b4e      	ldr	r3, [pc, #312]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e08e      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b6:	4b4a      	ldr	r3, [pc, #296]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e086      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058c6:	4b46      	ldr	r3, [pc, #280]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f023 0203 	bic.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4943      	ldr	r1, [pc, #268]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d8:	f7fe f910 	bl	8003afc <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058de:	e00a      	b.n	80058f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e0:	f7fe f90c 	bl	8003afc <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e06e      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f6:	4b3a      	ldr	r3, [pc, #232]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 020c 	and.w	r2, r3, #12
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	429a      	cmp	r2, r3
 8005906:	d1eb      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d010      	beq.n	8005936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005920:	429a      	cmp	r2, r3
 8005922:	d208      	bcs.n	8005936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005924:	4b2e      	ldr	r3, [pc, #184]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	492b      	ldr	r1, [pc, #172]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005936:	4b29      	ldr	r3, [pc, #164]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d210      	bcs.n	8005966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005944:	4b25      	ldr	r3, [pc, #148]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f023 0207 	bic.w	r2, r3, #7
 800594c:	4923      	ldr	r1, [pc, #140]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005954:	4b21      	ldr	r3, [pc, #132]	; (80059dc <HAL_RCC_ClockConfig+0x1ec>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d001      	beq.n	8005966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e036      	b.n	80059d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d008      	beq.n	8005984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005972:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	4918      	ldr	r1, [pc, #96]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4910      	ldr	r1, [pc, #64]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059a4:	f000 f824 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <HAL_RCC_ClockConfig+0x1f0>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	490b      	ldr	r1, [pc, #44]	; (80059e4 <HAL_RCC_ClockConfig+0x1f4>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
 80059c0:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <HAL_RCC_ClockConfig+0x1f8>)
 80059c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059c4:	4b09      	ldr	r3, [pc, #36]	; (80059ec <HAL_RCC_ClockConfig+0x1fc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe f847 	bl	8003a5c <HAL_InitTick>
 80059ce:	4603      	mov	r3, r0
 80059d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80059d2:	7afb      	ldrb	r3, [r7, #11]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40022000 	.word	0x40022000
 80059e0:	40021000 	.word	0x40021000
 80059e4:	0800c7bc 	.word	0x0800c7bc
 80059e8:	20000004 	.word	0x20000004
 80059ec:	20000008 	.word	0x20000008

080059f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059fe:	4b3e      	ldr	r3, [pc, #248]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a08:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x34>
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d121      	bne.n	8005a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d11e      	bne.n	8005a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a24:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a30:	4b31      	ldr	r3, [pc, #196]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e005      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a40:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a4c:	4a2b      	ldr	r2, [pc, #172]	; (8005afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d102      	bne.n	8005a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a68:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e004      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d101      	bne.n	8005a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a74:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b0c      	cmp	r3, #12
 8005a7c:	d134      	bne.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a7e:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d003      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0xac>
 8005a94:	e005      	b.n	8005aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a98:	617b      	str	r3, [r7, #20]
      break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a9e:	617b      	str	r3, [r7, #20]
      break;
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	617b      	str	r3, [r7, #20]
      break;
 8005aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	fb03 f202 	mul.w	r2, r3, r2
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	0e5b      	lsrs	r3, r3, #25
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	3301      	adds	r3, #1
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3724      	adds	r7, #36	; 0x24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000
 8005afc:	0800c7d4 	.word	0x0800c7d4
 8005b00:	00f42400 	.word	0x00f42400
 8005b04:	007a1200 	.word	0x007a1200

08005b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000004 	.word	0x20000004

08005b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b24:	f7ff fff0 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4904      	ldr	r1, [pc, #16]	; (8005b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40021000 	.word	0x40021000
 8005b48:	0800c7cc 	.word	0x0800c7cc

08005b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b50:	f7ff ffda 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0adb      	lsrs	r3, r3, #11
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4904      	ldr	r1, [pc, #16]	; (8005b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40021000 	.word	0x40021000
 8005b74:	0800c7cc 	.word	0x0800c7cc

08005b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b84:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b90:	f7ff f9ee 	bl	8004f70 <HAL_PWREx_GetVoltageRange>
 8005b94:	6178      	str	r0, [r7, #20]
 8005b96:	e014      	b.n	8005bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	4a24      	ldr	r2, [pc, #144]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bb0:	f7ff f9de 	bl	8004f70 <HAL_PWREx_GetVoltageRange>
 8005bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bb6:	4b1e      	ldr	r3, [pc, #120]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bba:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc8:	d10b      	bne.n	8005be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d919      	bls.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2ba0      	cmp	r3, #160	; 0xa0
 8005bd4:	d902      	bls.n	8005bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	e013      	b.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bdc:	2301      	movs	r3, #1
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	e010      	b.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b80      	cmp	r3, #128	; 0x80
 8005be6:	d902      	bls.n	8005bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005be8:	2303      	movs	r3, #3
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	e00a      	b.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b80      	cmp	r3, #128	; 0x80
 8005bf2:	d102      	bne.n	8005bfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	e004      	b.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b70      	cmp	r3, #112	; 0x70
 8005bfe:	d101      	bne.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c00:	2301      	movs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 0207 	bic.w	r2, r3, #7
 8005c0c:	4909      	ldr	r1, [pc, #36]	; (8005c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d001      	beq.n	8005c26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40021000 	.word	0x40021000
 8005c34:	40022000 	.word	0x40022000

08005c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c40:	2300      	movs	r3, #0
 8005c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c44:	2300      	movs	r3, #0
 8005c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d041      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c5c:	d02a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c62:	d824      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c68:	d008      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c6e:	d81e      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c78:	d010      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c7a:	e018      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c7c:	4b86      	ldr	r3, [pc, #536]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a85      	ldr	r2, [pc, #532]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c88:	e015      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fabb 	bl	800620c <RCCEx_PLLSAI1_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c9a:	e00c      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3320      	adds	r3, #32
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fba6 	bl	80063f4 <RCCEx_PLLSAI2_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cac:	e003      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb6:	7cfb      	ldrb	r3, [r7, #19]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cbc:	4b76      	ldr	r3, [pc, #472]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cca:	4973      	ldr	r1, [pc, #460]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cd2:	e001      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	7cfb      	ldrb	r3, [r7, #19]
 8005cd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d041      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cec:	d02a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005cee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cf2:	d824      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cf8:	d008      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cfe:	d81e      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d08:	d010      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d0a:	e018      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d0c:	4b62      	ldr	r3, [pc, #392]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4a61      	ldr	r2, [pc, #388]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d18:	e015      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fa73 	bl	800620c <RCCEx_PLLSAI1_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d2a:	e00c      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3320      	adds	r3, #32
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fb5e 	bl	80063f4 <RCCEx_PLLSAI2_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d3c:	e003      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	74fb      	strb	r3, [r7, #19]
      break;
 8005d42:	e000      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d4c:	4b52      	ldr	r3, [pc, #328]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5a:	494f      	ldr	r1, [pc, #316]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d62:	e001      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80a0 	beq.w	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d90:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d94:	4a40      	ldr	r2, [pc, #256]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d9c:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da8:	2301      	movs	r3, #1
 8005daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dac:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005db8:	f7fd fea0 	bl	8003afc <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dbe:	e009      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc0:	f7fd fe9c 	bl	8003afc <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d902      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8005dd2:	e005      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dd4:	4b31      	ldr	r3, [pc, #196]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ef      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d15c      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005de6:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01f      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d019      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e10:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	4a20      	ldr	r2, [pc, #128]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e20:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e30:	4a19      	ldr	r2, [pc, #100]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fd fe5b 	bl	8003afc <HAL_GetTick>
 8005e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e48:	e00b      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4a:	f7fd fe57 	bl	8003afc <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d902      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0ec      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e76:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e86:	4904      	ldr	r1, [pc, #16]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e8e:	e009      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e90:	7cfb      	ldrb	r3, [r7, #19]
 8005e92:	74bb      	strb	r3, [r7, #18]
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea4:	7c7b      	ldrb	r3, [r7, #17]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eaa:	4b9e      	ldr	r3, [pc, #632]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eae:	4a9d      	ldr	r2, [pc, #628]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ec2:	4b98      	ldr	r3, [pc, #608]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f023 0203 	bic.w	r2, r3, #3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	4994      	ldr	r1, [pc, #592]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ee4:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	f023 020c 	bic.w	r2, r3, #12
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	498c      	ldr	r1, [pc, #560]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f06:	4b87      	ldr	r3, [pc, #540]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	4983      	ldr	r1, [pc, #524]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f28:	4b7e      	ldr	r3, [pc, #504]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	497b      	ldr	r1, [pc, #492]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f4a:	4b76      	ldr	r3, [pc, #472]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f58:	4972      	ldr	r1, [pc, #456]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f6c:	4b6d      	ldr	r3, [pc, #436]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	496a      	ldr	r1, [pc, #424]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f8e:	4b65      	ldr	r3, [pc, #404]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	4961      	ldr	r1, [pc, #388]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fb0:	4b5c      	ldr	r3, [pc, #368]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	4959      	ldr	r1, [pc, #356]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fd2:	4b54      	ldr	r3, [pc, #336]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe0:	4950      	ldr	r1, [pc, #320]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ff4:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	4948      	ldr	r1, [pc, #288]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006016:	4b43      	ldr	r3, [pc, #268]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006024:	493f      	ldr	r1, [pc, #252]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d028      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006038:	4b3a      	ldr	r3, [pc, #232]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006046:	4937      	ldr	r1, [pc, #220]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006056:	d106      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006058:	4b32      	ldr	r3, [pc, #200]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a31      	ldr	r2, [pc, #196]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006062:	60d3      	str	r3, [r2, #12]
 8006064:	e011      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800606e:	d10c      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	2101      	movs	r1, #1
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f8c8 	bl	800620c <RCCEx_PLLSAI1_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006086:	7cfb      	ldrb	r3, [r7, #19]
 8006088:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d028      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006096:	4b23      	ldr	r3, [pc, #140]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	491f      	ldr	r1, [pc, #124]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b4:	d106      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b6:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060c0:	60d3      	str	r3, [r2, #12]
 80060c2:	e011      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	2101      	movs	r1, #1
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 f899 	bl	800620c <RCCEx_PLLSAI1_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060de:	7cfb      	ldrb	r3, [r7, #19]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
 80060e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d02b      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	4908      	ldr	r1, [pc, #32]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006112:	d109      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a02      	ldr	r2, [pc, #8]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611e:	60d3      	str	r3, [r2, #12]
 8006120:	e014      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006130:	d10c      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	2101      	movs	r1, #1
 8006138:	4618      	mov	r0, r3
 800613a:	f000 f867 	bl	800620c <RCCEx_PLLSAI1_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006142:	7cfb      	ldrb	r3, [r7, #19]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d02f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006158:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006166:	4928      	ldr	r1, [pc, #160]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006176:	d10d      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	2102      	movs	r1, #2
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f844 	bl	800620c <RCCEx_PLLSAI1_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006188:	7cfb      	ldrb	r3, [r7, #19]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d014      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800618e:	7cfb      	ldrb	r3, [r7, #19]
 8006190:	74bb      	strb	r3, [r7, #18]
 8006192:	e011      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d10c      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3320      	adds	r3, #32
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 f925 	bl	80063f4 <RCCEx_PLLSAI2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d2:	490d      	ldr	r1, [pc, #52]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f6:	4904      	ldr	r1, [pc, #16]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40021000 	.word	0x40021000

0800620c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800621a:	4b75      	ldr	r3, [pc, #468]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d018      	beq.n	8006258 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006226:	4b72      	ldr	r3, [pc, #456]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0203 	and.w	r2, r3, #3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d10d      	bne.n	8006252 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
       ||
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800623e:	4b6c      	ldr	r3, [pc, #432]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
       ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d047      	beq.n	80062e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
 8006256:	e044      	b.n	80062e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d018      	beq.n	8006292 <RCCEx_PLLSAI1_Config+0x86>
 8006260:	2b03      	cmp	r3, #3
 8006262:	d825      	bhi.n	80062b0 <RCCEx_PLLSAI1_Config+0xa4>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d002      	beq.n	800626e <RCCEx_PLLSAI1_Config+0x62>
 8006268:	2b02      	cmp	r3, #2
 800626a:	d009      	beq.n	8006280 <RCCEx_PLLSAI1_Config+0x74>
 800626c:	e020      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800626e:	4b60      	ldr	r3, [pc, #384]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11d      	bne.n	80062b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800627e:	e01a      	b.n	80062b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006280:	4b5b      	ldr	r3, [pc, #364]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006288:	2b00      	cmp	r3, #0
 800628a:	d116      	bne.n	80062ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006290:	e013      	b.n	80062ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006292:	4b57      	ldr	r3, [pc, #348]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10f      	bne.n	80062be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800629e:	4b54      	ldr	r3, [pc, #336]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ae:	e006      	b.n	80062be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
      break;
 80062b4:	e004      	b.n	80062c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062b6:	bf00      	nop
 80062b8:	e002      	b.n	80062c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062be:	bf00      	nop
    }

    if(status == HAL_OK)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10d      	bne.n	80062e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062c6:	4b4a      	ldr	r3, [pc, #296]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6819      	ldr	r1, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	430b      	orrs	r3, r1
 80062dc:	4944      	ldr	r1, [pc, #272]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d17d      	bne.n	80063e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062e8:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a40      	ldr	r2, [pc, #256]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f4:	f7fd fc02 	bl	8003afc <HAL_GetTick>
 80062f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062fa:	e009      	b.n	8006310 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062fc:	f7fd fbfe 	bl	8003afc <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d902      	bls.n	8006310 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	73fb      	strb	r3, [r7, #15]
        break;
 800630e:	e005      	b.n	800631c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006310:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ef      	bne.n	80062fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d160      	bne.n	80063e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d111      	bne.n	800634c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006328:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6892      	ldr	r2, [r2, #8]
 8006338:	0211      	lsls	r1, r2, #8
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68d2      	ldr	r2, [r2, #12]
 800633e:	0912      	lsrs	r2, r2, #4
 8006340:	0452      	lsls	r2, r2, #17
 8006342:	430a      	orrs	r2, r1
 8006344:	492a      	ldr	r1, [pc, #168]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006346:	4313      	orrs	r3, r2
 8006348:	610b      	str	r3, [r1, #16]
 800634a:	e027      	b.n	800639c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d112      	bne.n	8006378 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006352:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800635a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6892      	ldr	r2, [r2, #8]
 8006362:	0211      	lsls	r1, r2, #8
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6912      	ldr	r2, [r2, #16]
 8006368:	0852      	lsrs	r2, r2, #1
 800636a:	3a01      	subs	r2, #1
 800636c:	0552      	lsls	r2, r2, #21
 800636e:	430a      	orrs	r2, r1
 8006370:	491f      	ldr	r1, [pc, #124]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	610b      	str	r3, [r1, #16]
 8006376:	e011      	b.n	800639c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006380:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6892      	ldr	r2, [r2, #8]
 8006388:	0211      	lsls	r1, r2, #8
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6952      	ldr	r2, [r2, #20]
 800638e:	0852      	lsrs	r2, r2, #1
 8006390:	3a01      	subs	r2, #1
 8006392:	0652      	lsls	r2, r2, #25
 8006394:	430a      	orrs	r2, r1
 8006396:	4916      	ldr	r1, [pc, #88]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006398:	4313      	orrs	r3, r2
 800639a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800639c:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fd fba8 	bl	8003afc <HAL_GetTick>
 80063ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063ae:	e009      	b.n	80063c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063b0:	f7fd fba4 	bl	8003afc <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d902      	bls.n	80063c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	73fb      	strb	r3, [r7, #15]
          break;
 80063c2:	e005      	b.n	80063d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0ef      	beq.n	80063b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	4904      	ldr	r1, [pc, #16]	; (80063f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000

080063f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006402:	4b6a      	ldr	r3, [pc, #424]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d018      	beq.n	8006440 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800640e:	4b67      	ldr	r3, [pc, #412]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0203 	and.w	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d10d      	bne.n	800643a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
       ||
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006426:	4b61      	ldr	r3, [pc, #388]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
       ||
 8006436:	429a      	cmp	r2, r3
 8006438:	d047      	beq.n	80064ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
 800643e:	e044      	b.n	80064ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b03      	cmp	r3, #3
 8006446:	d018      	beq.n	800647a <RCCEx_PLLSAI2_Config+0x86>
 8006448:	2b03      	cmp	r3, #3
 800644a:	d825      	bhi.n	8006498 <RCCEx_PLLSAI2_Config+0xa4>
 800644c:	2b01      	cmp	r3, #1
 800644e:	d002      	beq.n	8006456 <RCCEx_PLLSAI2_Config+0x62>
 8006450:	2b02      	cmp	r3, #2
 8006452:	d009      	beq.n	8006468 <RCCEx_PLLSAI2_Config+0x74>
 8006454:	e020      	b.n	8006498 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006456:	4b55      	ldr	r3, [pc, #340]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d11d      	bne.n	800649e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006466:	e01a      	b.n	800649e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006468:	4b50      	ldr	r3, [pc, #320]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006470:	2b00      	cmp	r3, #0
 8006472:	d116      	bne.n	80064a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006478:	e013      	b.n	80064a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800647a:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10f      	bne.n	80064a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006486:	4b49      	ldr	r3, [pc, #292]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006496:	e006      	b.n	80064a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
      break;
 800649c:	e004      	b.n	80064a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10d      	bne.n	80064ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064ae:	4b3f      	ldr	r3, [pc, #252]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6819      	ldr	r1, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	3b01      	subs	r3, #1
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	430b      	orrs	r3, r1
 80064c4:	4939      	ldr	r1, [pc, #228]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d167      	bne.n	80065a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064d0:	4b36      	ldr	r3, [pc, #216]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a35      	ldr	r2, [pc, #212]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064dc:	f7fd fb0e 	bl	8003afc <HAL_GetTick>
 80064e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064e2:	e009      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064e4:	f7fd fb0a 	bl	8003afc <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d902      	bls.n	80064f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	73fb      	strb	r3, [r7, #15]
        break;
 80064f6:	e005      	b.n	8006504 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064f8:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1ef      	bne.n	80064e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d14a      	bne.n	80065a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d111      	bne.n	8006534 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006510:	4b26      	ldr	r3, [pc, #152]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6892      	ldr	r2, [r2, #8]
 8006520:	0211      	lsls	r1, r2, #8
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68d2      	ldr	r2, [r2, #12]
 8006526:	0912      	lsrs	r2, r2, #4
 8006528:	0452      	lsls	r2, r2, #17
 800652a:	430a      	orrs	r2, r1
 800652c:	491f      	ldr	r1, [pc, #124]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800652e:	4313      	orrs	r3, r2
 8006530:	614b      	str	r3, [r1, #20]
 8006532:	e011      	b.n	8006558 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800653c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6892      	ldr	r2, [r2, #8]
 8006544:	0211      	lsls	r1, r2, #8
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6912      	ldr	r2, [r2, #16]
 800654a:	0852      	lsrs	r2, r2, #1
 800654c:	3a01      	subs	r2, #1
 800654e:	0652      	lsls	r2, r2, #25
 8006550:	430a      	orrs	r2, r1
 8006552:	4916      	ldr	r1, [pc, #88]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006554:	4313      	orrs	r3, r2
 8006556:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006558:	4b14      	ldr	r3, [pc, #80]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800655e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006564:	f7fd faca 	bl	8003afc <HAL_GetTick>
 8006568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800656a:	e009      	b.n	8006580 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800656c:	f7fd fac6 	bl	8003afc <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d902      	bls.n	8006580 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	73fb      	strb	r3, [r7, #15]
          break;
 800657e:	e005      	b.n	800658c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0ef      	beq.n	800656c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006592:	4b06      	ldr	r3, [pc, #24]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4904      	ldr	r1, [pc, #16]	; (80065ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800659c:	4313      	orrs	r3, r2
 800659e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40021000 	.word	0x40021000

080065b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e049      	b.n	8006656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fd f8ba 	bl	8003750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4619      	mov	r1, r3
 80065ee:	4610      	mov	r0, r2
 80065f0:	f000 fd66 	bl	80070c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e049      	b.n	8006704 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f841 	bl	800670c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f000 fd0f 	bl	80070c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <HAL_TIM_OC_Start_IT+0x28>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e03c      	b.n	80067c2 <HAL_TIM_OC_Start_IT+0xa2>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b04      	cmp	r3, #4
 800674c:	d109      	bne.n	8006762 <HAL_TIM_OC_Start_IT+0x42>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	e02f      	b.n	80067c2 <HAL_TIM_OC_Start_IT+0xa2>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d109      	bne.n	800677c <HAL_TIM_OC_Start_IT+0x5c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	bf14      	ite	ne
 8006774:	2301      	movne	r3, #1
 8006776:	2300      	moveq	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	e022      	b.n	80067c2 <HAL_TIM_OC_Start_IT+0xa2>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b0c      	cmp	r3, #12
 8006780:	d109      	bne.n	8006796 <HAL_TIM_OC_Start_IT+0x76>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	e015      	b.n	80067c2 <HAL_TIM_OC_Start_IT+0xa2>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b10      	cmp	r3, #16
 800679a:	d109      	bne.n	80067b0 <HAL_TIM_OC_Start_IT+0x90>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	bf14      	ite	ne
 80067a8:	2301      	movne	r3, #1
 80067aa:	2300      	moveq	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	e008      	b.n	80067c2 <HAL_TIM_OC_Start_IT+0xa2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	bf14      	ite	ne
 80067bc:	2301      	movne	r3, #1
 80067be:	2300      	moveq	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e0e7      	b.n	800699a <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_TIM_OC_Start_IT+0xba>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d8:	e023      	b.n	8006822 <HAL_TIM_OC_Start_IT+0x102>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d104      	bne.n	80067ea <HAL_TIM_OC_Start_IT+0xca>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067e8:	e01b      	b.n	8006822 <HAL_TIM_OC_Start_IT+0x102>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_OC_Start_IT+0xda>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f8:	e013      	b.n	8006822 <HAL_TIM_OC_Start_IT+0x102>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b0c      	cmp	r3, #12
 80067fe:	d104      	bne.n	800680a <HAL_TIM_OC_Start_IT+0xea>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006808:	e00b      	b.n	8006822 <HAL_TIM_OC_Start_IT+0x102>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b10      	cmp	r3, #16
 800680e:	d104      	bne.n	800681a <HAL_TIM_OC_Start_IT+0xfa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006818:	e003      	b.n	8006822 <HAL_TIM_OC_Start_IT+0x102>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b0c      	cmp	r3, #12
 8006826:	d841      	bhi.n	80068ac <HAL_TIM_OC_Start_IT+0x18c>
 8006828:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <HAL_TIM_OC_Start_IT+0x110>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006865 	.word	0x08006865
 8006834:	080068ad 	.word	0x080068ad
 8006838:	080068ad 	.word	0x080068ad
 800683c:	080068ad 	.word	0x080068ad
 8006840:	08006877 	.word	0x08006877
 8006844:	080068ad 	.word	0x080068ad
 8006848:	080068ad 	.word	0x080068ad
 800684c:	080068ad 	.word	0x080068ad
 8006850:	08006889 	.word	0x08006889
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068ad 	.word	0x080068ad
 800685c:	080068ad 	.word	0x080068ad
 8006860:	0800689b 	.word	0x0800689b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0202 	orr.w	r2, r2, #2
 8006872:	60da      	str	r2, [r3, #12]
      break;
 8006874:	e01d      	b.n	80068b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0204 	orr.w	r2, r2, #4
 8006884:	60da      	str	r2, [r3, #12]
      break;
 8006886:	e014      	b.n	80068b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0208 	orr.w	r2, r2, #8
 8006896:	60da      	str	r2, [r3, #12]
      break;
 8006898:	e00b      	b.n	80068b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0210 	orr.w	r2, r2, #16
 80068a8:	60da      	str	r2, [r3, #12]
      break;
 80068aa:	e002      	b.n	80068b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
      break;
 80068b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d16f      	bne.n	8006998 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2201      	movs	r2, #1
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f807 	bl	80078d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a36      	ldr	r2, [pc, #216]	; (80069a4 <HAL_TIM_OC_Start_IT+0x284>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <HAL_TIM_OC_Start_IT+0x1d8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a34      	ldr	r2, [pc, #208]	; (80069a8 <HAL_TIM_OC_Start_IT+0x288>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00e      	beq.n	80068f8 <HAL_TIM_OC_Start_IT+0x1d8>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a33      	ldr	r2, [pc, #204]	; (80069ac <HAL_TIM_OC_Start_IT+0x28c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_TIM_OC_Start_IT+0x1d8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a31      	ldr	r2, [pc, #196]	; (80069b0 <HAL_TIM_OC_Start_IT+0x290>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <HAL_TIM_OC_Start_IT+0x1d8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a30      	ldr	r2, [pc, #192]	; (80069b4 <HAL_TIM_OC_Start_IT+0x294>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d101      	bne.n	80068fc <HAL_TIM_OC_Start_IT+0x1dc>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <HAL_TIM_OC_Start_IT+0x1de>
 80068fc:	2300      	movs	r3, #0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006910:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <HAL_TIM_OC_Start_IT+0x284>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d01d      	beq.n	8006958 <HAL_TIM_OC_Start_IT+0x238>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006924:	d018      	beq.n	8006958 <HAL_TIM_OC_Start_IT+0x238>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a23      	ldr	r2, [pc, #140]	; (80069b8 <HAL_TIM_OC_Start_IT+0x298>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <HAL_TIM_OC_Start_IT+0x238>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a21      	ldr	r2, [pc, #132]	; (80069bc <HAL_TIM_OC_Start_IT+0x29c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_TIM_OC_Start_IT+0x238>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a20      	ldr	r2, [pc, #128]	; (80069c0 <HAL_TIM_OC_Start_IT+0x2a0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_TIM_OC_Start_IT+0x238>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a17      	ldr	r2, [pc, #92]	; (80069a8 <HAL_TIM_OC_Start_IT+0x288>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_TIM_OC_Start_IT+0x238>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a16      	ldr	r2, [pc, #88]	; (80069ac <HAL_TIM_OC_Start_IT+0x28c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d115      	bne.n	8006984 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <HAL_TIM_OC_Start_IT+0x2a4>)
 8006960:	4013      	ands	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b06      	cmp	r3, #6
 8006968:	d015      	beq.n	8006996 <HAL_TIM_OC_Start_IT+0x276>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006970:	d011      	beq.n	8006996 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006982:	e008      	b.n	8006996 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	e000      	b.n	8006998 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006996:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40012c00 	.word	0x40012c00
 80069a8:	40013400 	.word	0x40013400
 80069ac:	40014000 	.word	0x40014000
 80069b0:	40014400 	.word	0x40014400
 80069b4:	40014800 	.word	0x40014800
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	00010007 	.word	0x00010007

080069c8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b0c      	cmp	r3, #12
 80069da:	d841      	bhi.n	8006a60 <HAL_TIM_OC_Stop_IT+0x98>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a19 	.word	0x08006a19
 80069e8:	08006a61 	.word	0x08006a61
 80069ec:	08006a61 	.word	0x08006a61
 80069f0:	08006a61 	.word	0x08006a61
 80069f4:	08006a2b 	.word	0x08006a2b
 80069f8:	08006a61 	.word	0x08006a61
 80069fc:	08006a61 	.word	0x08006a61
 8006a00:	08006a61 	.word	0x08006a61
 8006a04:	08006a3d 	.word	0x08006a3d
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a4f 	.word	0x08006a4f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0202 	bic.w	r2, r2, #2
 8006a26:	60da      	str	r2, [r3, #12]
      break;
 8006a28:	e01d      	b.n	8006a66 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0204 	bic.w	r2, r2, #4
 8006a38:	60da      	str	r2, [r3, #12]
      break;
 8006a3a:	e014      	b.n	8006a66 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0208 	bic.w	r2, r2, #8
 8006a4a:	60da      	str	r2, [r3, #12]
      break;
 8006a4c:	e00b      	b.n	8006a66 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0210 	bic.w	r2, r2, #16
 8006a5c:	60da      	str	r2, [r3, #12]
      break;
 8006a5e:	e002      	b.n	8006a66 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
      break;
 8006a64:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f040 8081 	bne.w	8006b70 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 ff2c 	bl	80078d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a3e      	ldr	r2, [pc, #248]	; (8006b7c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_OC_Stop_IT+0xe6>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a3d      	ldr	r2, [pc, #244]	; (8006b80 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_OC_Stop_IT+0xe6>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a3b      	ldr	r2, [pc, #236]	; (8006b84 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_OC_Stop_IT+0xe6>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a3a      	ldr	r2, [pc, #232]	; (8006b88 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_OC_Stop_IT+0xe6>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a38      	ldr	r2, [pc, #224]	; (8006b8c <HAL_TIM_OC_Stop_IT+0x1c4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d101      	bne.n	8006ab2 <HAL_TIM_OC_Stop_IT+0xea>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <HAL_TIM_OC_Stop_IT+0xec>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a1a      	ldr	r2, [r3, #32]
 8006abe:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10f      	bne.n	8006ae8 <HAL_TIM_OC_Stop_IT+0x120>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6a1a      	ldr	r2, [r3, #32]
 8006ace:	f240 4344 	movw	r3, #1092	; 0x444
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_TIM_OC_Stop_IT+0x120>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ae6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6a1a      	ldr	r2, [r3, #32]
 8006aee:	f241 1311 	movw	r3, #4369	; 0x1111
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10f      	bne.n	8006b18 <HAL_TIM_OC_Stop_IT+0x150>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6a1a      	ldr	r2, [r3, #32]
 8006afe:	f240 4344 	movw	r3, #1092	; 0x444
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d107      	bne.n	8006b18 <HAL_TIM_OC_Stop_IT+0x150>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <HAL_TIM_OC_Stop_IT+0x160>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b26:	e023      	b.n	8006b70 <HAL_TIM_OC_Stop_IT+0x1a8>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d104      	bne.n	8006b38 <HAL_TIM_OC_Stop_IT+0x170>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b36:	e01b      	b.n	8006b70 <HAL_TIM_OC_Stop_IT+0x1a8>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d104      	bne.n	8006b48 <HAL_TIM_OC_Stop_IT+0x180>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b46:	e013      	b.n	8006b70 <HAL_TIM_OC_Stop_IT+0x1a8>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b0c      	cmp	r3, #12
 8006b4c:	d104      	bne.n	8006b58 <HAL_TIM_OC_Stop_IT+0x190>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b56:	e00b      	b.n	8006b70 <HAL_TIM_OC_Stop_IT+0x1a8>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b10      	cmp	r3, #16
 8006b5c:	d104      	bne.n	8006b68 <HAL_TIM_OC_Stop_IT+0x1a0>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b66:	e003      	b.n	8006b70 <HAL_TIM_OC_Stop_IT+0x1a8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d122      	bne.n	8006bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d11b      	bne.n	8006bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0202 	mvn.w	r2, #2
 8006bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa49 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e005      	b.n	8006be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fc f9b0 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fa4c 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d122      	bne.n	8006c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d11b      	bne.n	8006c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0204 	mvn.w	r2, #4
 8006c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fa1f 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006c2c:	e005      	b.n	8006c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fc f986 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa22 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d122      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d11b      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f06f 0208 	mvn.w	r2, #8
 8006c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2204      	movs	r2, #4
 8006c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9f5 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006c80:	e005      	b.n	8006c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fc f95c 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9f8 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d122      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d11b      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0210 	mvn.w	r2, #16
 8006cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9cb 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fc f932 	bl	8002f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f9ce 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d10e      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d107      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0201 	mvn.w	r2, #1
 8006d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9a1 	bl	8007056 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d10e      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d107      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fe82 	bl	8007a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4e:	d10e      	bne.n	8006d6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5a:	2b80      	cmp	r3, #128	; 0x80
 8006d5c:	d107      	bne.n	8006d6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fe75 	bl	8007a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d10e      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d86:	2b40      	cmp	r3, #64	; 0x40
 8006d88:	d107      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f97c 	bl	8007092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d10e      	bne.n	8006dc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d107      	bne.n	8006dc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f06f 0220 	mvn.w	r2, #32
 8006dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fe35 	bl	8007a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <HAL_TIM_OC_ConfigChannel+0x1e>
 8006dea:	2302      	movs	r3, #2
 8006dec:	e066      	b.n	8006ebc <HAL_TIM_OC_ConfigChannel+0xec>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b14      	cmp	r3, #20
 8006dfa:	d857      	bhi.n	8006eac <HAL_TIM_OC_ConfigChannel+0xdc>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006ead 	.word	0x08006ead
 8006e0c:	08006ead 	.word	0x08006ead
 8006e10:	08006ead 	.word	0x08006ead
 8006e14:	08006e67 	.word	0x08006e67
 8006e18:	08006ead 	.word	0x08006ead
 8006e1c:	08006ead 	.word	0x08006ead
 8006e20:	08006ead 	.word	0x08006ead
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ead 	.word	0x08006ead
 8006e30:	08006ead 	.word	0x08006ead
 8006e34:	08006e83 	.word	0x08006e83
 8006e38:	08006ead 	.word	0x08006ead
 8006e3c:	08006ead 	.word	0x08006ead
 8006e40:	08006ead 	.word	0x08006ead
 8006e44:	08006e91 	.word	0x08006e91
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	08006ead 	.word	0x08006ead
 8006e50:	08006ead 	.word	0x08006ead
 8006e54:	08006e9f 	.word	0x08006e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f9c8 	bl	80071f4 <TIM_OC1_SetConfig>
      break;
 8006e64:	e025      	b.n	8006eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68b9      	ldr	r1, [r7, #8]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fa51 	bl	8007314 <TIM_OC2_SetConfig>
      break;
 8006e72:	e01e      	b.n	8006eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fad4 	bl	8007428 <TIM_OC3_SetConfig>
      break;
 8006e80:	e017      	b.n	8006eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fb55 	bl	8007538 <TIM_OC4_SetConfig>
      break;
 8006e8e:	e010      	b.n	8006eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fbb8 	bl	800760c <TIM_OC5_SetConfig>
      break;
 8006e9c:	e009      	b.n	8006eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fc15 	bl	80076d4 <TIM_OC6_SetConfig>
      break;
 8006eaa:	e002      	b.n	8006eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e0b6      	b.n	800704e <HAL_TIM_ConfigClockSource+0x18a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1c:	d03e      	beq.n	8006f9c <HAL_TIM_ConfigClockSource+0xd8>
 8006f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f22:	f200 8087 	bhi.w	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2a:	f000 8086 	beq.w	800703a <HAL_TIM_ConfigClockSource+0x176>
 8006f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f32:	d87f      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f34:	2b70      	cmp	r3, #112	; 0x70
 8006f36:	d01a      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0xaa>
 8006f38:	2b70      	cmp	r3, #112	; 0x70
 8006f3a:	d87b      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f3c:	2b60      	cmp	r3, #96	; 0x60
 8006f3e:	d050      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x11e>
 8006f40:	2b60      	cmp	r3, #96	; 0x60
 8006f42:	d877      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f44:	2b50      	cmp	r3, #80	; 0x50
 8006f46:	d03c      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0xfe>
 8006f48:	2b50      	cmp	r3, #80	; 0x50
 8006f4a:	d873      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d058      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x13e>
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d86f      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f54:	2b30      	cmp	r3, #48	; 0x30
 8006f56:	d064      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f58:	2b30      	cmp	r3, #48	; 0x30
 8006f5a:	d86b      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d060      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d867      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d05c      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d05a      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f6c:	e062      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6899      	ldr	r1, [r3, #8]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f000 fc89 	bl	8007894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	609a      	str	r2, [r3, #8]
      break;
 8006f9a:	e04f      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	6899      	ldr	r1, [r3, #8]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f000 fc72 	bl	8007894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fbe:	609a      	str	r2, [r3, #8]
      break;
 8006fc0:	e03c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6859      	ldr	r1, [r3, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f000 fbe6 	bl	80077a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2150      	movs	r1, #80	; 0x50
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fc3f 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8006fe0:	e02c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6859      	ldr	r1, [r3, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f000 fc05 	bl	80077fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2160      	movs	r1, #96	; 0x60
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fc2f 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8007000:	e01c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	6859      	ldr	r1, [r3, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	461a      	mov	r2, r3
 8007010:	f000 fbc6 	bl	80077a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2140      	movs	r1, #64	; 0x40
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fc1f 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8007020:	e00c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f000 fc16 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8007032:	e003      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
      break;
 8007038:	e000      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800703a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7f1b      	ldrb	r3, [r3, #28]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a40      	ldr	r2, [pc, #256]	; (80071d4 <TIM_Base_SetConfig+0x114>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d013      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070de:	d00f      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a3d      	ldr	r2, [pc, #244]	; (80071d8 <TIM_Base_SetConfig+0x118>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00b      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a3c      	ldr	r2, [pc, #240]	; (80071dc <TIM_Base_SetConfig+0x11c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d007      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a3b      	ldr	r2, [pc, #236]	; (80071e0 <TIM_Base_SetConfig+0x120>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d003      	beq.n	8007100 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a3a      	ldr	r2, [pc, #232]	; (80071e4 <TIM_Base_SetConfig+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d108      	bne.n	8007112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2f      	ldr	r2, [pc, #188]	; (80071d4 <TIM_Base_SetConfig+0x114>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d01f      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007120:	d01b      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2c      	ldr	r2, [pc, #176]	; (80071d8 <TIM_Base_SetConfig+0x118>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d017      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2b      	ldr	r2, [pc, #172]	; (80071dc <TIM_Base_SetConfig+0x11c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d013      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2a      	ldr	r2, [pc, #168]	; (80071e0 <TIM_Base_SetConfig+0x120>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00f      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <TIM_Base_SetConfig+0x124>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00b      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a28      	ldr	r2, [pc, #160]	; (80071e8 <TIM_Base_SetConfig+0x128>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d007      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a27      	ldr	r2, [pc, #156]	; (80071ec <TIM_Base_SetConfig+0x12c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d003      	beq.n	800715a <TIM_Base_SetConfig+0x9a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a26      	ldr	r2, [pc, #152]	; (80071f0 <TIM_Base_SetConfig+0x130>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d108      	bne.n	800716c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a10      	ldr	r2, [pc, #64]	; (80071d4 <TIM_Base_SetConfig+0x114>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00f      	beq.n	80071b8 <TIM_Base_SetConfig+0xf8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a12      	ldr	r2, [pc, #72]	; (80071e4 <TIM_Base_SetConfig+0x124>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00b      	beq.n	80071b8 <TIM_Base_SetConfig+0xf8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a11      	ldr	r2, [pc, #68]	; (80071e8 <TIM_Base_SetConfig+0x128>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d007      	beq.n	80071b8 <TIM_Base_SetConfig+0xf8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a10      	ldr	r2, [pc, #64]	; (80071ec <TIM_Base_SetConfig+0x12c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0xf8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <TIM_Base_SetConfig+0x130>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d103      	bne.n	80071c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	615a      	str	r2, [r3, #20]
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40013400 	.word	0x40013400
 80071e8:	40014000 	.word	0x40014000
 80071ec:	40014400 	.word	0x40014400
 80071f0:	40014800 	.word	0x40014800

080071f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f023 0302 	bic.w	r3, r3, #2
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a2c      	ldr	r2, [pc, #176]	; (8007300 <TIM_OC1_SetConfig+0x10c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00f      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <TIM_OC1_SetConfig+0x110>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00b      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <TIM_OC1_SetConfig+0x114>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a29      	ldr	r2, [pc, #164]	; (800730c <TIM_OC1_SetConfig+0x118>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_OC1_SetConfig+0x80>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a28      	ldr	r2, [pc, #160]	; (8007310 <TIM_OC1_SetConfig+0x11c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10c      	bne.n	800728e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0308 	bic.w	r3, r3, #8
 800727a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 0304 	bic.w	r3, r3, #4
 800728c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <TIM_OC1_SetConfig+0x10c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <TIM_OC1_SetConfig+0x110>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00b      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a19      	ldr	r2, [pc, #100]	; (8007308 <TIM_OC1_SetConfig+0x114>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <TIM_OC1_SetConfig+0x118>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_OC1_SetConfig+0xc2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a17      	ldr	r2, [pc, #92]	; (8007310 <TIM_OC1_SetConfig+0x11c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d111      	bne.n	80072da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	621a      	str	r2, [r3, #32]
}
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40012c00 	.word	0x40012c00
 8007304:	40013400 	.word	0x40013400
 8007308:	40014000 	.word	0x40014000
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800

08007314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f023 0210 	bic.w	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0320 	bic.w	r3, r3, #32
 8007362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a28      	ldr	r2, [pc, #160]	; (8007414 <TIM_OC2_SetConfig+0x100>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_OC2_SetConfig+0x6c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a27      	ldr	r2, [pc, #156]	; (8007418 <TIM_OC2_SetConfig+0x104>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10d      	bne.n	800739c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <TIM_OC2_SetConfig+0x100>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00f      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <TIM_OC2_SetConfig+0x104>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00b      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a1b      	ldr	r2, [pc, #108]	; (800741c <TIM_OC2_SetConfig+0x108>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d007      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1a      	ldr	r2, [pc, #104]	; (8007420 <TIM_OC2_SetConfig+0x10c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_OC2_SetConfig+0xb0>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a19      	ldr	r2, [pc, #100]	; (8007424 <TIM_OC2_SetConfig+0x110>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d113      	bne.n	80073ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	621a      	str	r2, [r3, #32]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40013400 	.word	0x40013400
 800741c:	40014000 	.word	0x40014000
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800

08007428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a27      	ldr	r2, [pc, #156]	; (8007524 <TIM_OC3_SetConfig+0xfc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_OC3_SetConfig+0x6a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a26      	ldr	r2, [pc, #152]	; (8007528 <TIM_OC3_SetConfig+0x100>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10d      	bne.n	80074ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <TIM_OC3_SetConfig+0xfc>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00f      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <TIM_OC3_SetConfig+0x100>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1a      	ldr	r2, [pc, #104]	; (800752c <TIM_OC3_SetConfig+0x104>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a19      	ldr	r2, [pc, #100]	; (8007530 <TIM_OC3_SetConfig+0x108>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_OC3_SetConfig+0xae>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a18      	ldr	r2, [pc, #96]	; (8007534 <TIM_OC3_SetConfig+0x10c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d113      	bne.n	80074fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	40012c00 	.word	0x40012c00
 8007528:	40013400 	.word	0x40013400
 800752c:	40014000 	.word	0x40014000
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800

08007538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <TIM_OC4_SetConfig+0xc0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00f      	beq.n	80075bc <TIM_OC4_SetConfig+0x84>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a17      	ldr	r2, [pc, #92]	; (80075fc <TIM_OC4_SetConfig+0xc4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00b      	beq.n	80075bc <TIM_OC4_SetConfig+0x84>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a16      	ldr	r2, [pc, #88]	; (8007600 <TIM_OC4_SetConfig+0xc8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <TIM_OC4_SetConfig+0x84>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a15      	ldr	r2, [pc, #84]	; (8007604 <TIM_OC4_SetConfig+0xcc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC4_SetConfig+0x84>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a14      	ldr	r2, [pc, #80]	; (8007608 <TIM_OC4_SetConfig+0xd0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d109      	bne.n	80075d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	019b      	lsls	r3, r3, #6
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40012c00 	.word	0x40012c00
 80075fc:	40013400 	.word	0x40013400
 8007600:	40014000 	.word	0x40014000
 8007604:	40014400 	.word	0x40014400
 8007608:	40014800 	.word	0x40014800

0800760c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800763a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007650:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a17      	ldr	r2, [pc, #92]	; (80076c0 <TIM_OC5_SetConfig+0xb4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00f      	beq.n	8007686 <TIM_OC5_SetConfig+0x7a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <TIM_OC5_SetConfig+0xb8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00b      	beq.n	8007686 <TIM_OC5_SetConfig+0x7a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <TIM_OC5_SetConfig+0xbc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d007      	beq.n	8007686 <TIM_OC5_SetConfig+0x7a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a14      	ldr	r2, [pc, #80]	; (80076cc <TIM_OC5_SetConfig+0xc0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d003      	beq.n	8007686 <TIM_OC5_SetConfig+0x7a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <TIM_OC5_SetConfig+0xc4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d109      	bne.n	800769a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800768c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	621a      	str	r2, [r3, #32]
}
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40013400 	.word	0x40013400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800

080076d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800771a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	051b      	lsls	r3, r3, #20
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <TIM_OC6_SetConfig+0xb8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00f      	beq.n	8007750 <TIM_OC6_SetConfig+0x7c>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <TIM_OC6_SetConfig+0xbc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00b      	beq.n	8007750 <TIM_OC6_SetConfig+0x7c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a16      	ldr	r2, [pc, #88]	; (8007794 <TIM_OC6_SetConfig+0xc0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d007      	beq.n	8007750 <TIM_OC6_SetConfig+0x7c>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <TIM_OC6_SetConfig+0xc4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC6_SetConfig+0x7c>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <TIM_OC6_SetConfig+0xc8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d109      	bne.n	8007764 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	029b      	lsls	r3, r3, #10
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40013400 	.word	0x40013400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800

080077a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f023 0201 	bic.w	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 030a 	bic.w	r3, r3, #10
 80077dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077fe:	b480      	push	{r7}
 8007800:	b087      	sub	sp, #28
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	f023 0210 	bic.w	r2, r3, #16
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800783a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	f043 0307 	orr.w	r3, r3, #7
 8007880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	609a      	str	r2, [r3, #8]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	021a      	lsls	r2, r3, #8
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	431a      	orrs	r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	609a      	str	r2, [r3, #8]
}
 80078c8:	bf00      	nop
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 031f 	and.w	r3, r3, #31
 80078e6:	2201      	movs	r2, #1
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a1a      	ldr	r2, [r3, #32]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	43db      	mvns	r3, r3
 80078f6:	401a      	ands	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1a      	ldr	r2, [r3, #32]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	fa01 f303 	lsl.w	r3, r1, r3
 800790c:	431a      	orrs	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
	...

08007920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007934:	2302      	movs	r3, #2
 8007936:	e068      	b.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a2e      	ldr	r2, [pc, #184]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2d      	ldr	r2, [pc, #180]	; (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d108      	bne.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a1e      	ldr	r2, [pc, #120]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01d      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079aa:	d018      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d013      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00e      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d009      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d004      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a14      	ldr	r2, [pc, #80]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d10c      	bne.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	40012c00 	.word	0x40012c00
 8007a1c:	40013400 	.word	0x40013400
 8007a20:	40000400 	.word	0x40000400
 8007a24:	40000800 	.word	0x40000800
 8007a28:	40000c00 	.word	0x40000c00
 8007a2c:	40014000 	.word	0x40014000

08007a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e040      	b.n	8007b00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d106      	bne.n	8007a94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fb ff00 	bl	8003894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2224      	movs	r2, #36	; 0x24
 8007a98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0201 	bic.w	r2, r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f8c0 	bl	8007c30 <UART_SetConfig>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e022      	b.n	8007b00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fb6c 	bl	80081a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fbf3 	bl	80082e4 <UART_CheckIdleState>
 8007afe:	4603      	mov	r3, r0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	f040 8082 	bne.w	8007c26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <HAL_UART_Transmit+0x26>
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e07a      	b.n	8007c28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_UART_Transmit+0x38>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e073      	b.n	8007c28 <HAL_UART_Transmit+0x120>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2221      	movs	r2, #33	; 0x21
 8007b54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b56:	f7fb ffd1 	bl	8003afc <HAL_GetTick>
 8007b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	88fa      	ldrh	r2, [r7, #6]
 8007b60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	88fa      	ldrh	r2, [r7, #6]
 8007b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b74:	d108      	bne.n	8007b88 <HAL_UART_Transmit+0x80>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d104      	bne.n	8007b88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	e003      	b.n	8007b90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007b98:	e02d      	b.n	8007bf6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2180      	movs	r1, #128	; 0x80
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fbe6 	bl	8008376 <UART_WaitOnFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e039      	b.n	8007c28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	881a      	ldrh	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc6:	b292      	uxth	r2, r2
 8007bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	3302      	adds	r3, #2
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	e008      	b.n	8007be4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	b292      	uxth	r2, r2
 8007bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	3301      	adds	r3, #1
 8007be2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1cb      	bne.n	8007b9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2140      	movs	r1, #64	; 0x40
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fbb2 	bl	8008376 <UART_WaitOnFlagUntilTimeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e005      	b.n	8007c28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e000      	b.n	8007c28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007c26:	2302      	movs	r3, #2
  }
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3720      	adds	r7, #32
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c34:	b08a      	sub	sp, #40	; 0x28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4ba4      	ldr	r3, [pc, #656]	; (8007ef0 <UART_SetConfig+0x2c0>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a99      	ldr	r2, [pc, #612]	; (8007ef4 <UART_SetConfig+0x2c4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cac:	430a      	orrs	r2, r1
 8007cae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a90      	ldr	r2, [pc, #576]	; (8007ef8 <UART_SetConfig+0x2c8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d126      	bne.n	8007d08 <UART_SetConfig+0xd8>
 8007cba:	4b90      	ldr	r3, [pc, #576]	; (8007efc <UART_SetConfig+0x2cc>)
 8007cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d81b      	bhi.n	8007d00 <UART_SetConfig+0xd0>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <UART_SetConfig+0xa0>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007cf1 	.word	0x08007cf1
 8007cd8:	08007ce9 	.word	0x08007ce9
 8007cdc:	08007cf9 	.word	0x08007cf9
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce6:	e116      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cee:	e112      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf6:	e10e      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfe:	e10a      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007d00:	2310      	movs	r3, #16
 8007d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d06:	e106      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a7c      	ldr	r2, [pc, #496]	; (8007f00 <UART_SetConfig+0x2d0>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d138      	bne.n	8007d84 <UART_SetConfig+0x154>
 8007d12:	4b7a      	ldr	r3, [pc, #488]	; (8007efc <UART_SetConfig+0x2cc>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	f003 030c 	and.w	r3, r3, #12
 8007d1c:	2b0c      	cmp	r3, #12
 8007d1e:	d82d      	bhi.n	8007d7c <UART_SetConfig+0x14c>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0xf8>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d5d 	.word	0x08007d5d
 8007d2c:	08007d7d 	.word	0x08007d7d
 8007d30:	08007d7d 	.word	0x08007d7d
 8007d34:	08007d7d 	.word	0x08007d7d
 8007d38:	08007d6d 	.word	0x08007d6d
 8007d3c:	08007d7d 	.word	0x08007d7d
 8007d40:	08007d7d 	.word	0x08007d7d
 8007d44:	08007d7d 	.word	0x08007d7d
 8007d48:	08007d65 	.word	0x08007d65
 8007d4c:	08007d7d 	.word	0x08007d7d
 8007d50:	08007d7d 	.word	0x08007d7d
 8007d54:	08007d7d 	.word	0x08007d7d
 8007d58:	08007d75 	.word	0x08007d75
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d62:	e0d8      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007d64:	2302      	movs	r3, #2
 8007d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6a:	e0d4      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d72:	e0d0      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007d74:	2308      	movs	r3, #8
 8007d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d7a:	e0cc      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d82:	e0c8      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a5e      	ldr	r2, [pc, #376]	; (8007f04 <UART_SetConfig+0x2d4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d125      	bne.n	8007dda <UART_SetConfig+0x1aa>
 8007d8e:	4b5b      	ldr	r3, [pc, #364]	; (8007efc <UART_SetConfig+0x2cc>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	d016      	beq.n	8007dca <UART_SetConfig+0x19a>
 8007d9c:	2b30      	cmp	r3, #48	; 0x30
 8007d9e:	d818      	bhi.n	8007dd2 <UART_SetConfig+0x1a2>
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d00a      	beq.n	8007dba <UART_SetConfig+0x18a>
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d814      	bhi.n	8007dd2 <UART_SetConfig+0x1a2>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <UART_SetConfig+0x182>
 8007dac:	2b10      	cmp	r3, #16
 8007dae:	d008      	beq.n	8007dc2 <UART_SetConfig+0x192>
 8007db0:	e00f      	b.n	8007dd2 <UART_SetConfig+0x1a2>
 8007db2:	2300      	movs	r3, #0
 8007db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db8:	e0ad      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc0:	e0a9      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007dc2:	2304      	movs	r3, #4
 8007dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc8:	e0a5      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007dca:	2308      	movs	r3, #8
 8007dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd0:	e0a1      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd8:	e09d      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a4a      	ldr	r2, [pc, #296]	; (8007f08 <UART_SetConfig+0x2d8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d125      	bne.n	8007e30 <UART_SetConfig+0x200>
 8007de4:	4b45      	ldr	r3, [pc, #276]	; (8007efc <UART_SetConfig+0x2cc>)
 8007de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007dee:	2bc0      	cmp	r3, #192	; 0xc0
 8007df0:	d016      	beq.n	8007e20 <UART_SetConfig+0x1f0>
 8007df2:	2bc0      	cmp	r3, #192	; 0xc0
 8007df4:	d818      	bhi.n	8007e28 <UART_SetConfig+0x1f8>
 8007df6:	2b80      	cmp	r3, #128	; 0x80
 8007df8:	d00a      	beq.n	8007e10 <UART_SetConfig+0x1e0>
 8007dfa:	2b80      	cmp	r3, #128	; 0x80
 8007dfc:	d814      	bhi.n	8007e28 <UART_SetConfig+0x1f8>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <UART_SetConfig+0x1d8>
 8007e02:	2b40      	cmp	r3, #64	; 0x40
 8007e04:	d008      	beq.n	8007e18 <UART_SetConfig+0x1e8>
 8007e06:	e00f      	b.n	8007e28 <UART_SetConfig+0x1f8>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e0e:	e082      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e10:	2302      	movs	r3, #2
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e16:	e07e      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e18:	2304      	movs	r3, #4
 8007e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e1e:	e07a      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e20:	2308      	movs	r3, #8
 8007e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e26:	e076      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e28:	2310      	movs	r3, #16
 8007e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2e:	e072      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a35      	ldr	r2, [pc, #212]	; (8007f0c <UART_SetConfig+0x2dc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d12a      	bne.n	8007e90 <UART_SetConfig+0x260>
 8007e3a:	4b30      	ldr	r3, [pc, #192]	; (8007efc <UART_SetConfig+0x2cc>)
 8007e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e48:	d01a      	beq.n	8007e80 <UART_SetConfig+0x250>
 8007e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e4e:	d81b      	bhi.n	8007e88 <UART_SetConfig+0x258>
 8007e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e54:	d00c      	beq.n	8007e70 <UART_SetConfig+0x240>
 8007e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5a:	d815      	bhi.n	8007e88 <UART_SetConfig+0x258>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <UART_SetConfig+0x238>
 8007e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e64:	d008      	beq.n	8007e78 <UART_SetConfig+0x248>
 8007e66:	e00f      	b.n	8007e88 <UART_SetConfig+0x258>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e6e:	e052      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e70:	2302      	movs	r3, #2
 8007e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e76:	e04e      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e78:	2304      	movs	r3, #4
 8007e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e7e:	e04a      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e80:	2308      	movs	r3, #8
 8007e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e86:	e046      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e88:	2310      	movs	r3, #16
 8007e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e8e:	e042      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a17      	ldr	r2, [pc, #92]	; (8007ef4 <UART_SetConfig+0x2c4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d13a      	bne.n	8007f10 <UART_SetConfig+0x2e0>
 8007e9a:	4b18      	ldr	r3, [pc, #96]	; (8007efc <UART_SetConfig+0x2cc>)
 8007e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ea8:	d01a      	beq.n	8007ee0 <UART_SetConfig+0x2b0>
 8007eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007eae:	d81b      	bhi.n	8007ee8 <UART_SetConfig+0x2b8>
 8007eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb4:	d00c      	beq.n	8007ed0 <UART_SetConfig+0x2a0>
 8007eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eba:	d815      	bhi.n	8007ee8 <UART_SetConfig+0x2b8>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <UART_SetConfig+0x298>
 8007ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec4:	d008      	beq.n	8007ed8 <UART_SetConfig+0x2a8>
 8007ec6:	e00f      	b.n	8007ee8 <UART_SetConfig+0x2b8>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ece:	e022      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ed6:	e01e      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ede:	e01a      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ee6:	e016      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eee:	e012      	b.n	8007f16 <UART_SetConfig+0x2e6>
 8007ef0:	efff69f3 	.word	0xefff69f3
 8007ef4:	40008000 	.word	0x40008000
 8007ef8:	40013800 	.word	0x40013800
 8007efc:	40021000 	.word	0x40021000
 8007f00:	40004400 	.word	0x40004400
 8007f04:	40004800 	.word	0x40004800
 8007f08:	40004c00 	.word	0x40004c00
 8007f0c:	40005000 	.word	0x40005000
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a9f      	ldr	r2, [pc, #636]	; (8008198 <UART_SetConfig+0x568>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d17a      	bne.n	8008016 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d824      	bhi.n	8007f72 <UART_SetConfig+0x342>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0x300>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f73 	.word	0x08007f73
 8007f38:	08007f5d 	.word	0x08007f5d
 8007f3c:	08007f73 	.word	0x08007f73
 8007f40:	08007f63 	.word	0x08007f63
 8007f44:	08007f73 	.word	0x08007f73
 8007f48:	08007f73 	.word	0x08007f73
 8007f4c:	08007f73 	.word	0x08007f73
 8007f50:	08007f6b 	.word	0x08007f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f54:	f7fd fde4 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 8007f58:	61f8      	str	r0, [r7, #28]
        break;
 8007f5a:	e010      	b.n	8007f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f5c:	4b8f      	ldr	r3, [pc, #572]	; (800819c <UART_SetConfig+0x56c>)
 8007f5e:	61fb      	str	r3, [r7, #28]
        break;
 8007f60:	e00d      	b.n	8007f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f62:	f7fd fd45 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8007f66:	61f8      	str	r0, [r7, #28]
        break;
 8007f68:	e009      	b.n	8007f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f6e:	61fb      	str	r3, [r7, #28]
        break;
 8007f70:	e005      	b.n	8007f7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80fb 	beq.w	800817c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	4413      	add	r3, r2
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d305      	bcc.n	8007fa2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d903      	bls.n	8007faa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fa8:	e0e8      	b.n	800817c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	2200      	movs	r2, #0
 8007fae:	461c      	mov	r4, r3
 8007fb0:	4615      	mov	r5, r2
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	022b      	lsls	r3, r5, #8
 8007fbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007fc0:	0222      	lsls	r2, r4, #8
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	6849      	ldr	r1, [r1, #4]
 8007fc6:	0849      	lsrs	r1, r1, #1
 8007fc8:	2000      	movs	r0, #0
 8007fca:	4688      	mov	r8, r1
 8007fcc:	4681      	mov	r9, r0
 8007fce:	eb12 0a08 	adds.w	sl, r2, r8
 8007fd2:	eb43 0b09 	adc.w	fp, r3, r9
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	603b      	str	r3, [r7, #0]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	f7f8 fe2e 	bl	8000c48 <__aeabi_uldivmod>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ffa:	d308      	bcc.n	800800e <UART_SetConfig+0x3de>
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008002:	d204      	bcs.n	800800e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	60da      	str	r2, [r3, #12]
 800800c:	e0b6      	b.n	800817c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008014:	e0b2      	b.n	800817c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800801e:	d15e      	bne.n	80080de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008024:	2b08      	cmp	r3, #8
 8008026:	d828      	bhi.n	800807a <UART_SetConfig+0x44a>
 8008028:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <UART_SetConfig+0x400>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	08008055 	.word	0x08008055
 8008034:	0800805d 	.word	0x0800805d
 8008038:	08008065 	.word	0x08008065
 800803c:	0800807b 	.word	0x0800807b
 8008040:	0800806b 	.word	0x0800806b
 8008044:	0800807b 	.word	0x0800807b
 8008048:	0800807b 	.word	0x0800807b
 800804c:	0800807b 	.word	0x0800807b
 8008050:	08008073 	.word	0x08008073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008054:	f7fd fd64 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 8008058:	61f8      	str	r0, [r7, #28]
        break;
 800805a:	e014      	b.n	8008086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800805c:	f7fd fd76 	bl	8005b4c <HAL_RCC_GetPCLK2Freq>
 8008060:	61f8      	str	r0, [r7, #28]
        break;
 8008062:	e010      	b.n	8008086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008064:	4b4d      	ldr	r3, [pc, #308]	; (800819c <UART_SetConfig+0x56c>)
 8008066:	61fb      	str	r3, [r7, #28]
        break;
 8008068:	e00d      	b.n	8008086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800806a:	f7fd fcc1 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 800806e:	61f8      	str	r0, [r7, #28]
        break;
 8008070:	e009      	b.n	8008086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008076:	61fb      	str	r3, [r7, #28]
        break;
 8008078:	e005      	b.n	8008086 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d077      	beq.n	800817c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	005a      	lsls	r2, r3, #1
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	441a      	add	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b0f      	cmp	r3, #15
 80080a6:	d916      	bls.n	80080d6 <UART_SetConfig+0x4a6>
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ae:	d212      	bcs.n	80080d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f023 030f 	bic.w	r3, r3, #15
 80080b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	085b      	lsrs	r3, r3, #1
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	8afb      	ldrh	r3, [r7, #22]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	8afa      	ldrh	r2, [r7, #22]
 80080d2:	60da      	str	r2, [r3, #12]
 80080d4:	e052      	b.n	800817c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080dc:	e04e      	b.n	800817c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d827      	bhi.n	8008136 <UART_SetConfig+0x506>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x4bc>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008111 	.word	0x08008111
 80080f0:	08008119 	.word	0x08008119
 80080f4:	08008121 	.word	0x08008121
 80080f8:	08008137 	.word	0x08008137
 80080fc:	08008127 	.word	0x08008127
 8008100:	08008137 	.word	0x08008137
 8008104:	08008137 	.word	0x08008137
 8008108:	08008137 	.word	0x08008137
 800810c:	0800812f 	.word	0x0800812f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008110:	f7fd fd06 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 8008114:	61f8      	str	r0, [r7, #28]
        break;
 8008116:	e014      	b.n	8008142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008118:	f7fd fd18 	bl	8005b4c <HAL_RCC_GetPCLK2Freq>
 800811c:	61f8      	str	r0, [r7, #28]
        break;
 800811e:	e010      	b.n	8008142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008120:	4b1e      	ldr	r3, [pc, #120]	; (800819c <UART_SetConfig+0x56c>)
 8008122:	61fb      	str	r3, [r7, #28]
        break;
 8008124:	e00d      	b.n	8008142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008126:	f7fd fc63 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 800812a:	61f8      	str	r0, [r7, #28]
        break;
 800812c:	e009      	b.n	8008142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008132:	61fb      	str	r3, [r7, #28]
        break;
 8008134:	e005      	b.n	8008142 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008140:	bf00      	nop
    }

    if (pclk != 0U)
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d019      	beq.n	800817c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	085a      	lsrs	r2, r3, #1
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	fbb2 f3f3 	udiv	r3, r2, r3
 800815a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	2b0f      	cmp	r3, #15
 8008160:	d909      	bls.n	8008176 <UART_SetConfig+0x546>
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008168:	d205      	bcs.n	8008176 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60da      	str	r2, [r3, #12]
 8008174:	e002      	b.n	800817c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008188:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800818c:	4618      	mov	r0, r3
 800818e:	3728      	adds	r7, #40	; 0x28
 8008190:	46bd      	mov	sp, r7
 8008192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008196:	bf00      	nop
 8008198:	40008000 	.word	0x40008000
 800819c:	00f42400 	.word	0x00f42400

080081a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00a      	beq.n	800820e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01a      	beq.n	80082b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800829e:	d10a      	bne.n	80082b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	605a      	str	r2, [r3, #4]
  }
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082f4:	f7fb fc02 	bl	8003afc <HAL_GetTick>
 80082f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b08      	cmp	r3, #8
 8008306:	d10e      	bne.n	8008326 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f82d 	bl	8008376 <UART_WaitOnFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e023      	b.n	800836e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b04      	cmp	r3, #4
 8008332:	d10e      	bne.n	8008352 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f817 	bl	8008376 <UART_WaitOnFlagUntilTimeout>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e00d      	b.n	800836e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2220      	movs	r2, #32
 8008356:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b09c      	sub	sp, #112	; 0x70
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008386:	e0a5      	b.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	f000 80a1 	beq.w	80084d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008392:	f7fb fbb3 	bl	8003afc <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800839e:	429a      	cmp	r2, r3
 80083a0:	d302      	bcc.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80083a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d13e      	bne.n	8008426 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083bc:	667b      	str	r3, [r7, #100]	; 0x64
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e6      	bne.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	f023 0301 	bic.w	r3, r3, #1
 80083f0:	663b      	str	r3, [r7, #96]	; 0x60
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3308      	adds	r3, #8
 80083f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80083fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e5      	bne.n	80083da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2220      	movs	r2, #32
 8008412:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e067      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b00      	cmp	r3, #0
 8008432:	d04f      	beq.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800843e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008442:	d147      	bne.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800844c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846c:	637b      	str	r3, [r7, #52]	; 0x34
 800846e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008474:	e841 2300 	strex	r3, r2, [r1]
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e6      	bne.n	800844e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	613b      	str	r3, [r7, #16]
   return(result);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f023 0301 	bic.w	r3, r3, #1
 8008496:	66bb      	str	r3, [r7, #104]	; 0x68
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084a0:	623a      	str	r2, [r7, #32]
 80084a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	69f9      	ldr	r1, [r7, #28]
 80084a6:	6a3a      	ldr	r2, [r7, #32]
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e5      	bne.n	8008480 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2220      	movs	r2, #32
 80084b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2220      	movs	r2, #32
 80084be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e010      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	f43f af4a 	beq.w	8008388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3770      	adds	r7, #112	; 0x70
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <__errno>:
 8008500:	4b01      	ldr	r3, [pc, #4]	; (8008508 <__errno+0x8>)
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20000010 	.word	0x20000010

0800850c <__libc_init_array>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4d0d      	ldr	r5, [pc, #52]	; (8008544 <__libc_init_array+0x38>)
 8008510:	4c0d      	ldr	r4, [pc, #52]	; (8008548 <__libc_init_array+0x3c>)
 8008512:	1b64      	subs	r4, r4, r5
 8008514:	10a4      	asrs	r4, r4, #2
 8008516:	2600      	movs	r6, #0
 8008518:	42a6      	cmp	r6, r4
 800851a:	d109      	bne.n	8008530 <__libc_init_array+0x24>
 800851c:	4d0b      	ldr	r5, [pc, #44]	; (800854c <__libc_init_array+0x40>)
 800851e:	4c0c      	ldr	r4, [pc, #48]	; (8008550 <__libc_init_array+0x44>)
 8008520:	f004 f904 	bl	800c72c <_init>
 8008524:	1b64      	subs	r4, r4, r5
 8008526:	10a4      	asrs	r4, r4, #2
 8008528:	2600      	movs	r6, #0
 800852a:	42a6      	cmp	r6, r4
 800852c:	d105      	bne.n	800853a <__libc_init_array+0x2e>
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	f855 3b04 	ldr.w	r3, [r5], #4
 8008534:	4798      	blx	r3
 8008536:	3601      	adds	r6, #1
 8008538:	e7ee      	b.n	8008518 <__libc_init_array+0xc>
 800853a:	f855 3b04 	ldr.w	r3, [r5], #4
 800853e:	4798      	blx	r3
 8008540:	3601      	adds	r6, #1
 8008542:	e7f2      	b.n	800852a <__libc_init_array+0x1e>
 8008544:	0800cfec 	.word	0x0800cfec
 8008548:	0800cfec 	.word	0x0800cfec
 800854c:	0800cfec 	.word	0x0800cfec
 8008550:	0800cff0 	.word	0x0800cff0

08008554 <memset>:
 8008554:	4402      	add	r2, r0
 8008556:	4603      	mov	r3, r0
 8008558:	4293      	cmp	r3, r2
 800855a:	d100      	bne.n	800855e <memset+0xa>
 800855c:	4770      	bx	lr
 800855e:	f803 1b01 	strb.w	r1, [r3], #1
 8008562:	e7f9      	b.n	8008558 <memset+0x4>

08008564 <__cvt>:
 8008564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	ec55 4b10 	vmov	r4, r5, d0
 800856c:	2d00      	cmp	r5, #0
 800856e:	460e      	mov	r6, r1
 8008570:	4619      	mov	r1, r3
 8008572:	462b      	mov	r3, r5
 8008574:	bfbb      	ittet	lt
 8008576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800857a:	461d      	movlt	r5, r3
 800857c:	2300      	movge	r3, #0
 800857e:	232d      	movlt	r3, #45	; 0x2d
 8008580:	700b      	strb	r3, [r1, #0]
 8008582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008584:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008588:	4691      	mov	r9, r2
 800858a:	f023 0820 	bic.w	r8, r3, #32
 800858e:	bfbc      	itt	lt
 8008590:	4622      	movlt	r2, r4
 8008592:	4614      	movlt	r4, r2
 8008594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008598:	d005      	beq.n	80085a6 <__cvt+0x42>
 800859a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800859e:	d100      	bne.n	80085a2 <__cvt+0x3e>
 80085a0:	3601      	adds	r6, #1
 80085a2:	2102      	movs	r1, #2
 80085a4:	e000      	b.n	80085a8 <__cvt+0x44>
 80085a6:	2103      	movs	r1, #3
 80085a8:	ab03      	add	r3, sp, #12
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	ab02      	add	r3, sp, #8
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	ec45 4b10 	vmov	d0, r4, r5
 80085b4:	4653      	mov	r3, sl
 80085b6:	4632      	mov	r2, r6
 80085b8:	f000 fe1a 	bl	80091f0 <_dtoa_r>
 80085bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085c0:	4607      	mov	r7, r0
 80085c2:	d102      	bne.n	80085ca <__cvt+0x66>
 80085c4:	f019 0f01 	tst.w	r9, #1
 80085c8:	d022      	beq.n	8008610 <__cvt+0xac>
 80085ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085ce:	eb07 0906 	add.w	r9, r7, r6
 80085d2:	d110      	bne.n	80085f6 <__cvt+0x92>
 80085d4:	783b      	ldrb	r3, [r7, #0]
 80085d6:	2b30      	cmp	r3, #48	; 0x30
 80085d8:	d10a      	bne.n	80085f0 <__cvt+0x8c>
 80085da:	2200      	movs	r2, #0
 80085dc:	2300      	movs	r3, #0
 80085de:	4620      	mov	r0, r4
 80085e0:	4629      	mov	r1, r5
 80085e2:	f7f8 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80085e6:	b918      	cbnz	r0, 80085f0 <__cvt+0x8c>
 80085e8:	f1c6 0601 	rsb	r6, r6, #1
 80085ec:	f8ca 6000 	str.w	r6, [sl]
 80085f0:	f8da 3000 	ldr.w	r3, [sl]
 80085f4:	4499      	add	r9, r3
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f8 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008602:	b108      	cbz	r0, 8008608 <__cvt+0xa4>
 8008604:	f8cd 900c 	str.w	r9, [sp, #12]
 8008608:	2230      	movs	r2, #48	; 0x30
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	454b      	cmp	r3, r9
 800860e:	d307      	bcc.n	8008620 <__cvt+0xbc>
 8008610:	9b03      	ldr	r3, [sp, #12]
 8008612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008614:	1bdb      	subs	r3, r3, r7
 8008616:	4638      	mov	r0, r7
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	b004      	add	sp, #16
 800861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008620:	1c59      	adds	r1, r3, #1
 8008622:	9103      	str	r1, [sp, #12]
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	e7f0      	b.n	800860a <__cvt+0xa6>

08008628 <__exponent>:
 8008628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862a:	4603      	mov	r3, r0
 800862c:	2900      	cmp	r1, #0
 800862e:	bfb8      	it	lt
 8008630:	4249      	neglt	r1, r1
 8008632:	f803 2b02 	strb.w	r2, [r3], #2
 8008636:	bfb4      	ite	lt
 8008638:	222d      	movlt	r2, #45	; 0x2d
 800863a:	222b      	movge	r2, #43	; 0x2b
 800863c:	2909      	cmp	r1, #9
 800863e:	7042      	strb	r2, [r0, #1]
 8008640:	dd2a      	ble.n	8008698 <__exponent+0x70>
 8008642:	f10d 0407 	add.w	r4, sp, #7
 8008646:	46a4      	mov	ip, r4
 8008648:	270a      	movs	r7, #10
 800864a:	46a6      	mov	lr, r4
 800864c:	460a      	mov	r2, r1
 800864e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008652:	fb07 1516 	mls	r5, r7, r6, r1
 8008656:	3530      	adds	r5, #48	; 0x30
 8008658:	2a63      	cmp	r2, #99	; 0x63
 800865a:	f104 34ff 	add.w	r4, r4, #4294967295
 800865e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008662:	4631      	mov	r1, r6
 8008664:	dcf1      	bgt.n	800864a <__exponent+0x22>
 8008666:	3130      	adds	r1, #48	; 0x30
 8008668:	f1ae 0502 	sub.w	r5, lr, #2
 800866c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008670:	1c44      	adds	r4, r0, #1
 8008672:	4629      	mov	r1, r5
 8008674:	4561      	cmp	r1, ip
 8008676:	d30a      	bcc.n	800868e <__exponent+0x66>
 8008678:	f10d 0209 	add.w	r2, sp, #9
 800867c:	eba2 020e 	sub.w	r2, r2, lr
 8008680:	4565      	cmp	r5, ip
 8008682:	bf88      	it	hi
 8008684:	2200      	movhi	r2, #0
 8008686:	4413      	add	r3, r2
 8008688:	1a18      	subs	r0, r3, r0
 800868a:	b003      	add	sp, #12
 800868c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800868e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008692:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008696:	e7ed      	b.n	8008674 <__exponent+0x4c>
 8008698:	2330      	movs	r3, #48	; 0x30
 800869a:	3130      	adds	r1, #48	; 0x30
 800869c:	7083      	strb	r3, [r0, #2]
 800869e:	70c1      	strb	r1, [r0, #3]
 80086a0:	1d03      	adds	r3, r0, #4
 80086a2:	e7f1      	b.n	8008688 <__exponent+0x60>

080086a4 <_printf_float>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	ed2d 8b02 	vpush	{d8}
 80086ac:	b08d      	sub	sp, #52	; 0x34
 80086ae:	460c      	mov	r4, r1
 80086b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086b4:	4616      	mov	r6, r2
 80086b6:	461f      	mov	r7, r3
 80086b8:	4605      	mov	r5, r0
 80086ba:	f001 fd3f 	bl	800a13c <_localeconv_r>
 80086be:	f8d0 a000 	ldr.w	sl, [r0]
 80086c2:	4650      	mov	r0, sl
 80086c4:	f7f7 fd84 	bl	80001d0 <strlen>
 80086c8:	2300      	movs	r3, #0
 80086ca:	930a      	str	r3, [sp, #40]	; 0x28
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	9305      	str	r3, [sp, #20]
 80086d0:	f8d8 3000 	ldr.w	r3, [r8]
 80086d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086d8:	3307      	adds	r3, #7
 80086da:	f023 0307 	bic.w	r3, r3, #7
 80086de:	f103 0208 	add.w	r2, r3, #8
 80086e2:	f8c8 2000 	str.w	r2, [r8]
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086f6:	9307      	str	r3, [sp, #28]
 80086f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80086fc:	ee08 0a10 	vmov	s16, r0
 8008700:	4b9f      	ldr	r3, [pc, #636]	; (8008980 <_printf_float+0x2dc>)
 8008702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	f7f8 fa0f 	bl	8000b2c <__aeabi_dcmpun>
 800870e:	bb88      	cbnz	r0, 8008774 <_printf_float+0xd0>
 8008710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008714:	4b9a      	ldr	r3, [pc, #616]	; (8008980 <_printf_float+0x2dc>)
 8008716:	f04f 32ff 	mov.w	r2, #4294967295
 800871a:	f7f8 f9e9 	bl	8000af0 <__aeabi_dcmple>
 800871e:	bb48      	cbnz	r0, 8008774 <_printf_float+0xd0>
 8008720:	2200      	movs	r2, #0
 8008722:	2300      	movs	r3, #0
 8008724:	4640      	mov	r0, r8
 8008726:	4649      	mov	r1, r9
 8008728:	f7f8 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800872c:	b110      	cbz	r0, 8008734 <_printf_float+0x90>
 800872e:	232d      	movs	r3, #45	; 0x2d
 8008730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008734:	4b93      	ldr	r3, [pc, #588]	; (8008984 <_printf_float+0x2e0>)
 8008736:	4894      	ldr	r0, [pc, #592]	; (8008988 <_printf_float+0x2e4>)
 8008738:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800873c:	bf94      	ite	ls
 800873e:	4698      	movls	r8, r3
 8008740:	4680      	movhi	r8, r0
 8008742:	2303      	movs	r3, #3
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	9b05      	ldr	r3, [sp, #20]
 8008748:	f023 0204 	bic.w	r2, r3, #4
 800874c:	6022      	str	r2, [r4, #0]
 800874e:	f04f 0900 	mov.w	r9, #0
 8008752:	9700      	str	r7, [sp, #0]
 8008754:	4633      	mov	r3, r6
 8008756:	aa0b      	add	r2, sp, #44	; 0x2c
 8008758:	4621      	mov	r1, r4
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f9d8 	bl	8008b10 <_printf_common>
 8008760:	3001      	adds	r0, #1
 8008762:	f040 8090 	bne.w	8008886 <_printf_float+0x1e2>
 8008766:	f04f 30ff 	mov.w	r0, #4294967295
 800876a:	b00d      	add	sp, #52	; 0x34
 800876c:	ecbd 8b02 	vpop	{d8}
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	4642      	mov	r2, r8
 8008776:	464b      	mov	r3, r9
 8008778:	4640      	mov	r0, r8
 800877a:	4649      	mov	r1, r9
 800877c:	f7f8 f9d6 	bl	8000b2c <__aeabi_dcmpun>
 8008780:	b140      	cbz	r0, 8008794 <_printf_float+0xf0>
 8008782:	464b      	mov	r3, r9
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfbc      	itt	lt
 8008788:	232d      	movlt	r3, #45	; 0x2d
 800878a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800878e:	487f      	ldr	r0, [pc, #508]	; (800898c <_printf_float+0x2e8>)
 8008790:	4b7f      	ldr	r3, [pc, #508]	; (8008990 <_printf_float+0x2ec>)
 8008792:	e7d1      	b.n	8008738 <_printf_float+0x94>
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800879a:	9206      	str	r2, [sp, #24]
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	d13f      	bne.n	8008820 <_printf_float+0x17c>
 80087a0:	2306      	movs	r3, #6
 80087a2:	6063      	str	r3, [r4, #4]
 80087a4:	9b05      	ldr	r3, [sp, #20]
 80087a6:	6861      	ldr	r1, [r4, #4]
 80087a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087ac:	2300      	movs	r3, #0
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	ab0a      	add	r3, sp, #40	; 0x28
 80087b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087b6:	ab09      	add	r3, sp, #36	; 0x24
 80087b8:	ec49 8b10 	vmov	d0, r8, r9
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087c4:	4628      	mov	r0, r5
 80087c6:	f7ff fecd 	bl	8008564 <__cvt>
 80087ca:	9b06      	ldr	r3, [sp, #24]
 80087cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ce:	2b47      	cmp	r3, #71	; 0x47
 80087d0:	4680      	mov	r8, r0
 80087d2:	d108      	bne.n	80087e6 <_printf_float+0x142>
 80087d4:	1cc8      	adds	r0, r1, #3
 80087d6:	db02      	blt.n	80087de <_printf_float+0x13a>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	4299      	cmp	r1, r3
 80087dc:	dd41      	ble.n	8008862 <_printf_float+0x1be>
 80087de:	f1ab 0b02 	sub.w	fp, fp, #2
 80087e2:	fa5f fb8b 	uxtb.w	fp, fp
 80087e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087ea:	d820      	bhi.n	800882e <_printf_float+0x18a>
 80087ec:	3901      	subs	r1, #1
 80087ee:	465a      	mov	r2, fp
 80087f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087f4:	9109      	str	r1, [sp, #36]	; 0x24
 80087f6:	f7ff ff17 	bl	8008628 <__exponent>
 80087fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087fc:	1813      	adds	r3, r2, r0
 80087fe:	2a01      	cmp	r2, #1
 8008800:	4681      	mov	r9, r0
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	dc02      	bgt.n	800880c <_printf_float+0x168>
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	07d2      	lsls	r2, r2, #31
 800880a:	d501      	bpl.n	8008810 <_printf_float+0x16c>
 800880c:	3301      	adds	r3, #1
 800880e:	6123      	str	r3, [r4, #16]
 8008810:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008814:	2b00      	cmp	r3, #0
 8008816:	d09c      	beq.n	8008752 <_printf_float+0xae>
 8008818:	232d      	movs	r3, #45	; 0x2d
 800881a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881e:	e798      	b.n	8008752 <_printf_float+0xae>
 8008820:	9a06      	ldr	r2, [sp, #24]
 8008822:	2a47      	cmp	r2, #71	; 0x47
 8008824:	d1be      	bne.n	80087a4 <_printf_float+0x100>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1bc      	bne.n	80087a4 <_printf_float+0x100>
 800882a:	2301      	movs	r3, #1
 800882c:	e7b9      	b.n	80087a2 <_printf_float+0xfe>
 800882e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008832:	d118      	bne.n	8008866 <_printf_float+0x1c2>
 8008834:	2900      	cmp	r1, #0
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	dd0b      	ble.n	8008852 <_printf_float+0x1ae>
 800883a:	6121      	str	r1, [r4, #16]
 800883c:	b913      	cbnz	r3, 8008844 <_printf_float+0x1a0>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	07d0      	lsls	r0, r2, #31
 8008842:	d502      	bpl.n	800884a <_printf_float+0x1a6>
 8008844:	3301      	adds	r3, #1
 8008846:	440b      	add	r3, r1
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	65a1      	str	r1, [r4, #88]	; 0x58
 800884c:	f04f 0900 	mov.w	r9, #0
 8008850:	e7de      	b.n	8008810 <_printf_float+0x16c>
 8008852:	b913      	cbnz	r3, 800885a <_printf_float+0x1b6>
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	07d2      	lsls	r2, r2, #31
 8008858:	d501      	bpl.n	800885e <_printf_float+0x1ba>
 800885a:	3302      	adds	r3, #2
 800885c:	e7f4      	b.n	8008848 <_printf_float+0x1a4>
 800885e:	2301      	movs	r3, #1
 8008860:	e7f2      	b.n	8008848 <_printf_float+0x1a4>
 8008862:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008868:	4299      	cmp	r1, r3
 800886a:	db05      	blt.n	8008878 <_printf_float+0x1d4>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	6121      	str	r1, [r4, #16]
 8008870:	07d8      	lsls	r0, r3, #31
 8008872:	d5ea      	bpl.n	800884a <_printf_float+0x1a6>
 8008874:	1c4b      	adds	r3, r1, #1
 8008876:	e7e7      	b.n	8008848 <_printf_float+0x1a4>
 8008878:	2900      	cmp	r1, #0
 800887a:	bfd4      	ite	le
 800887c:	f1c1 0202 	rsble	r2, r1, #2
 8008880:	2201      	movgt	r2, #1
 8008882:	4413      	add	r3, r2
 8008884:	e7e0      	b.n	8008848 <_printf_float+0x1a4>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	055a      	lsls	r2, r3, #21
 800888a:	d407      	bmi.n	800889c <_printf_float+0x1f8>
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	4642      	mov	r2, r8
 8008890:	4631      	mov	r1, r6
 8008892:	4628      	mov	r0, r5
 8008894:	47b8      	blx	r7
 8008896:	3001      	adds	r0, #1
 8008898:	d12c      	bne.n	80088f4 <_printf_float+0x250>
 800889a:	e764      	b.n	8008766 <_printf_float+0xc2>
 800889c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088a0:	f240 80e0 	bls.w	8008a64 <_printf_float+0x3c0>
 80088a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088a8:	2200      	movs	r2, #0
 80088aa:	2300      	movs	r3, #0
 80088ac:	f7f8 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d034      	beq.n	800891e <_printf_float+0x27a>
 80088b4:	4a37      	ldr	r2, [pc, #220]	; (8008994 <_printf_float+0x2f0>)
 80088b6:	2301      	movs	r3, #1
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af51 	beq.w	8008766 <_printf_float+0xc2>
 80088c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c8:	429a      	cmp	r2, r3
 80088ca:	db02      	blt.n	80088d2 <_printf_float+0x22e>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	07d8      	lsls	r0, r3, #31
 80088d0:	d510      	bpl.n	80088f4 <_printf_float+0x250>
 80088d2:	ee18 3a10 	vmov	r3, s16
 80088d6:	4652      	mov	r2, sl
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f af41 	beq.w	8008766 <_printf_float+0xc2>
 80088e4:	f04f 0800 	mov.w	r8, #0
 80088e8:	f104 091a 	add.w	r9, r4, #26
 80088ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ee:	3b01      	subs	r3, #1
 80088f0:	4543      	cmp	r3, r8
 80088f2:	dc09      	bgt.n	8008908 <_printf_float+0x264>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	079b      	lsls	r3, r3, #30
 80088f8:	f100 8105 	bmi.w	8008b06 <_printf_float+0x462>
 80088fc:	68e0      	ldr	r0, [r4, #12]
 80088fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008900:	4298      	cmp	r0, r3
 8008902:	bfb8      	it	lt
 8008904:	4618      	movlt	r0, r3
 8008906:	e730      	b.n	800876a <_printf_float+0xc6>
 8008908:	2301      	movs	r3, #1
 800890a:	464a      	mov	r2, r9
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f af27 	beq.w	8008766 <_printf_float+0xc2>
 8008918:	f108 0801 	add.w	r8, r8, #1
 800891c:	e7e6      	b.n	80088ec <_printf_float+0x248>
 800891e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	dc39      	bgt.n	8008998 <_printf_float+0x2f4>
 8008924:	4a1b      	ldr	r2, [pc, #108]	; (8008994 <_printf_float+0x2f0>)
 8008926:	2301      	movs	r3, #1
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af19 	beq.w	8008766 <_printf_float+0xc2>
 8008934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008938:	4313      	orrs	r3, r2
 800893a:	d102      	bne.n	8008942 <_printf_float+0x29e>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	d5d8      	bpl.n	80088f4 <_printf_float+0x250>
 8008942:	ee18 3a10 	vmov	r3, s16
 8008946:	4652      	mov	r2, sl
 8008948:	4631      	mov	r1, r6
 800894a:	4628      	mov	r0, r5
 800894c:	47b8      	blx	r7
 800894e:	3001      	adds	r0, #1
 8008950:	f43f af09 	beq.w	8008766 <_printf_float+0xc2>
 8008954:	f04f 0900 	mov.w	r9, #0
 8008958:	f104 0a1a 	add.w	sl, r4, #26
 800895c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895e:	425b      	negs	r3, r3
 8008960:	454b      	cmp	r3, r9
 8008962:	dc01      	bgt.n	8008968 <_printf_float+0x2c4>
 8008964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008966:	e792      	b.n	800888e <_printf_float+0x1ea>
 8008968:	2301      	movs	r3, #1
 800896a:	4652      	mov	r2, sl
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f aef7 	beq.w	8008766 <_printf_float+0xc2>
 8008978:	f109 0901 	add.w	r9, r9, #1
 800897c:	e7ee      	b.n	800895c <_printf_float+0x2b8>
 800897e:	bf00      	nop
 8008980:	7fefffff 	.word	0x7fefffff
 8008984:	0800c808 	.word	0x0800c808
 8008988:	0800c80c 	.word	0x0800c80c
 800898c:	0800c814 	.word	0x0800c814
 8008990:	0800c810 	.word	0x0800c810
 8008994:	0800c818 	.word	0x0800c818
 8008998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800899a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800899c:	429a      	cmp	r2, r3
 800899e:	bfa8      	it	ge
 80089a0:	461a      	movge	r2, r3
 80089a2:	2a00      	cmp	r2, #0
 80089a4:	4691      	mov	r9, r2
 80089a6:	dc37      	bgt.n	8008a18 <_printf_float+0x374>
 80089a8:	f04f 0b00 	mov.w	fp, #0
 80089ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b0:	f104 021a 	add.w	r2, r4, #26
 80089b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089b6:	9305      	str	r3, [sp, #20]
 80089b8:	eba3 0309 	sub.w	r3, r3, r9
 80089bc:	455b      	cmp	r3, fp
 80089be:	dc33      	bgt.n	8008a28 <_printf_float+0x384>
 80089c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089c4:	429a      	cmp	r2, r3
 80089c6:	db3b      	blt.n	8008a40 <_printf_float+0x39c>
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	07da      	lsls	r2, r3, #31
 80089cc:	d438      	bmi.n	8008a40 <_printf_float+0x39c>
 80089ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d0:	9a05      	ldr	r2, [sp, #20]
 80089d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089d4:	1a9a      	subs	r2, r3, r2
 80089d6:	eba3 0901 	sub.w	r9, r3, r1
 80089da:	4591      	cmp	r9, r2
 80089dc:	bfa8      	it	ge
 80089de:	4691      	movge	r9, r2
 80089e0:	f1b9 0f00 	cmp.w	r9, #0
 80089e4:	dc35      	bgt.n	8008a52 <_printf_float+0x3ae>
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089ee:	f104 0a1a 	add.w	sl, r4, #26
 80089f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	eba3 0309 	sub.w	r3, r3, r9
 80089fc:	4543      	cmp	r3, r8
 80089fe:	f77f af79 	ble.w	80088f4 <_printf_float+0x250>
 8008a02:	2301      	movs	r3, #1
 8008a04:	4652      	mov	r2, sl
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	f43f aeaa 	beq.w	8008766 <_printf_float+0xc2>
 8008a12:	f108 0801 	add.w	r8, r8, #1
 8008a16:	e7ec      	b.n	80089f2 <_printf_float+0x34e>
 8008a18:	4613      	mov	r3, r2
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4642      	mov	r2, r8
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	d1c0      	bne.n	80089a8 <_printf_float+0x304>
 8008a26:	e69e      	b.n	8008766 <_printf_float+0xc2>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	9205      	str	r2, [sp, #20]
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f ae97 	beq.w	8008766 <_printf_float+0xc2>
 8008a38:	9a05      	ldr	r2, [sp, #20]
 8008a3a:	f10b 0b01 	add.w	fp, fp, #1
 8008a3e:	e7b9      	b.n	80089b4 <_printf_float+0x310>
 8008a40:	ee18 3a10 	vmov	r3, s16
 8008a44:	4652      	mov	r2, sl
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b8      	blx	r7
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d1be      	bne.n	80089ce <_printf_float+0x32a>
 8008a50:	e689      	b.n	8008766 <_printf_float+0xc2>
 8008a52:	9a05      	ldr	r2, [sp, #20]
 8008a54:	464b      	mov	r3, r9
 8008a56:	4442      	add	r2, r8
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b8      	blx	r7
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d1c1      	bne.n	80089e6 <_printf_float+0x342>
 8008a62:	e680      	b.n	8008766 <_printf_float+0xc2>
 8008a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a66:	2a01      	cmp	r2, #1
 8008a68:	dc01      	bgt.n	8008a6e <_printf_float+0x3ca>
 8008a6a:	07db      	lsls	r3, r3, #31
 8008a6c:	d538      	bpl.n	8008ae0 <_printf_float+0x43c>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4642      	mov	r2, r8
 8008a72:	4631      	mov	r1, r6
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b8      	blx	r7
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f43f ae74 	beq.w	8008766 <_printf_float+0xc2>
 8008a7e:	ee18 3a10 	vmov	r3, s16
 8008a82:	4652      	mov	r2, sl
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f ae6b 	beq.w	8008766 <_printf_float+0xc2>
 8008a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a94:	2200      	movs	r2, #0
 8008a96:	2300      	movs	r3, #0
 8008a98:	f7f8 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a9c:	b9d8      	cbnz	r0, 8008ad6 <_printf_float+0x432>
 8008a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa0:	f108 0201 	add.w	r2, r8, #1
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	d10e      	bne.n	8008ace <_printf_float+0x42a>
 8008ab0:	e659      	b.n	8008766 <_printf_float+0xc2>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f ae52 	beq.w	8008766 <_printf_float+0xc2>
 8008ac2:	f108 0801 	add.w	r8, r8, #1
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	4543      	cmp	r3, r8
 8008acc:	dcf1      	bgt.n	8008ab2 <_printf_float+0x40e>
 8008ace:	464b      	mov	r3, r9
 8008ad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ad4:	e6dc      	b.n	8008890 <_printf_float+0x1ec>
 8008ad6:	f04f 0800 	mov.w	r8, #0
 8008ada:	f104 0a1a 	add.w	sl, r4, #26
 8008ade:	e7f2      	b.n	8008ac6 <_printf_float+0x422>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	e7df      	b.n	8008aa6 <_printf_float+0x402>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	464a      	mov	r2, r9
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	f43f ae38 	beq.w	8008766 <_printf_float+0xc2>
 8008af6:	f108 0801 	add.w	r8, r8, #1
 8008afa:	68e3      	ldr	r3, [r4, #12]
 8008afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008afe:	1a5b      	subs	r3, r3, r1
 8008b00:	4543      	cmp	r3, r8
 8008b02:	dcf0      	bgt.n	8008ae6 <_printf_float+0x442>
 8008b04:	e6fa      	b.n	80088fc <_printf_float+0x258>
 8008b06:	f04f 0800 	mov.w	r8, #0
 8008b0a:	f104 0919 	add.w	r9, r4, #25
 8008b0e:	e7f4      	b.n	8008afa <_printf_float+0x456>

08008b10 <_printf_common>:
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	4616      	mov	r6, r2
 8008b16:	4699      	mov	r9, r3
 8008b18:	688a      	ldr	r2, [r1, #8]
 8008b1a:	690b      	ldr	r3, [r1, #16]
 8008b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bfb8      	it	lt
 8008b24:	4613      	movlt	r3, r2
 8008b26:	6033      	str	r3, [r6, #0]
 8008b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	b10a      	cbz	r2, 8008b36 <_printf_common+0x26>
 8008b32:	3301      	adds	r3, #1
 8008b34:	6033      	str	r3, [r6, #0]
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	0699      	lsls	r1, r3, #26
 8008b3a:	bf42      	ittt	mi
 8008b3c:	6833      	ldrmi	r3, [r6, #0]
 8008b3e:	3302      	addmi	r3, #2
 8008b40:	6033      	strmi	r3, [r6, #0]
 8008b42:	6825      	ldr	r5, [r4, #0]
 8008b44:	f015 0506 	ands.w	r5, r5, #6
 8008b48:	d106      	bne.n	8008b58 <_printf_common+0x48>
 8008b4a:	f104 0a19 	add.w	sl, r4, #25
 8008b4e:	68e3      	ldr	r3, [r4, #12]
 8008b50:	6832      	ldr	r2, [r6, #0]
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	dc26      	bgt.n	8008ba6 <_printf_common+0x96>
 8008b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b5c:	1e13      	subs	r3, r2, #0
 8008b5e:	6822      	ldr	r2, [r4, #0]
 8008b60:	bf18      	it	ne
 8008b62:	2301      	movne	r3, #1
 8008b64:	0692      	lsls	r2, r2, #26
 8008b66:	d42b      	bmi.n	8008bc0 <_printf_common+0xb0>
 8008b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	4638      	mov	r0, r7
 8008b70:	47c0      	blx	r8
 8008b72:	3001      	adds	r0, #1
 8008b74:	d01e      	beq.n	8008bb4 <_printf_common+0xa4>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	68e5      	ldr	r5, [r4, #12]
 8008b7a:	6832      	ldr	r2, [r6, #0]
 8008b7c:	f003 0306 	and.w	r3, r3, #6
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	bf08      	it	eq
 8008b84:	1aad      	subeq	r5, r5, r2
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	6922      	ldr	r2, [r4, #16]
 8008b8a:	bf0c      	ite	eq
 8008b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b90:	2500      	movne	r5, #0
 8008b92:	4293      	cmp	r3, r2
 8008b94:	bfc4      	itt	gt
 8008b96:	1a9b      	subgt	r3, r3, r2
 8008b98:	18ed      	addgt	r5, r5, r3
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	341a      	adds	r4, #26
 8008b9e:	42b5      	cmp	r5, r6
 8008ba0:	d11a      	bne.n	8008bd8 <_printf_common+0xc8>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e008      	b.n	8008bb8 <_printf_common+0xa8>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4652      	mov	r2, sl
 8008baa:	4649      	mov	r1, r9
 8008bac:	4638      	mov	r0, r7
 8008bae:	47c0      	blx	r8
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d103      	bne.n	8008bbc <_printf_common+0xac>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	e7c6      	b.n	8008b4e <_printf_common+0x3e>
 8008bc0:	18e1      	adds	r1, r4, r3
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	2030      	movs	r0, #48	; 0x30
 8008bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bca:	4422      	add	r2, r4
 8008bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd4:	3302      	adds	r3, #2
 8008bd6:	e7c7      	b.n	8008b68 <_printf_common+0x58>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4649      	mov	r1, r9
 8008bde:	4638      	mov	r0, r7
 8008be0:	47c0      	blx	r8
 8008be2:	3001      	adds	r0, #1
 8008be4:	d0e6      	beq.n	8008bb4 <_printf_common+0xa4>
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7d9      	b.n	8008b9e <_printf_common+0x8e>
	...

08008bec <_printf_i>:
 8008bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf0:	7e0f      	ldrb	r7, [r1, #24]
 8008bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf4:	2f78      	cmp	r7, #120	; 0x78
 8008bf6:	4691      	mov	r9, r2
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	469a      	mov	sl, r3
 8008bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c02:	d807      	bhi.n	8008c14 <_printf_i+0x28>
 8008c04:	2f62      	cmp	r7, #98	; 0x62
 8008c06:	d80a      	bhi.n	8008c1e <_printf_i+0x32>
 8008c08:	2f00      	cmp	r7, #0
 8008c0a:	f000 80d8 	beq.w	8008dbe <_printf_i+0x1d2>
 8008c0e:	2f58      	cmp	r7, #88	; 0x58
 8008c10:	f000 80a3 	beq.w	8008d5a <_printf_i+0x16e>
 8008c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c1c:	e03a      	b.n	8008c94 <_printf_i+0xa8>
 8008c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c22:	2b15      	cmp	r3, #21
 8008c24:	d8f6      	bhi.n	8008c14 <_printf_i+0x28>
 8008c26:	a101      	add	r1, pc, #4	; (adr r1, 8008c2c <_printf_i+0x40>)
 8008c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008c15 	.word	0x08008c15
 8008c38:	08008c15 	.word	0x08008c15
 8008c3c:	08008c15 	.word	0x08008c15
 8008c40:	08008c15 	.word	0x08008c15
 8008c44:	08008c99 	.word	0x08008c99
 8008c48:	08008c15 	.word	0x08008c15
 8008c4c:	08008c15 	.word	0x08008c15
 8008c50:	08008c15 	.word	0x08008c15
 8008c54:	08008c15 	.word	0x08008c15
 8008c58:	08008da5 	.word	0x08008da5
 8008c5c:	08008cc9 	.word	0x08008cc9
 8008c60:	08008d87 	.word	0x08008d87
 8008c64:	08008c15 	.word	0x08008c15
 8008c68:	08008c15 	.word	0x08008c15
 8008c6c:	08008dc7 	.word	0x08008dc7
 8008c70:	08008c15 	.word	0x08008c15
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008c15 	.word	0x08008c15
 8008c7c:	08008c15 	.word	0x08008c15
 8008c80:	08008d8f 	.word	0x08008d8f
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	1d1a      	adds	r2, r3, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	602a      	str	r2, [r5, #0]
 8008c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c94:	2301      	movs	r3, #1
 8008c96:	e0a3      	b.n	8008de0 <_printf_i+0x1f4>
 8008c98:	6820      	ldr	r0, [r4, #0]
 8008c9a:	6829      	ldr	r1, [r5, #0]
 8008c9c:	0606      	lsls	r6, r0, #24
 8008c9e:	f101 0304 	add.w	r3, r1, #4
 8008ca2:	d50a      	bpl.n	8008cba <_printf_i+0xce>
 8008ca4:	680e      	ldr	r6, [r1, #0]
 8008ca6:	602b      	str	r3, [r5, #0]
 8008ca8:	2e00      	cmp	r6, #0
 8008caa:	da03      	bge.n	8008cb4 <_printf_i+0xc8>
 8008cac:	232d      	movs	r3, #45	; 0x2d
 8008cae:	4276      	negs	r6, r6
 8008cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb4:	485e      	ldr	r0, [pc, #376]	; (8008e30 <_printf_i+0x244>)
 8008cb6:	230a      	movs	r3, #10
 8008cb8:	e019      	b.n	8008cee <_printf_i+0x102>
 8008cba:	680e      	ldr	r6, [r1, #0]
 8008cbc:	602b      	str	r3, [r5, #0]
 8008cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cc2:	bf18      	it	ne
 8008cc4:	b236      	sxthne	r6, r6
 8008cc6:	e7ef      	b.n	8008ca8 <_printf_i+0xbc>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	6820      	ldr	r0, [r4, #0]
 8008ccc:	1d19      	adds	r1, r3, #4
 8008cce:	6029      	str	r1, [r5, #0]
 8008cd0:	0601      	lsls	r1, r0, #24
 8008cd2:	d501      	bpl.n	8008cd8 <_printf_i+0xec>
 8008cd4:	681e      	ldr	r6, [r3, #0]
 8008cd6:	e002      	b.n	8008cde <_printf_i+0xf2>
 8008cd8:	0646      	lsls	r6, r0, #25
 8008cda:	d5fb      	bpl.n	8008cd4 <_printf_i+0xe8>
 8008cdc:	881e      	ldrh	r6, [r3, #0]
 8008cde:	4854      	ldr	r0, [pc, #336]	; (8008e30 <_printf_i+0x244>)
 8008ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2308      	moveq	r3, #8
 8008ce6:	230a      	movne	r3, #10
 8008ce8:	2100      	movs	r1, #0
 8008cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cee:	6865      	ldr	r5, [r4, #4]
 8008cf0:	60a5      	str	r5, [r4, #8]
 8008cf2:	2d00      	cmp	r5, #0
 8008cf4:	bfa2      	ittt	ge
 8008cf6:	6821      	ldrge	r1, [r4, #0]
 8008cf8:	f021 0104 	bicge.w	r1, r1, #4
 8008cfc:	6021      	strge	r1, [r4, #0]
 8008cfe:	b90e      	cbnz	r6, 8008d04 <_printf_i+0x118>
 8008d00:	2d00      	cmp	r5, #0
 8008d02:	d04d      	beq.n	8008da0 <_printf_i+0x1b4>
 8008d04:	4615      	mov	r5, r2
 8008d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8008d0e:	5dc7      	ldrb	r7, [r0, r7]
 8008d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d14:	4637      	mov	r7, r6
 8008d16:	42bb      	cmp	r3, r7
 8008d18:	460e      	mov	r6, r1
 8008d1a:	d9f4      	bls.n	8008d06 <_printf_i+0x11a>
 8008d1c:	2b08      	cmp	r3, #8
 8008d1e:	d10b      	bne.n	8008d38 <_printf_i+0x14c>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	07de      	lsls	r6, r3, #31
 8008d24:	d508      	bpl.n	8008d38 <_printf_i+0x14c>
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	6861      	ldr	r1, [r4, #4]
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	bfde      	ittt	le
 8008d2e:	2330      	movle	r3, #48	; 0x30
 8008d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d38:	1b52      	subs	r2, r2, r5
 8008d3a:	6122      	str	r2, [r4, #16]
 8008d3c:	f8cd a000 	str.w	sl, [sp]
 8008d40:	464b      	mov	r3, r9
 8008d42:	aa03      	add	r2, sp, #12
 8008d44:	4621      	mov	r1, r4
 8008d46:	4640      	mov	r0, r8
 8008d48:	f7ff fee2 	bl	8008b10 <_printf_common>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d14c      	bne.n	8008dea <_printf_i+0x1fe>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	b004      	add	sp, #16
 8008d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5a:	4835      	ldr	r0, [pc, #212]	; (8008e30 <_printf_i+0x244>)
 8008d5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d60:	6829      	ldr	r1, [r5, #0]
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d68:	6029      	str	r1, [r5, #0]
 8008d6a:	061d      	lsls	r5, r3, #24
 8008d6c:	d514      	bpl.n	8008d98 <_printf_i+0x1ac>
 8008d6e:	07df      	lsls	r7, r3, #31
 8008d70:	bf44      	itt	mi
 8008d72:	f043 0320 	orrmi.w	r3, r3, #32
 8008d76:	6023      	strmi	r3, [r4, #0]
 8008d78:	b91e      	cbnz	r6, 8008d82 <_printf_i+0x196>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	f023 0320 	bic.w	r3, r3, #32
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	2310      	movs	r3, #16
 8008d84:	e7b0      	b.n	8008ce8 <_printf_i+0xfc>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f043 0320 	orr.w	r3, r3, #32
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	2378      	movs	r3, #120	; 0x78
 8008d90:	4828      	ldr	r0, [pc, #160]	; (8008e34 <_printf_i+0x248>)
 8008d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d96:	e7e3      	b.n	8008d60 <_printf_i+0x174>
 8008d98:	0659      	lsls	r1, r3, #25
 8008d9a:	bf48      	it	mi
 8008d9c:	b2b6      	uxthmi	r6, r6
 8008d9e:	e7e6      	b.n	8008d6e <_printf_i+0x182>
 8008da0:	4615      	mov	r5, r2
 8008da2:	e7bb      	b.n	8008d1c <_printf_i+0x130>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	6826      	ldr	r6, [r4, #0]
 8008da8:	6961      	ldr	r1, [r4, #20]
 8008daa:	1d18      	adds	r0, r3, #4
 8008dac:	6028      	str	r0, [r5, #0]
 8008dae:	0635      	lsls	r5, r6, #24
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	d501      	bpl.n	8008db8 <_printf_i+0x1cc>
 8008db4:	6019      	str	r1, [r3, #0]
 8008db6:	e002      	b.n	8008dbe <_printf_i+0x1d2>
 8008db8:	0670      	lsls	r0, r6, #25
 8008dba:	d5fb      	bpl.n	8008db4 <_printf_i+0x1c8>
 8008dbc:	8019      	strh	r1, [r3, #0]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6123      	str	r3, [r4, #16]
 8008dc2:	4615      	mov	r5, r2
 8008dc4:	e7ba      	b.n	8008d3c <_printf_i+0x150>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	1d1a      	adds	r2, r3, #4
 8008dca:	602a      	str	r2, [r5, #0]
 8008dcc:	681d      	ldr	r5, [r3, #0]
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7f7 fa04 	bl	80001e0 <memchr>
 8008dd8:	b108      	cbz	r0, 8008dde <_printf_i+0x1f2>
 8008dda:	1b40      	subs	r0, r0, r5
 8008ddc:	6060      	str	r0, [r4, #4]
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	2300      	movs	r3, #0
 8008de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de8:	e7a8      	b.n	8008d3c <_printf_i+0x150>
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	462a      	mov	r2, r5
 8008dee:	4649      	mov	r1, r9
 8008df0:	4640      	mov	r0, r8
 8008df2:	47d0      	blx	sl
 8008df4:	3001      	adds	r0, #1
 8008df6:	d0ab      	beq.n	8008d50 <_printf_i+0x164>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	079b      	lsls	r3, r3, #30
 8008dfc:	d413      	bmi.n	8008e26 <_printf_i+0x23a>
 8008dfe:	68e0      	ldr	r0, [r4, #12]
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	4298      	cmp	r0, r3
 8008e04:	bfb8      	it	lt
 8008e06:	4618      	movlt	r0, r3
 8008e08:	e7a4      	b.n	8008d54 <_printf_i+0x168>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4640      	mov	r0, r8
 8008e12:	47d0      	blx	sl
 8008e14:	3001      	adds	r0, #1
 8008e16:	d09b      	beq.n	8008d50 <_printf_i+0x164>
 8008e18:	3501      	adds	r5, #1
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	9903      	ldr	r1, [sp, #12]
 8008e1e:	1a5b      	subs	r3, r3, r1
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	dcf2      	bgt.n	8008e0a <_printf_i+0x21e>
 8008e24:	e7eb      	b.n	8008dfe <_printf_i+0x212>
 8008e26:	2500      	movs	r5, #0
 8008e28:	f104 0619 	add.w	r6, r4, #25
 8008e2c:	e7f5      	b.n	8008e1a <_printf_i+0x22e>
 8008e2e:	bf00      	nop
 8008e30:	0800c81a 	.word	0x0800c81a
 8008e34:	0800c82b 	.word	0x0800c82b

08008e38 <iprintf>:
 8008e38:	b40f      	push	{r0, r1, r2, r3}
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <iprintf+0x2c>)
 8008e3c:	b513      	push	{r0, r1, r4, lr}
 8008e3e:	681c      	ldr	r4, [r3, #0]
 8008e40:	b124      	cbz	r4, 8008e4c <iprintf+0x14>
 8008e42:	69a3      	ldr	r3, [r4, #24]
 8008e44:	b913      	cbnz	r3, 8008e4c <iprintf+0x14>
 8008e46:	4620      	mov	r0, r4
 8008e48:	f001 f8da 	bl	800a000 <__sinit>
 8008e4c:	ab05      	add	r3, sp, #20
 8008e4e:	9a04      	ldr	r2, [sp, #16]
 8008e50:	68a1      	ldr	r1, [r4, #8]
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	4620      	mov	r0, r4
 8008e56:	f001 fe97 	bl	800ab88 <_vfiprintf_r>
 8008e5a:	b002      	add	sp, #8
 8008e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e60:	b004      	add	sp, #16
 8008e62:	4770      	bx	lr
 8008e64:	20000010 	.word	0x20000010

08008e68 <_puts_r>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	460e      	mov	r6, r1
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	b118      	cbz	r0, 8008e78 <_puts_r+0x10>
 8008e70:	6983      	ldr	r3, [r0, #24]
 8008e72:	b90b      	cbnz	r3, 8008e78 <_puts_r+0x10>
 8008e74:	f001 f8c4 	bl	800a000 <__sinit>
 8008e78:	69ab      	ldr	r3, [r5, #24]
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	b913      	cbnz	r3, 8008e84 <_puts_r+0x1c>
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f001 f8be 	bl	800a000 <__sinit>
 8008e84:	4b2c      	ldr	r3, [pc, #176]	; (8008f38 <_puts_r+0xd0>)
 8008e86:	429c      	cmp	r4, r3
 8008e88:	d120      	bne.n	8008ecc <_puts_r+0x64>
 8008e8a:	686c      	ldr	r4, [r5, #4]
 8008e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8e:	07db      	lsls	r3, r3, #31
 8008e90:	d405      	bmi.n	8008e9e <_puts_r+0x36>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	0598      	lsls	r0, r3, #22
 8008e96:	d402      	bmi.n	8008e9e <_puts_r+0x36>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f001 f954 	bl	800a146 <__retarget_lock_acquire_recursive>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	0719      	lsls	r1, r3, #28
 8008ea2:	d51d      	bpl.n	8008ee0 <_puts_r+0x78>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	b1db      	cbz	r3, 8008ee0 <_puts_r+0x78>
 8008ea8:	3e01      	subs	r6, #1
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	60a3      	str	r3, [r4, #8]
 8008eb4:	bb39      	cbnz	r1, 8008f06 <_puts_r+0x9e>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da38      	bge.n	8008f2c <_puts_r+0xc4>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	210a      	movs	r1, #10
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f848 	bl	8008f54 <__swbuf_r>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d011      	beq.n	8008eec <_puts_r+0x84>
 8008ec8:	250a      	movs	r5, #10
 8008eca:	e011      	b.n	8008ef0 <_puts_r+0x88>
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <_puts_r+0xd4>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d101      	bne.n	8008ed6 <_puts_r+0x6e>
 8008ed2:	68ac      	ldr	r4, [r5, #8]
 8008ed4:	e7da      	b.n	8008e8c <_puts_r+0x24>
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <_puts_r+0xd8>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	bf08      	it	eq
 8008edc:	68ec      	ldreq	r4, [r5, #12]
 8008ede:	e7d5      	b.n	8008e8c <_puts_r+0x24>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 f888 	bl	8008ff8 <__swsetup_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d0dd      	beq.n	8008ea8 <_puts_r+0x40>
 8008eec:	f04f 35ff 	mov.w	r5, #4294967295
 8008ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ef2:	07da      	lsls	r2, r3, #31
 8008ef4:	d405      	bmi.n	8008f02 <_puts_r+0x9a>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	059b      	lsls	r3, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_puts_r+0x9a>
 8008efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efe:	f001 f923 	bl	800a148 <__retarget_lock_release_recursive>
 8008f02:	4628      	mov	r0, r5
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da04      	bge.n	8008f14 <_puts_r+0xac>
 8008f0a:	69a2      	ldr	r2, [r4, #24]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	dc06      	bgt.n	8008f1e <_puts_r+0xb6>
 8008f10:	290a      	cmp	r1, #10
 8008f12:	d004      	beq.n	8008f1e <_puts_r+0xb6>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	6022      	str	r2, [r4, #0]
 8008f1a:	7019      	strb	r1, [r3, #0]
 8008f1c:	e7c5      	b.n	8008eaa <_puts_r+0x42>
 8008f1e:	4622      	mov	r2, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f817 	bl	8008f54 <__swbuf_r>
 8008f26:	3001      	adds	r0, #1
 8008f28:	d1bf      	bne.n	8008eaa <_puts_r+0x42>
 8008f2a:	e7df      	b.n	8008eec <_puts_r+0x84>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	250a      	movs	r5, #10
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	6022      	str	r2, [r4, #0]
 8008f34:	701d      	strb	r5, [r3, #0]
 8008f36:	e7db      	b.n	8008ef0 <_puts_r+0x88>
 8008f38:	0800c8ec 	.word	0x0800c8ec
 8008f3c:	0800c90c 	.word	0x0800c90c
 8008f40:	0800c8cc 	.word	0x0800c8cc

08008f44 <puts>:
 8008f44:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <puts+0xc>)
 8008f46:	4601      	mov	r1, r0
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f7ff bf8d 	b.w	8008e68 <_puts_r>
 8008f4e:	bf00      	nop
 8008f50:	20000010 	.word	0x20000010

08008f54 <__swbuf_r>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	460e      	mov	r6, r1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	b118      	cbz	r0, 8008f66 <__swbuf_r+0x12>
 8008f5e:	6983      	ldr	r3, [r0, #24]
 8008f60:	b90b      	cbnz	r3, 8008f66 <__swbuf_r+0x12>
 8008f62:	f001 f84d 	bl	800a000 <__sinit>
 8008f66:	4b21      	ldr	r3, [pc, #132]	; (8008fec <__swbuf_r+0x98>)
 8008f68:	429c      	cmp	r4, r3
 8008f6a:	d12b      	bne.n	8008fc4 <__swbuf_r+0x70>
 8008f6c:	686c      	ldr	r4, [r5, #4]
 8008f6e:	69a3      	ldr	r3, [r4, #24]
 8008f70:	60a3      	str	r3, [r4, #8]
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	071a      	lsls	r2, r3, #28
 8008f76:	d52f      	bpl.n	8008fd8 <__swbuf_r+0x84>
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	b36b      	cbz	r3, 8008fd8 <__swbuf_r+0x84>
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	1ac0      	subs	r0, r0, r3
 8008f82:	6963      	ldr	r3, [r4, #20]
 8008f84:	b2f6      	uxtb	r6, r6
 8008f86:	4283      	cmp	r3, r0
 8008f88:	4637      	mov	r7, r6
 8008f8a:	dc04      	bgt.n	8008f96 <__swbuf_r+0x42>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 ffa2 	bl	8009ed8 <_fflush_r>
 8008f94:	bb30      	cbnz	r0, 8008fe4 <__swbuf_r+0x90>
 8008f96:	68a3      	ldr	r3, [r4, #8]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	60a3      	str	r3, [r4, #8]
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	6022      	str	r2, [r4, #0]
 8008fa2:	701e      	strb	r6, [r3, #0]
 8008fa4:	6963      	ldr	r3, [r4, #20]
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	4283      	cmp	r3, r0
 8008faa:	d004      	beq.n	8008fb6 <__swbuf_r+0x62>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	07db      	lsls	r3, r3, #31
 8008fb0:	d506      	bpl.n	8008fc0 <__swbuf_r+0x6c>
 8008fb2:	2e0a      	cmp	r6, #10
 8008fb4:	d104      	bne.n	8008fc0 <__swbuf_r+0x6c>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f000 ff8d 	bl	8009ed8 <_fflush_r>
 8008fbe:	b988      	cbnz	r0, 8008fe4 <__swbuf_r+0x90>
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <__swbuf_r+0x9c>)
 8008fc6:	429c      	cmp	r4, r3
 8008fc8:	d101      	bne.n	8008fce <__swbuf_r+0x7a>
 8008fca:	68ac      	ldr	r4, [r5, #8]
 8008fcc:	e7cf      	b.n	8008f6e <__swbuf_r+0x1a>
 8008fce:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <__swbuf_r+0xa0>)
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	bf08      	it	eq
 8008fd4:	68ec      	ldreq	r4, [r5, #12]
 8008fd6:	e7ca      	b.n	8008f6e <__swbuf_r+0x1a>
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f000 f80c 	bl	8008ff8 <__swsetup_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d0cb      	beq.n	8008f7c <__swbuf_r+0x28>
 8008fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe8:	e7ea      	b.n	8008fc0 <__swbuf_r+0x6c>
 8008fea:	bf00      	nop
 8008fec:	0800c8ec 	.word	0x0800c8ec
 8008ff0:	0800c90c 	.word	0x0800c90c
 8008ff4:	0800c8cc 	.word	0x0800c8cc

08008ff8 <__swsetup_r>:
 8008ff8:	4b32      	ldr	r3, [pc, #200]	; (80090c4 <__swsetup_r+0xcc>)
 8008ffa:	b570      	push	{r4, r5, r6, lr}
 8008ffc:	681d      	ldr	r5, [r3, #0]
 8008ffe:	4606      	mov	r6, r0
 8009000:	460c      	mov	r4, r1
 8009002:	b125      	cbz	r5, 800900e <__swsetup_r+0x16>
 8009004:	69ab      	ldr	r3, [r5, #24]
 8009006:	b913      	cbnz	r3, 800900e <__swsetup_r+0x16>
 8009008:	4628      	mov	r0, r5
 800900a:	f000 fff9 	bl	800a000 <__sinit>
 800900e:	4b2e      	ldr	r3, [pc, #184]	; (80090c8 <__swsetup_r+0xd0>)
 8009010:	429c      	cmp	r4, r3
 8009012:	d10f      	bne.n	8009034 <__swsetup_r+0x3c>
 8009014:	686c      	ldr	r4, [r5, #4]
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800901c:	0719      	lsls	r1, r3, #28
 800901e:	d42c      	bmi.n	800907a <__swsetup_r+0x82>
 8009020:	06dd      	lsls	r5, r3, #27
 8009022:	d411      	bmi.n	8009048 <__swsetup_r+0x50>
 8009024:	2309      	movs	r3, #9
 8009026:	6033      	str	r3, [r6, #0]
 8009028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	e03e      	b.n	80090b2 <__swsetup_r+0xba>
 8009034:	4b25      	ldr	r3, [pc, #148]	; (80090cc <__swsetup_r+0xd4>)
 8009036:	429c      	cmp	r4, r3
 8009038:	d101      	bne.n	800903e <__swsetup_r+0x46>
 800903a:	68ac      	ldr	r4, [r5, #8]
 800903c:	e7eb      	b.n	8009016 <__swsetup_r+0x1e>
 800903e:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <__swsetup_r+0xd8>)
 8009040:	429c      	cmp	r4, r3
 8009042:	bf08      	it	eq
 8009044:	68ec      	ldreq	r4, [r5, #12]
 8009046:	e7e6      	b.n	8009016 <__swsetup_r+0x1e>
 8009048:	0758      	lsls	r0, r3, #29
 800904a:	d512      	bpl.n	8009072 <__swsetup_r+0x7a>
 800904c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800904e:	b141      	cbz	r1, 8009062 <__swsetup_r+0x6a>
 8009050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009054:	4299      	cmp	r1, r3
 8009056:	d002      	beq.n	800905e <__swsetup_r+0x66>
 8009058:	4630      	mov	r0, r6
 800905a:	f001 fc8b 	bl	800a974 <_free_r>
 800905e:	2300      	movs	r3, #0
 8009060:	6363      	str	r3, [r4, #52]	; 0x34
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	2300      	movs	r3, #0
 800906c:	6063      	str	r3, [r4, #4]
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f043 0308 	orr.w	r3, r3, #8
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	b94b      	cbnz	r3, 8009092 <__swsetup_r+0x9a>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009088:	d003      	beq.n	8009092 <__swsetup_r+0x9a>
 800908a:	4621      	mov	r1, r4
 800908c:	4630      	mov	r0, r6
 800908e:	f001 f881 	bl	800a194 <__smakebuf_r>
 8009092:	89a0      	ldrh	r0, [r4, #12]
 8009094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009098:	f010 0301 	ands.w	r3, r0, #1
 800909c:	d00a      	beq.n	80090b4 <__swsetup_r+0xbc>
 800909e:	2300      	movs	r3, #0
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	6963      	ldr	r3, [r4, #20]
 80090a4:	425b      	negs	r3, r3
 80090a6:	61a3      	str	r3, [r4, #24]
 80090a8:	6923      	ldr	r3, [r4, #16]
 80090aa:	b943      	cbnz	r3, 80090be <__swsetup_r+0xc6>
 80090ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090b0:	d1ba      	bne.n	8009028 <__swsetup_r+0x30>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	0781      	lsls	r1, r0, #30
 80090b6:	bf58      	it	pl
 80090b8:	6963      	ldrpl	r3, [r4, #20]
 80090ba:	60a3      	str	r3, [r4, #8]
 80090bc:	e7f4      	b.n	80090a8 <__swsetup_r+0xb0>
 80090be:	2000      	movs	r0, #0
 80090c0:	e7f7      	b.n	80090b2 <__swsetup_r+0xba>
 80090c2:	bf00      	nop
 80090c4:	20000010 	.word	0x20000010
 80090c8:	0800c8ec 	.word	0x0800c8ec
 80090cc:	0800c90c 	.word	0x0800c90c
 80090d0:	0800c8cc 	.word	0x0800c8cc

080090d4 <quorem>:
 80090d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	6903      	ldr	r3, [r0, #16]
 80090da:	690c      	ldr	r4, [r1, #16]
 80090dc:	42a3      	cmp	r3, r4
 80090de:	4607      	mov	r7, r0
 80090e0:	f2c0 8081 	blt.w	80091e6 <quorem+0x112>
 80090e4:	3c01      	subs	r4, #1
 80090e6:	f101 0814 	add.w	r8, r1, #20
 80090ea:	f100 0514 	add.w	r5, r0, #20
 80090ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090fc:	3301      	adds	r3, #1
 80090fe:	429a      	cmp	r2, r3
 8009100:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009108:	fbb2 f6f3 	udiv	r6, r2, r3
 800910c:	d331      	bcc.n	8009172 <quorem+0x9e>
 800910e:	f04f 0e00 	mov.w	lr, #0
 8009112:	4640      	mov	r0, r8
 8009114:	46ac      	mov	ip, r5
 8009116:	46f2      	mov	sl, lr
 8009118:	f850 2b04 	ldr.w	r2, [r0], #4
 800911c:	b293      	uxth	r3, r2
 800911e:	fb06 e303 	mla	r3, r6, r3, lr
 8009122:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009126:	b29b      	uxth	r3, r3
 8009128:	ebaa 0303 	sub.w	r3, sl, r3
 800912c:	f8dc a000 	ldr.w	sl, [ip]
 8009130:	0c12      	lsrs	r2, r2, #16
 8009132:	fa13 f38a 	uxtah	r3, r3, sl
 8009136:	fb06 e202 	mla	r2, r6, r2, lr
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	9b00      	ldr	r3, [sp, #0]
 800913e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009142:	b292      	uxth	r2, r2
 8009144:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800914c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009150:	4581      	cmp	r9, r0
 8009152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009156:	f84c 3b04 	str.w	r3, [ip], #4
 800915a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800915e:	d2db      	bcs.n	8009118 <quorem+0x44>
 8009160:	f855 300b 	ldr.w	r3, [r5, fp]
 8009164:	b92b      	cbnz	r3, 8009172 <quorem+0x9e>
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	3b04      	subs	r3, #4
 800916a:	429d      	cmp	r5, r3
 800916c:	461a      	mov	r2, r3
 800916e:	d32e      	bcc.n	80091ce <quorem+0xfa>
 8009170:	613c      	str	r4, [r7, #16]
 8009172:	4638      	mov	r0, r7
 8009174:	f001 fae6 	bl	800a744 <__mcmp>
 8009178:	2800      	cmp	r0, #0
 800917a:	db24      	blt.n	80091c6 <quorem+0xf2>
 800917c:	3601      	adds	r6, #1
 800917e:	4628      	mov	r0, r5
 8009180:	f04f 0c00 	mov.w	ip, #0
 8009184:	f858 2b04 	ldr.w	r2, [r8], #4
 8009188:	f8d0 e000 	ldr.w	lr, [r0]
 800918c:	b293      	uxth	r3, r2
 800918e:	ebac 0303 	sub.w	r3, ip, r3
 8009192:	0c12      	lsrs	r2, r2, #16
 8009194:	fa13 f38e 	uxtah	r3, r3, lr
 8009198:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800919c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091a6:	45c1      	cmp	r9, r8
 80091a8:	f840 3b04 	str.w	r3, [r0], #4
 80091ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091b0:	d2e8      	bcs.n	8009184 <quorem+0xb0>
 80091b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091ba:	b922      	cbnz	r2, 80091c6 <quorem+0xf2>
 80091bc:	3b04      	subs	r3, #4
 80091be:	429d      	cmp	r5, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	d30a      	bcc.n	80091da <quorem+0x106>
 80091c4:	613c      	str	r4, [r7, #16]
 80091c6:	4630      	mov	r0, r6
 80091c8:	b003      	add	sp, #12
 80091ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ce:	6812      	ldr	r2, [r2, #0]
 80091d0:	3b04      	subs	r3, #4
 80091d2:	2a00      	cmp	r2, #0
 80091d4:	d1cc      	bne.n	8009170 <quorem+0x9c>
 80091d6:	3c01      	subs	r4, #1
 80091d8:	e7c7      	b.n	800916a <quorem+0x96>
 80091da:	6812      	ldr	r2, [r2, #0]
 80091dc:	3b04      	subs	r3, #4
 80091de:	2a00      	cmp	r2, #0
 80091e0:	d1f0      	bne.n	80091c4 <quorem+0xf0>
 80091e2:	3c01      	subs	r4, #1
 80091e4:	e7eb      	b.n	80091be <quorem+0xea>
 80091e6:	2000      	movs	r0, #0
 80091e8:	e7ee      	b.n	80091c8 <quorem+0xf4>
 80091ea:	0000      	movs	r0, r0
 80091ec:	0000      	movs	r0, r0
	...

080091f0 <_dtoa_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	ed2d 8b04 	vpush	{d8-d9}
 80091f8:	ec57 6b10 	vmov	r6, r7, d0
 80091fc:	b093      	sub	sp, #76	; 0x4c
 80091fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009200:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009204:	9106      	str	r1, [sp, #24]
 8009206:	ee10 aa10 	vmov	sl, s0
 800920a:	4604      	mov	r4, r0
 800920c:	9209      	str	r2, [sp, #36]	; 0x24
 800920e:	930c      	str	r3, [sp, #48]	; 0x30
 8009210:	46bb      	mov	fp, r7
 8009212:	b975      	cbnz	r5, 8009232 <_dtoa_r+0x42>
 8009214:	2010      	movs	r0, #16
 8009216:	f000 fffd 	bl	800a214 <malloc>
 800921a:	4602      	mov	r2, r0
 800921c:	6260      	str	r0, [r4, #36]	; 0x24
 800921e:	b920      	cbnz	r0, 800922a <_dtoa_r+0x3a>
 8009220:	4ba7      	ldr	r3, [pc, #668]	; (80094c0 <_dtoa_r+0x2d0>)
 8009222:	21ea      	movs	r1, #234	; 0xea
 8009224:	48a7      	ldr	r0, [pc, #668]	; (80094c4 <_dtoa_r+0x2d4>)
 8009226:	f001 fe45 	bl	800aeb4 <__assert_func>
 800922a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800922e:	6005      	str	r5, [r0, #0]
 8009230:	60c5      	str	r5, [r0, #12]
 8009232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009234:	6819      	ldr	r1, [r3, #0]
 8009236:	b151      	cbz	r1, 800924e <_dtoa_r+0x5e>
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	604a      	str	r2, [r1, #4]
 800923c:	2301      	movs	r3, #1
 800923e:	4093      	lsls	r3, r2
 8009240:	608b      	str	r3, [r1, #8]
 8009242:	4620      	mov	r0, r4
 8009244:	f001 f83c 	bl	800a2c0 <_Bfree>
 8009248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	1e3b      	subs	r3, r7, #0
 8009250:	bfaa      	itet	ge
 8009252:	2300      	movge	r3, #0
 8009254:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009258:	f8c8 3000 	strge.w	r3, [r8]
 800925c:	4b9a      	ldr	r3, [pc, #616]	; (80094c8 <_dtoa_r+0x2d8>)
 800925e:	bfbc      	itt	lt
 8009260:	2201      	movlt	r2, #1
 8009262:	f8c8 2000 	strlt.w	r2, [r8]
 8009266:	ea33 030b 	bics.w	r3, r3, fp
 800926a:	d11b      	bne.n	80092a4 <_dtoa_r+0xb4>
 800926c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800926e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009278:	4333      	orrs	r3, r6
 800927a:	f000 8592 	beq.w	8009da2 <_dtoa_r+0xbb2>
 800927e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009280:	b963      	cbnz	r3, 800929c <_dtoa_r+0xac>
 8009282:	4b92      	ldr	r3, [pc, #584]	; (80094cc <_dtoa_r+0x2dc>)
 8009284:	e022      	b.n	80092cc <_dtoa_r+0xdc>
 8009286:	4b92      	ldr	r3, [pc, #584]	; (80094d0 <_dtoa_r+0x2e0>)
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	3308      	adds	r3, #8
 800928c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	9801      	ldr	r0, [sp, #4]
 8009292:	b013      	add	sp, #76	; 0x4c
 8009294:	ecbd 8b04 	vpop	{d8-d9}
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	4b8b      	ldr	r3, [pc, #556]	; (80094cc <_dtoa_r+0x2dc>)
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	3303      	adds	r3, #3
 80092a2:	e7f3      	b.n	800928c <_dtoa_r+0x9c>
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	4650      	mov	r0, sl
 80092aa:	4659      	mov	r1, fp
 80092ac:	f7f7 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80092b0:	ec4b ab19 	vmov	d9, sl, fp
 80092b4:	4680      	mov	r8, r0
 80092b6:	b158      	cbz	r0, 80092d0 <_dtoa_r+0xe0>
 80092b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ba:	2301      	movs	r3, #1
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 856b 	beq.w	8009d9c <_dtoa_r+0xbac>
 80092c6:	4883      	ldr	r0, [pc, #524]	; (80094d4 <_dtoa_r+0x2e4>)
 80092c8:	6018      	str	r0, [r3, #0]
 80092ca:	1e43      	subs	r3, r0, #1
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	e7df      	b.n	8009290 <_dtoa_r+0xa0>
 80092d0:	ec4b ab10 	vmov	d0, sl, fp
 80092d4:	aa10      	add	r2, sp, #64	; 0x40
 80092d6:	a911      	add	r1, sp, #68	; 0x44
 80092d8:	4620      	mov	r0, r4
 80092da:	f001 fad9 	bl	800a890 <__d2b>
 80092de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80092e2:	ee08 0a10 	vmov	s16, r0
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	f000 8084 	beq.w	80093f4 <_dtoa_r+0x204>
 80092ec:	ee19 3a90 	vmov	r3, s19
 80092f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80092f8:	4656      	mov	r6, sl
 80092fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80092fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009302:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009306:	4b74      	ldr	r3, [pc, #464]	; (80094d8 <_dtoa_r+0x2e8>)
 8009308:	2200      	movs	r2, #0
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	f7f6 ffbb 	bl	8000288 <__aeabi_dsub>
 8009312:	a365      	add	r3, pc, #404	; (adr r3, 80094a8 <_dtoa_r+0x2b8>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f7 f96e 	bl	80005f8 <__aeabi_dmul>
 800931c:	a364      	add	r3, pc, #400	; (adr r3, 80094b0 <_dtoa_r+0x2c0>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f6 ffb3 	bl	800028c <__adddf3>
 8009326:	4606      	mov	r6, r0
 8009328:	4628      	mov	r0, r5
 800932a:	460f      	mov	r7, r1
 800932c:	f7f7 f8fa 	bl	8000524 <__aeabi_i2d>
 8009330:	a361      	add	r3, pc, #388	; (adr r3, 80094b8 <_dtoa_r+0x2c8>)
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f7 f95f 	bl	80005f8 <__aeabi_dmul>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f6 ffa3 	bl	800028c <__adddf3>
 8009346:	4606      	mov	r6, r0
 8009348:	460f      	mov	r7, r1
 800934a:	f7f7 fc05 	bl	8000b58 <__aeabi_d2iz>
 800934e:	2200      	movs	r2, #0
 8009350:	9000      	str	r0, [sp, #0]
 8009352:	2300      	movs	r3, #0
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800935c:	b150      	cbz	r0, 8009374 <_dtoa_r+0x184>
 800935e:	9800      	ldr	r0, [sp, #0]
 8009360:	f7f7 f8e0 	bl	8000524 <__aeabi_i2d>
 8009364:	4632      	mov	r2, r6
 8009366:	463b      	mov	r3, r7
 8009368:	f7f7 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800936c:	b910      	cbnz	r0, 8009374 <_dtoa_r+0x184>
 800936e:	9b00      	ldr	r3, [sp, #0]
 8009370:	3b01      	subs	r3, #1
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	2b16      	cmp	r3, #22
 8009378:	d85a      	bhi.n	8009430 <_dtoa_r+0x240>
 800937a:	9a00      	ldr	r2, [sp, #0]
 800937c:	4b57      	ldr	r3, [pc, #348]	; (80094dc <_dtoa_r+0x2ec>)
 800937e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	ec51 0b19 	vmov	r0, r1, d9
 800938a:	f7f7 fba7 	bl	8000adc <__aeabi_dcmplt>
 800938e:	2800      	cmp	r0, #0
 8009390:	d050      	beq.n	8009434 <_dtoa_r+0x244>
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	3b01      	subs	r3, #1
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	2300      	movs	r3, #0
 800939a:	930b      	str	r3, [sp, #44]	; 0x2c
 800939c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800939e:	1b5d      	subs	r5, r3, r5
 80093a0:	1e6b      	subs	r3, r5, #1
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	bf45      	ittet	mi
 80093a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80093aa:	9304      	strmi	r3, [sp, #16]
 80093ac:	2300      	movpl	r3, #0
 80093ae:	2300      	movmi	r3, #0
 80093b0:	bf4c      	ite	mi
 80093b2:	9305      	strmi	r3, [sp, #20]
 80093b4:	9304      	strpl	r3, [sp, #16]
 80093b6:	9b00      	ldr	r3, [sp, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	db3d      	blt.n	8009438 <_dtoa_r+0x248>
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	9a00      	ldr	r2, [sp, #0]
 80093c0:	920a      	str	r2, [sp, #40]	; 0x28
 80093c2:	4413      	add	r3, r2
 80093c4:	9305      	str	r3, [sp, #20]
 80093c6:	2300      	movs	r3, #0
 80093c8:	9307      	str	r3, [sp, #28]
 80093ca:	9b06      	ldr	r3, [sp, #24]
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	f200 8089 	bhi.w	80094e4 <_dtoa_r+0x2f4>
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	bfc4      	itt	gt
 80093d6:	3b04      	subgt	r3, #4
 80093d8:	9306      	strgt	r3, [sp, #24]
 80093da:	9b06      	ldr	r3, [sp, #24]
 80093dc:	f1a3 0302 	sub.w	r3, r3, #2
 80093e0:	bfcc      	ite	gt
 80093e2:	2500      	movgt	r5, #0
 80093e4:	2501      	movle	r5, #1
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	f200 8087 	bhi.w	80094fa <_dtoa_r+0x30a>
 80093ec:	e8df f003 	tbb	[pc, r3]
 80093f0:	59383a2d 	.word	0x59383a2d
 80093f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80093f8:	441d      	add	r5, r3
 80093fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80093fe:	2b20      	cmp	r3, #32
 8009400:	bfc1      	itttt	gt
 8009402:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009406:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800940a:	fa0b f303 	lslgt.w	r3, fp, r3
 800940e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009412:	bfda      	itte	le
 8009414:	f1c3 0320 	rsble	r3, r3, #32
 8009418:	fa06 f003 	lslle.w	r0, r6, r3
 800941c:	4318      	orrgt	r0, r3
 800941e:	f7f7 f871 	bl	8000504 <__aeabi_ui2d>
 8009422:	2301      	movs	r3, #1
 8009424:	4606      	mov	r6, r0
 8009426:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800942a:	3d01      	subs	r5, #1
 800942c:	930e      	str	r3, [sp, #56]	; 0x38
 800942e:	e76a      	b.n	8009306 <_dtoa_r+0x116>
 8009430:	2301      	movs	r3, #1
 8009432:	e7b2      	b.n	800939a <_dtoa_r+0x1aa>
 8009434:	900b      	str	r0, [sp, #44]	; 0x2c
 8009436:	e7b1      	b.n	800939c <_dtoa_r+0x1ac>
 8009438:	9b04      	ldr	r3, [sp, #16]
 800943a:	9a00      	ldr	r2, [sp, #0]
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	4253      	negs	r3, r2
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	2300      	movs	r3, #0
 8009446:	930a      	str	r3, [sp, #40]	; 0x28
 8009448:	e7bf      	b.n	80093ca <_dtoa_r+0x1da>
 800944a:	2300      	movs	r3, #0
 800944c:	9308      	str	r3, [sp, #32]
 800944e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009450:	2b00      	cmp	r3, #0
 8009452:	dc55      	bgt.n	8009500 <_dtoa_r+0x310>
 8009454:	2301      	movs	r3, #1
 8009456:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800945a:	461a      	mov	r2, r3
 800945c:	9209      	str	r2, [sp, #36]	; 0x24
 800945e:	e00c      	b.n	800947a <_dtoa_r+0x28a>
 8009460:	2301      	movs	r3, #1
 8009462:	e7f3      	b.n	800944c <_dtoa_r+0x25c>
 8009464:	2300      	movs	r3, #0
 8009466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009468:	9308      	str	r3, [sp, #32]
 800946a:	9b00      	ldr	r3, [sp, #0]
 800946c:	4413      	add	r3, r2
 800946e:	9302      	str	r3, [sp, #8]
 8009470:	3301      	adds	r3, #1
 8009472:	2b01      	cmp	r3, #1
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	bfb8      	it	lt
 8009478:	2301      	movlt	r3, #1
 800947a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800947c:	2200      	movs	r2, #0
 800947e:	6042      	str	r2, [r0, #4]
 8009480:	2204      	movs	r2, #4
 8009482:	f102 0614 	add.w	r6, r2, #20
 8009486:	429e      	cmp	r6, r3
 8009488:	6841      	ldr	r1, [r0, #4]
 800948a:	d93d      	bls.n	8009508 <_dtoa_r+0x318>
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fed7 	bl	800a240 <_Balloc>
 8009492:	9001      	str	r0, [sp, #4]
 8009494:	2800      	cmp	r0, #0
 8009496:	d13b      	bne.n	8009510 <_dtoa_r+0x320>
 8009498:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <_dtoa_r+0x2f0>)
 800949a:	4602      	mov	r2, r0
 800949c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094a0:	e6c0      	b.n	8009224 <_dtoa_r+0x34>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e7df      	b.n	8009466 <_dtoa_r+0x276>
 80094a6:	bf00      	nop
 80094a8:	636f4361 	.word	0x636f4361
 80094ac:	3fd287a7 	.word	0x3fd287a7
 80094b0:	8b60c8b3 	.word	0x8b60c8b3
 80094b4:	3fc68a28 	.word	0x3fc68a28
 80094b8:	509f79fb 	.word	0x509f79fb
 80094bc:	3fd34413 	.word	0x3fd34413
 80094c0:	0800c849 	.word	0x0800c849
 80094c4:	0800c860 	.word	0x0800c860
 80094c8:	7ff00000 	.word	0x7ff00000
 80094cc:	0800c845 	.word	0x0800c845
 80094d0:	0800c83c 	.word	0x0800c83c
 80094d4:	0800c819 	.word	0x0800c819
 80094d8:	3ff80000 	.word	0x3ff80000
 80094dc:	0800c9b0 	.word	0x0800c9b0
 80094e0:	0800c8bb 	.word	0x0800c8bb
 80094e4:	2501      	movs	r5, #1
 80094e6:	2300      	movs	r3, #0
 80094e8:	9306      	str	r3, [sp, #24]
 80094ea:	9508      	str	r5, [sp, #32]
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295
 80094f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80094f4:	2200      	movs	r2, #0
 80094f6:	2312      	movs	r3, #18
 80094f8:	e7b0      	b.n	800945c <_dtoa_r+0x26c>
 80094fa:	2301      	movs	r3, #1
 80094fc:	9308      	str	r3, [sp, #32]
 80094fe:	e7f5      	b.n	80094ec <_dtoa_r+0x2fc>
 8009500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009502:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009506:	e7b8      	b.n	800947a <_dtoa_r+0x28a>
 8009508:	3101      	adds	r1, #1
 800950a:	6041      	str	r1, [r0, #4]
 800950c:	0052      	lsls	r2, r2, #1
 800950e:	e7b8      	b.n	8009482 <_dtoa_r+0x292>
 8009510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009512:	9a01      	ldr	r2, [sp, #4]
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	2b0e      	cmp	r3, #14
 800951a:	f200 809d 	bhi.w	8009658 <_dtoa_r+0x468>
 800951e:	2d00      	cmp	r5, #0
 8009520:	f000 809a 	beq.w	8009658 <_dtoa_r+0x468>
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dd32      	ble.n	8009590 <_dtoa_r+0x3a0>
 800952a:	4ab7      	ldr	r2, [pc, #732]	; (8009808 <_dtoa_r+0x618>)
 800952c:	f003 030f 	and.w	r3, r3, #15
 8009530:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009534:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	05d8      	lsls	r0, r3, #23
 800953c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009540:	d516      	bpl.n	8009570 <_dtoa_r+0x380>
 8009542:	4bb2      	ldr	r3, [pc, #712]	; (800980c <_dtoa_r+0x61c>)
 8009544:	ec51 0b19 	vmov	r0, r1, d9
 8009548:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800954c:	f7f7 f97e 	bl	800084c <__aeabi_ddiv>
 8009550:	f007 070f 	and.w	r7, r7, #15
 8009554:	4682      	mov	sl, r0
 8009556:	468b      	mov	fp, r1
 8009558:	2503      	movs	r5, #3
 800955a:	4eac      	ldr	r6, [pc, #688]	; (800980c <_dtoa_r+0x61c>)
 800955c:	b957      	cbnz	r7, 8009574 <_dtoa_r+0x384>
 800955e:	4642      	mov	r2, r8
 8009560:	464b      	mov	r3, r9
 8009562:	4650      	mov	r0, sl
 8009564:	4659      	mov	r1, fp
 8009566:	f7f7 f971 	bl	800084c <__aeabi_ddiv>
 800956a:	4682      	mov	sl, r0
 800956c:	468b      	mov	fp, r1
 800956e:	e028      	b.n	80095c2 <_dtoa_r+0x3d2>
 8009570:	2502      	movs	r5, #2
 8009572:	e7f2      	b.n	800955a <_dtoa_r+0x36a>
 8009574:	07f9      	lsls	r1, r7, #31
 8009576:	d508      	bpl.n	800958a <_dtoa_r+0x39a>
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	3501      	adds	r5, #1
 8009586:	4680      	mov	r8, r0
 8009588:	4689      	mov	r9, r1
 800958a:	107f      	asrs	r7, r7, #1
 800958c:	3608      	adds	r6, #8
 800958e:	e7e5      	b.n	800955c <_dtoa_r+0x36c>
 8009590:	f000 809b 	beq.w	80096ca <_dtoa_r+0x4da>
 8009594:	9b00      	ldr	r3, [sp, #0]
 8009596:	4f9d      	ldr	r7, [pc, #628]	; (800980c <_dtoa_r+0x61c>)
 8009598:	425e      	negs	r6, r3
 800959a:	4b9b      	ldr	r3, [pc, #620]	; (8009808 <_dtoa_r+0x618>)
 800959c:	f006 020f 	and.w	r2, r6, #15
 80095a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	ec51 0b19 	vmov	r0, r1, d9
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	1136      	asrs	r6, r6, #4
 80095b2:	4682      	mov	sl, r0
 80095b4:	468b      	mov	fp, r1
 80095b6:	2300      	movs	r3, #0
 80095b8:	2502      	movs	r5, #2
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	d17a      	bne.n	80096b4 <_dtoa_r+0x4c4>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1d3      	bne.n	800956a <_dtoa_r+0x37a>
 80095c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8082 	beq.w	80096ce <_dtoa_r+0x4de>
 80095ca:	4b91      	ldr	r3, [pc, #580]	; (8009810 <_dtoa_r+0x620>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	4650      	mov	r0, sl
 80095d0:	4659      	mov	r1, fp
 80095d2:	f7f7 fa83 	bl	8000adc <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d079      	beq.n	80096ce <_dtoa_r+0x4de>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d076      	beq.n	80096ce <_dtoa_r+0x4de>
 80095e0:	9b02      	ldr	r3, [sp, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dd36      	ble.n	8009654 <_dtoa_r+0x464>
 80095e6:	9b00      	ldr	r3, [sp, #0]
 80095e8:	4650      	mov	r0, sl
 80095ea:	4659      	mov	r1, fp
 80095ec:	1e5f      	subs	r7, r3, #1
 80095ee:	2200      	movs	r2, #0
 80095f0:	4b88      	ldr	r3, [pc, #544]	; (8009814 <_dtoa_r+0x624>)
 80095f2:	f7f7 f801 	bl	80005f8 <__aeabi_dmul>
 80095f6:	9e02      	ldr	r6, [sp, #8]
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	3501      	adds	r5, #1
 80095fe:	4628      	mov	r0, r5
 8009600:	f7f6 ff90 	bl	8000524 <__aeabi_i2d>
 8009604:	4652      	mov	r2, sl
 8009606:	465b      	mov	r3, fp
 8009608:	f7f6 fff6 	bl	80005f8 <__aeabi_dmul>
 800960c:	4b82      	ldr	r3, [pc, #520]	; (8009818 <_dtoa_r+0x628>)
 800960e:	2200      	movs	r2, #0
 8009610:	f7f6 fe3c 	bl	800028c <__adddf3>
 8009614:	46d0      	mov	r8, sl
 8009616:	46d9      	mov	r9, fp
 8009618:	4682      	mov	sl, r0
 800961a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800961e:	2e00      	cmp	r6, #0
 8009620:	d158      	bne.n	80096d4 <_dtoa_r+0x4e4>
 8009622:	4b7e      	ldr	r3, [pc, #504]	; (800981c <_dtoa_r+0x62c>)
 8009624:	2200      	movs	r2, #0
 8009626:	4640      	mov	r0, r8
 8009628:	4649      	mov	r1, r9
 800962a:	f7f6 fe2d 	bl	8000288 <__aeabi_dsub>
 800962e:	4652      	mov	r2, sl
 8009630:	465b      	mov	r3, fp
 8009632:	4680      	mov	r8, r0
 8009634:	4689      	mov	r9, r1
 8009636:	f7f7 fa6f 	bl	8000b18 <__aeabi_dcmpgt>
 800963a:	2800      	cmp	r0, #0
 800963c:	f040 8295 	bne.w	8009b6a <_dtoa_r+0x97a>
 8009640:	4652      	mov	r2, sl
 8009642:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f7 fa47 	bl	8000adc <__aeabi_dcmplt>
 800964e:	2800      	cmp	r0, #0
 8009650:	f040 8289 	bne.w	8009b66 <_dtoa_r+0x976>
 8009654:	ec5b ab19 	vmov	sl, fp, d9
 8009658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800965a:	2b00      	cmp	r3, #0
 800965c:	f2c0 8148 	blt.w	80098f0 <_dtoa_r+0x700>
 8009660:	9a00      	ldr	r2, [sp, #0]
 8009662:	2a0e      	cmp	r2, #14
 8009664:	f300 8144 	bgt.w	80098f0 <_dtoa_r+0x700>
 8009668:	4b67      	ldr	r3, [pc, #412]	; (8009808 <_dtoa_r+0x618>)
 800966a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800966e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009674:	2b00      	cmp	r3, #0
 8009676:	f280 80d5 	bge.w	8009824 <_dtoa_r+0x634>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f300 80d1 	bgt.w	8009824 <_dtoa_r+0x634>
 8009682:	f040 826f 	bne.w	8009b64 <_dtoa_r+0x974>
 8009686:	4b65      	ldr	r3, [pc, #404]	; (800981c <_dtoa_r+0x62c>)
 8009688:	2200      	movs	r2, #0
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f7f6 ffb3 	bl	80005f8 <__aeabi_dmul>
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	f7f7 fa35 	bl	8000b04 <__aeabi_dcmpge>
 800969a:	9e03      	ldr	r6, [sp, #12]
 800969c:	4637      	mov	r7, r6
 800969e:	2800      	cmp	r0, #0
 80096a0:	f040 8245 	bne.w	8009b2e <_dtoa_r+0x93e>
 80096a4:	9d01      	ldr	r5, [sp, #4]
 80096a6:	2331      	movs	r3, #49	; 0x31
 80096a8:	f805 3b01 	strb.w	r3, [r5], #1
 80096ac:	9b00      	ldr	r3, [sp, #0]
 80096ae:	3301      	adds	r3, #1
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	e240      	b.n	8009b36 <_dtoa_r+0x946>
 80096b4:	07f2      	lsls	r2, r6, #31
 80096b6:	d505      	bpl.n	80096c4 <_dtoa_r+0x4d4>
 80096b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096bc:	f7f6 ff9c 	bl	80005f8 <__aeabi_dmul>
 80096c0:	3501      	adds	r5, #1
 80096c2:	2301      	movs	r3, #1
 80096c4:	1076      	asrs	r6, r6, #1
 80096c6:	3708      	adds	r7, #8
 80096c8:	e777      	b.n	80095ba <_dtoa_r+0x3ca>
 80096ca:	2502      	movs	r5, #2
 80096cc:	e779      	b.n	80095c2 <_dtoa_r+0x3d2>
 80096ce:	9f00      	ldr	r7, [sp, #0]
 80096d0:	9e03      	ldr	r6, [sp, #12]
 80096d2:	e794      	b.n	80095fe <_dtoa_r+0x40e>
 80096d4:	9901      	ldr	r1, [sp, #4]
 80096d6:	4b4c      	ldr	r3, [pc, #304]	; (8009808 <_dtoa_r+0x618>)
 80096d8:	4431      	add	r1, r6
 80096da:	910d      	str	r1, [sp, #52]	; 0x34
 80096dc:	9908      	ldr	r1, [sp, #32]
 80096de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d043      	beq.n	8009772 <_dtoa_r+0x582>
 80096ea:	494d      	ldr	r1, [pc, #308]	; (8009820 <_dtoa_r+0x630>)
 80096ec:	2000      	movs	r0, #0
 80096ee:	f7f7 f8ad 	bl	800084c <__aeabi_ddiv>
 80096f2:	4652      	mov	r2, sl
 80096f4:	465b      	mov	r3, fp
 80096f6:	f7f6 fdc7 	bl	8000288 <__aeabi_dsub>
 80096fa:	9d01      	ldr	r5, [sp, #4]
 80096fc:	4682      	mov	sl, r0
 80096fe:	468b      	mov	fp, r1
 8009700:	4649      	mov	r1, r9
 8009702:	4640      	mov	r0, r8
 8009704:	f7f7 fa28 	bl	8000b58 <__aeabi_d2iz>
 8009708:	4606      	mov	r6, r0
 800970a:	f7f6 ff0b 	bl	8000524 <__aeabi_i2d>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4640      	mov	r0, r8
 8009714:	4649      	mov	r1, r9
 8009716:	f7f6 fdb7 	bl	8000288 <__aeabi_dsub>
 800971a:	3630      	adds	r6, #48	; 0x30
 800971c:	f805 6b01 	strb.w	r6, [r5], #1
 8009720:	4652      	mov	r2, sl
 8009722:	465b      	mov	r3, fp
 8009724:	4680      	mov	r8, r0
 8009726:	4689      	mov	r9, r1
 8009728:	f7f7 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800972c:	2800      	cmp	r0, #0
 800972e:	d163      	bne.n	80097f8 <_dtoa_r+0x608>
 8009730:	4642      	mov	r2, r8
 8009732:	464b      	mov	r3, r9
 8009734:	4936      	ldr	r1, [pc, #216]	; (8009810 <_dtoa_r+0x620>)
 8009736:	2000      	movs	r0, #0
 8009738:	f7f6 fda6 	bl	8000288 <__aeabi_dsub>
 800973c:	4652      	mov	r2, sl
 800973e:	465b      	mov	r3, fp
 8009740:	f7f7 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8009744:	2800      	cmp	r0, #0
 8009746:	f040 80b5 	bne.w	80098b4 <_dtoa_r+0x6c4>
 800974a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800974c:	429d      	cmp	r5, r3
 800974e:	d081      	beq.n	8009654 <_dtoa_r+0x464>
 8009750:	4b30      	ldr	r3, [pc, #192]	; (8009814 <_dtoa_r+0x624>)
 8009752:	2200      	movs	r2, #0
 8009754:	4650      	mov	r0, sl
 8009756:	4659      	mov	r1, fp
 8009758:	f7f6 ff4e 	bl	80005f8 <__aeabi_dmul>
 800975c:	4b2d      	ldr	r3, [pc, #180]	; (8009814 <_dtoa_r+0x624>)
 800975e:	4682      	mov	sl, r0
 8009760:	468b      	mov	fp, r1
 8009762:	4640      	mov	r0, r8
 8009764:	4649      	mov	r1, r9
 8009766:	2200      	movs	r2, #0
 8009768:	f7f6 ff46 	bl	80005f8 <__aeabi_dmul>
 800976c:	4680      	mov	r8, r0
 800976e:	4689      	mov	r9, r1
 8009770:	e7c6      	b.n	8009700 <_dtoa_r+0x510>
 8009772:	4650      	mov	r0, sl
 8009774:	4659      	mov	r1, fp
 8009776:	f7f6 ff3f 	bl	80005f8 <__aeabi_dmul>
 800977a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800977c:	9d01      	ldr	r5, [sp, #4]
 800977e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009780:	4682      	mov	sl, r0
 8009782:	468b      	mov	fp, r1
 8009784:	4649      	mov	r1, r9
 8009786:	4640      	mov	r0, r8
 8009788:	f7f7 f9e6 	bl	8000b58 <__aeabi_d2iz>
 800978c:	4606      	mov	r6, r0
 800978e:	f7f6 fec9 	bl	8000524 <__aeabi_i2d>
 8009792:	3630      	adds	r6, #48	; 0x30
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4640      	mov	r0, r8
 800979a:	4649      	mov	r1, r9
 800979c:	f7f6 fd74 	bl	8000288 <__aeabi_dsub>
 80097a0:	f805 6b01 	strb.w	r6, [r5], #1
 80097a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a6:	429d      	cmp	r5, r3
 80097a8:	4680      	mov	r8, r0
 80097aa:	4689      	mov	r9, r1
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	d124      	bne.n	80097fc <_dtoa_r+0x60c>
 80097b2:	4b1b      	ldr	r3, [pc, #108]	; (8009820 <_dtoa_r+0x630>)
 80097b4:	4650      	mov	r0, sl
 80097b6:	4659      	mov	r1, fp
 80097b8:	f7f6 fd68 	bl	800028c <__adddf3>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	f7f7 f9a8 	bl	8000b18 <__aeabi_dcmpgt>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d173      	bne.n	80098b4 <_dtoa_r+0x6c4>
 80097cc:	4652      	mov	r2, sl
 80097ce:	465b      	mov	r3, fp
 80097d0:	4913      	ldr	r1, [pc, #76]	; (8009820 <_dtoa_r+0x630>)
 80097d2:	2000      	movs	r0, #0
 80097d4:	f7f6 fd58 	bl	8000288 <__aeabi_dsub>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	f7f7 f97c 	bl	8000adc <__aeabi_dcmplt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	f43f af35 	beq.w	8009654 <_dtoa_r+0x464>
 80097ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80097ec:	1e6b      	subs	r3, r5, #1
 80097ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80097f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097f4:	2b30      	cmp	r3, #48	; 0x30
 80097f6:	d0f8      	beq.n	80097ea <_dtoa_r+0x5fa>
 80097f8:	9700      	str	r7, [sp, #0]
 80097fa:	e049      	b.n	8009890 <_dtoa_r+0x6a0>
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <_dtoa_r+0x624>)
 80097fe:	f7f6 fefb 	bl	80005f8 <__aeabi_dmul>
 8009802:	4680      	mov	r8, r0
 8009804:	4689      	mov	r9, r1
 8009806:	e7bd      	b.n	8009784 <_dtoa_r+0x594>
 8009808:	0800c9b0 	.word	0x0800c9b0
 800980c:	0800c988 	.word	0x0800c988
 8009810:	3ff00000 	.word	0x3ff00000
 8009814:	40240000 	.word	0x40240000
 8009818:	401c0000 	.word	0x401c0000
 800981c:	40140000 	.word	0x40140000
 8009820:	3fe00000 	.word	0x3fe00000
 8009824:	9d01      	ldr	r5, [sp, #4]
 8009826:	4656      	mov	r6, sl
 8009828:	465f      	mov	r7, fp
 800982a:	4642      	mov	r2, r8
 800982c:	464b      	mov	r3, r9
 800982e:	4630      	mov	r0, r6
 8009830:	4639      	mov	r1, r7
 8009832:	f7f7 f80b 	bl	800084c <__aeabi_ddiv>
 8009836:	f7f7 f98f 	bl	8000b58 <__aeabi_d2iz>
 800983a:	4682      	mov	sl, r0
 800983c:	f7f6 fe72 	bl	8000524 <__aeabi_i2d>
 8009840:	4642      	mov	r2, r8
 8009842:	464b      	mov	r3, r9
 8009844:	f7f6 fed8 	bl	80005f8 <__aeabi_dmul>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009854:	f7f6 fd18 	bl	8000288 <__aeabi_dsub>
 8009858:	f805 6b01 	strb.w	r6, [r5], #1
 800985c:	9e01      	ldr	r6, [sp, #4]
 800985e:	9f03      	ldr	r7, [sp, #12]
 8009860:	1bae      	subs	r6, r5, r6
 8009862:	42b7      	cmp	r7, r6
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	d135      	bne.n	80098d6 <_dtoa_r+0x6e6>
 800986a:	f7f6 fd0f 	bl	800028c <__adddf3>
 800986e:	4642      	mov	r2, r8
 8009870:	464b      	mov	r3, r9
 8009872:	4606      	mov	r6, r0
 8009874:	460f      	mov	r7, r1
 8009876:	f7f7 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800987a:	b9d0      	cbnz	r0, 80098b2 <_dtoa_r+0x6c2>
 800987c:	4642      	mov	r2, r8
 800987e:	464b      	mov	r3, r9
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f7 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 8009888:	b110      	cbz	r0, 8009890 <_dtoa_r+0x6a0>
 800988a:	f01a 0f01 	tst.w	sl, #1
 800988e:	d110      	bne.n	80098b2 <_dtoa_r+0x6c2>
 8009890:	4620      	mov	r0, r4
 8009892:	ee18 1a10 	vmov	r1, s16
 8009896:	f000 fd13 	bl	800a2c0 <_Bfree>
 800989a:	2300      	movs	r3, #0
 800989c:	9800      	ldr	r0, [sp, #0]
 800989e:	702b      	strb	r3, [r5, #0]
 80098a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098a2:	3001      	adds	r0, #1
 80098a4:	6018      	str	r0, [r3, #0]
 80098a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f43f acf1 	beq.w	8009290 <_dtoa_r+0xa0>
 80098ae:	601d      	str	r5, [r3, #0]
 80098b0:	e4ee      	b.n	8009290 <_dtoa_r+0xa0>
 80098b2:	9f00      	ldr	r7, [sp, #0]
 80098b4:	462b      	mov	r3, r5
 80098b6:	461d      	mov	r5, r3
 80098b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098bc:	2a39      	cmp	r2, #57	; 0x39
 80098be:	d106      	bne.n	80098ce <_dtoa_r+0x6de>
 80098c0:	9a01      	ldr	r2, [sp, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d1f7      	bne.n	80098b6 <_dtoa_r+0x6c6>
 80098c6:	9901      	ldr	r1, [sp, #4]
 80098c8:	2230      	movs	r2, #48	; 0x30
 80098ca:	3701      	adds	r7, #1
 80098cc:	700a      	strb	r2, [r1, #0]
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	3201      	adds	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	e790      	b.n	80097f8 <_dtoa_r+0x608>
 80098d6:	4ba6      	ldr	r3, [pc, #664]	; (8009b70 <_dtoa_r+0x980>)
 80098d8:	2200      	movs	r2, #0
 80098da:	f7f6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80098de:	2200      	movs	r2, #0
 80098e0:	2300      	movs	r3, #0
 80098e2:	4606      	mov	r6, r0
 80098e4:	460f      	mov	r7, r1
 80098e6:	f7f7 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d09d      	beq.n	800982a <_dtoa_r+0x63a>
 80098ee:	e7cf      	b.n	8009890 <_dtoa_r+0x6a0>
 80098f0:	9a08      	ldr	r2, [sp, #32]
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	f000 80d7 	beq.w	8009aa6 <_dtoa_r+0x8b6>
 80098f8:	9a06      	ldr	r2, [sp, #24]
 80098fa:	2a01      	cmp	r2, #1
 80098fc:	f300 80ba 	bgt.w	8009a74 <_dtoa_r+0x884>
 8009900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009902:	2a00      	cmp	r2, #0
 8009904:	f000 80b2 	beq.w	8009a6c <_dtoa_r+0x87c>
 8009908:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800990c:	9e07      	ldr	r6, [sp, #28]
 800990e:	9d04      	ldr	r5, [sp, #16]
 8009910:	9a04      	ldr	r2, [sp, #16]
 8009912:	441a      	add	r2, r3
 8009914:	9204      	str	r2, [sp, #16]
 8009916:	9a05      	ldr	r2, [sp, #20]
 8009918:	2101      	movs	r1, #1
 800991a:	441a      	add	r2, r3
 800991c:	4620      	mov	r0, r4
 800991e:	9205      	str	r2, [sp, #20]
 8009920:	f000 fd86 	bl	800a430 <__i2b>
 8009924:	4607      	mov	r7, r0
 8009926:	2d00      	cmp	r5, #0
 8009928:	dd0c      	ble.n	8009944 <_dtoa_r+0x754>
 800992a:	9b05      	ldr	r3, [sp, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	dd09      	ble.n	8009944 <_dtoa_r+0x754>
 8009930:	42ab      	cmp	r3, r5
 8009932:	9a04      	ldr	r2, [sp, #16]
 8009934:	bfa8      	it	ge
 8009936:	462b      	movge	r3, r5
 8009938:	1ad2      	subs	r2, r2, r3
 800993a:	9204      	str	r2, [sp, #16]
 800993c:	9a05      	ldr	r2, [sp, #20]
 800993e:	1aed      	subs	r5, r5, r3
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	9b07      	ldr	r3, [sp, #28]
 8009946:	b31b      	cbz	r3, 8009990 <_dtoa_r+0x7a0>
 8009948:	9b08      	ldr	r3, [sp, #32]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80af 	beq.w	8009aae <_dtoa_r+0x8be>
 8009950:	2e00      	cmp	r6, #0
 8009952:	dd13      	ble.n	800997c <_dtoa_r+0x78c>
 8009954:	4639      	mov	r1, r7
 8009956:	4632      	mov	r2, r6
 8009958:	4620      	mov	r0, r4
 800995a:	f000 fe29 	bl	800a5b0 <__pow5mult>
 800995e:	ee18 2a10 	vmov	r2, s16
 8009962:	4601      	mov	r1, r0
 8009964:	4607      	mov	r7, r0
 8009966:	4620      	mov	r0, r4
 8009968:	f000 fd78 	bl	800a45c <__multiply>
 800996c:	ee18 1a10 	vmov	r1, s16
 8009970:	4680      	mov	r8, r0
 8009972:	4620      	mov	r0, r4
 8009974:	f000 fca4 	bl	800a2c0 <_Bfree>
 8009978:	ee08 8a10 	vmov	s16, r8
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	1b9a      	subs	r2, r3, r6
 8009980:	d006      	beq.n	8009990 <_dtoa_r+0x7a0>
 8009982:	ee18 1a10 	vmov	r1, s16
 8009986:	4620      	mov	r0, r4
 8009988:	f000 fe12 	bl	800a5b0 <__pow5mult>
 800998c:	ee08 0a10 	vmov	s16, r0
 8009990:	2101      	movs	r1, #1
 8009992:	4620      	mov	r0, r4
 8009994:	f000 fd4c 	bl	800a430 <__i2b>
 8009998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800999a:	2b00      	cmp	r3, #0
 800999c:	4606      	mov	r6, r0
 800999e:	f340 8088 	ble.w	8009ab2 <_dtoa_r+0x8c2>
 80099a2:	461a      	mov	r2, r3
 80099a4:	4601      	mov	r1, r0
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 fe02 	bl	800a5b0 <__pow5mult>
 80099ac:	9b06      	ldr	r3, [sp, #24]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	4606      	mov	r6, r0
 80099b2:	f340 8081 	ble.w	8009ab8 <_dtoa_r+0x8c8>
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	6933      	ldr	r3, [r6, #16]
 80099bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80099c0:	6918      	ldr	r0, [r3, #16]
 80099c2:	f000 fce5 	bl	800a390 <__hi0bits>
 80099c6:	f1c0 0020 	rsb	r0, r0, #32
 80099ca:	9b05      	ldr	r3, [sp, #20]
 80099cc:	4418      	add	r0, r3
 80099ce:	f010 001f 	ands.w	r0, r0, #31
 80099d2:	f000 8092 	beq.w	8009afa <_dtoa_r+0x90a>
 80099d6:	f1c0 0320 	rsb	r3, r0, #32
 80099da:	2b04      	cmp	r3, #4
 80099dc:	f340 808a 	ble.w	8009af4 <_dtoa_r+0x904>
 80099e0:	f1c0 001c 	rsb	r0, r0, #28
 80099e4:	9b04      	ldr	r3, [sp, #16]
 80099e6:	4403      	add	r3, r0
 80099e8:	9304      	str	r3, [sp, #16]
 80099ea:	9b05      	ldr	r3, [sp, #20]
 80099ec:	4403      	add	r3, r0
 80099ee:	4405      	add	r5, r0
 80099f0:	9305      	str	r3, [sp, #20]
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dd07      	ble.n	8009a08 <_dtoa_r+0x818>
 80099f8:	ee18 1a10 	vmov	r1, s16
 80099fc:	461a      	mov	r2, r3
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 fe30 	bl	800a664 <__lshift>
 8009a04:	ee08 0a10 	vmov	s16, r0
 8009a08:	9b05      	ldr	r3, [sp, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	dd05      	ble.n	8009a1a <_dtoa_r+0x82a>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	461a      	mov	r2, r3
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fe26 	bl	800a664 <__lshift>
 8009a18:	4606      	mov	r6, r0
 8009a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d06e      	beq.n	8009afe <_dtoa_r+0x90e>
 8009a20:	ee18 0a10 	vmov	r0, s16
 8009a24:	4631      	mov	r1, r6
 8009a26:	f000 fe8d 	bl	800a744 <__mcmp>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	da67      	bge.n	8009afe <_dtoa_r+0x90e>
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	3b01      	subs	r3, #1
 8009a32:	ee18 1a10 	vmov	r1, s16
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	220a      	movs	r2, #10
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 fc61 	bl	800a304 <__multadd>
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	ee08 0a10 	vmov	s16, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 81b1 	beq.w	8009db0 <_dtoa_r+0xbc0>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4639      	mov	r1, r7
 8009a52:	220a      	movs	r2, #10
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fc55 	bl	800a304 <__multadd>
 8009a5a:	9b02      	ldr	r3, [sp, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	4607      	mov	r7, r0
 8009a60:	f300 808e 	bgt.w	8009b80 <_dtoa_r+0x990>
 8009a64:	9b06      	ldr	r3, [sp, #24]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	dc51      	bgt.n	8009b0e <_dtoa_r+0x91e>
 8009a6a:	e089      	b.n	8009b80 <_dtoa_r+0x990>
 8009a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a72:	e74b      	b.n	800990c <_dtoa_r+0x71c>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	1e5e      	subs	r6, r3, #1
 8009a78:	9b07      	ldr	r3, [sp, #28]
 8009a7a:	42b3      	cmp	r3, r6
 8009a7c:	bfbf      	itttt	lt
 8009a7e:	9b07      	ldrlt	r3, [sp, #28]
 8009a80:	9607      	strlt	r6, [sp, #28]
 8009a82:	1af2      	sublt	r2, r6, r3
 8009a84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a86:	bfb6      	itet	lt
 8009a88:	189b      	addlt	r3, r3, r2
 8009a8a:	1b9e      	subge	r6, r3, r6
 8009a8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	bfb8      	it	lt
 8009a92:	2600      	movlt	r6, #0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bfb7      	itett	lt
 8009a98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009a9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009aa0:	1a9d      	sublt	r5, r3, r2
 8009aa2:	2300      	movlt	r3, #0
 8009aa4:	e734      	b.n	8009910 <_dtoa_r+0x720>
 8009aa6:	9e07      	ldr	r6, [sp, #28]
 8009aa8:	9d04      	ldr	r5, [sp, #16]
 8009aaa:	9f08      	ldr	r7, [sp, #32]
 8009aac:	e73b      	b.n	8009926 <_dtoa_r+0x736>
 8009aae:	9a07      	ldr	r2, [sp, #28]
 8009ab0:	e767      	b.n	8009982 <_dtoa_r+0x792>
 8009ab2:	9b06      	ldr	r3, [sp, #24]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	dc18      	bgt.n	8009aea <_dtoa_r+0x8fa>
 8009ab8:	f1ba 0f00 	cmp.w	sl, #0
 8009abc:	d115      	bne.n	8009aea <_dtoa_r+0x8fa>
 8009abe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ac2:	b993      	cbnz	r3, 8009aea <_dtoa_r+0x8fa>
 8009ac4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ac8:	0d1b      	lsrs	r3, r3, #20
 8009aca:	051b      	lsls	r3, r3, #20
 8009acc:	b183      	cbz	r3, 8009af0 <_dtoa_r+0x900>
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	9b05      	ldr	r3, [sp, #20]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	f04f 0801 	mov.w	r8, #1
 8009ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f47f af6a 	bne.w	80099ba <_dtoa_r+0x7ca>
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e76f      	b.n	80099ca <_dtoa_r+0x7da>
 8009aea:	f04f 0800 	mov.w	r8, #0
 8009aee:	e7f6      	b.n	8009ade <_dtoa_r+0x8ee>
 8009af0:	4698      	mov	r8, r3
 8009af2:	e7f4      	b.n	8009ade <_dtoa_r+0x8ee>
 8009af4:	f43f af7d 	beq.w	80099f2 <_dtoa_r+0x802>
 8009af8:	4618      	mov	r0, r3
 8009afa:	301c      	adds	r0, #28
 8009afc:	e772      	b.n	80099e4 <_dtoa_r+0x7f4>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dc37      	bgt.n	8009b74 <_dtoa_r+0x984>
 8009b04:	9b06      	ldr	r3, [sp, #24]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	dd34      	ble.n	8009b74 <_dtoa_r+0x984>
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	9302      	str	r3, [sp, #8]
 8009b0e:	9b02      	ldr	r3, [sp, #8]
 8009b10:	b96b      	cbnz	r3, 8009b2e <_dtoa_r+0x93e>
 8009b12:	4631      	mov	r1, r6
 8009b14:	2205      	movs	r2, #5
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 fbf4 	bl	800a304 <__multadd>
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	4606      	mov	r6, r0
 8009b20:	ee18 0a10 	vmov	r0, s16
 8009b24:	f000 fe0e 	bl	800a744 <__mcmp>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f73f adbb 	bgt.w	80096a4 <_dtoa_r+0x4b4>
 8009b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b30:	9d01      	ldr	r5, [sp, #4]
 8009b32:	43db      	mvns	r3, r3
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	f04f 0800 	mov.w	r8, #0
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 fbbf 	bl	800a2c0 <_Bfree>
 8009b42:	2f00      	cmp	r7, #0
 8009b44:	f43f aea4 	beq.w	8009890 <_dtoa_r+0x6a0>
 8009b48:	f1b8 0f00 	cmp.w	r8, #0
 8009b4c:	d005      	beq.n	8009b5a <_dtoa_r+0x96a>
 8009b4e:	45b8      	cmp	r8, r7
 8009b50:	d003      	beq.n	8009b5a <_dtoa_r+0x96a>
 8009b52:	4641      	mov	r1, r8
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 fbb3 	bl	800a2c0 <_Bfree>
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 fbaf 	bl	800a2c0 <_Bfree>
 8009b62:	e695      	b.n	8009890 <_dtoa_r+0x6a0>
 8009b64:	2600      	movs	r6, #0
 8009b66:	4637      	mov	r7, r6
 8009b68:	e7e1      	b.n	8009b2e <_dtoa_r+0x93e>
 8009b6a:	9700      	str	r7, [sp, #0]
 8009b6c:	4637      	mov	r7, r6
 8009b6e:	e599      	b.n	80096a4 <_dtoa_r+0x4b4>
 8009b70:	40240000 	.word	0x40240000
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 80ca 	beq.w	8009d10 <_dtoa_r+0xb20>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	9302      	str	r3, [sp, #8]
 8009b80:	2d00      	cmp	r5, #0
 8009b82:	dd05      	ble.n	8009b90 <_dtoa_r+0x9a0>
 8009b84:	4639      	mov	r1, r7
 8009b86:	462a      	mov	r2, r5
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 fd6b 	bl	800a664 <__lshift>
 8009b8e:	4607      	mov	r7, r0
 8009b90:	f1b8 0f00 	cmp.w	r8, #0
 8009b94:	d05b      	beq.n	8009c4e <_dtoa_r+0xa5e>
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fb51 	bl	800a240 <_Balloc>
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	b928      	cbnz	r0, 8009bae <_dtoa_r+0x9be>
 8009ba2:	4b87      	ldr	r3, [pc, #540]	; (8009dc0 <_dtoa_r+0xbd0>)
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009baa:	f7ff bb3b 	b.w	8009224 <_dtoa_r+0x34>
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	3202      	adds	r2, #2
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	f107 010c 	add.w	r1, r7, #12
 8009bb8:	300c      	adds	r0, #12
 8009bba:	f000 fb33 	bl	800a224 <memcpy>
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 fd4e 	bl	800a664 <__lshift>
 8009bc8:	9b01      	ldr	r3, [sp, #4]
 8009bca:	f103 0901 	add.w	r9, r3, #1
 8009bce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	f00a 0301 	and.w	r3, sl, #1
 8009bda:	46b8      	mov	r8, r7
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	4607      	mov	r7, r0
 8009be0:	4631      	mov	r1, r6
 8009be2:	ee18 0a10 	vmov	r0, s16
 8009be6:	f7ff fa75 	bl	80090d4 <quorem>
 8009bea:	4641      	mov	r1, r8
 8009bec:	9002      	str	r0, [sp, #8]
 8009bee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009bf2:	ee18 0a10 	vmov	r0, s16
 8009bf6:	f000 fda5 	bl	800a744 <__mcmp>
 8009bfa:	463a      	mov	r2, r7
 8009bfc:	9003      	str	r0, [sp, #12]
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fdbb 	bl	800a77c <__mdiff>
 8009c06:	68c2      	ldr	r2, [r0, #12]
 8009c08:	f109 3bff 	add.w	fp, r9, #4294967295
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	bb02      	cbnz	r2, 8009c52 <_dtoa_r+0xa62>
 8009c10:	4601      	mov	r1, r0
 8009c12:	ee18 0a10 	vmov	r0, s16
 8009c16:	f000 fd95 	bl	800a744 <__mcmp>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	4620      	mov	r0, r4
 8009c20:	9207      	str	r2, [sp, #28]
 8009c22:	f000 fb4d 	bl	800a2c0 <_Bfree>
 8009c26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009c2a:	ea43 0102 	orr.w	r1, r3, r2
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	430b      	orrs	r3, r1
 8009c32:	464d      	mov	r5, r9
 8009c34:	d10f      	bne.n	8009c56 <_dtoa_r+0xa66>
 8009c36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c3a:	d02a      	beq.n	8009c92 <_dtoa_r+0xaa2>
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dd02      	ble.n	8009c48 <_dtoa_r+0xa58>
 8009c42:	9b02      	ldr	r3, [sp, #8]
 8009c44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009c48:	f88b a000 	strb.w	sl, [fp]
 8009c4c:	e775      	b.n	8009b3a <_dtoa_r+0x94a>
 8009c4e:	4638      	mov	r0, r7
 8009c50:	e7ba      	b.n	8009bc8 <_dtoa_r+0x9d8>
 8009c52:	2201      	movs	r2, #1
 8009c54:	e7e2      	b.n	8009c1c <_dtoa_r+0xa2c>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	db04      	blt.n	8009c66 <_dtoa_r+0xa76>
 8009c5c:	9906      	ldr	r1, [sp, #24]
 8009c5e:	430b      	orrs	r3, r1
 8009c60:	9904      	ldr	r1, [sp, #16]
 8009c62:	430b      	orrs	r3, r1
 8009c64:	d122      	bne.n	8009cac <_dtoa_r+0xabc>
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	ddee      	ble.n	8009c48 <_dtoa_r+0xa58>
 8009c6a:	ee18 1a10 	vmov	r1, s16
 8009c6e:	2201      	movs	r2, #1
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fcf7 	bl	800a664 <__lshift>
 8009c76:	4631      	mov	r1, r6
 8009c78:	ee08 0a10 	vmov	s16, r0
 8009c7c:	f000 fd62 	bl	800a744 <__mcmp>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	dc03      	bgt.n	8009c8c <_dtoa_r+0xa9c>
 8009c84:	d1e0      	bne.n	8009c48 <_dtoa_r+0xa58>
 8009c86:	f01a 0f01 	tst.w	sl, #1
 8009c8a:	d0dd      	beq.n	8009c48 <_dtoa_r+0xa58>
 8009c8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c90:	d1d7      	bne.n	8009c42 <_dtoa_r+0xa52>
 8009c92:	2339      	movs	r3, #57	; 0x39
 8009c94:	f88b 3000 	strb.w	r3, [fp]
 8009c98:	462b      	mov	r3, r5
 8009c9a:	461d      	mov	r5, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ca2:	2a39      	cmp	r2, #57	; 0x39
 8009ca4:	d071      	beq.n	8009d8a <_dtoa_r+0xb9a>
 8009ca6:	3201      	adds	r2, #1
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	e746      	b.n	8009b3a <_dtoa_r+0x94a>
 8009cac:	2a00      	cmp	r2, #0
 8009cae:	dd07      	ble.n	8009cc0 <_dtoa_r+0xad0>
 8009cb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009cb4:	d0ed      	beq.n	8009c92 <_dtoa_r+0xaa2>
 8009cb6:	f10a 0301 	add.w	r3, sl, #1
 8009cba:	f88b 3000 	strb.w	r3, [fp]
 8009cbe:	e73c      	b.n	8009b3a <_dtoa_r+0x94a>
 8009cc0:	9b05      	ldr	r3, [sp, #20]
 8009cc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009cc6:	4599      	cmp	r9, r3
 8009cc8:	d047      	beq.n	8009d5a <_dtoa_r+0xb6a>
 8009cca:	ee18 1a10 	vmov	r1, s16
 8009cce:	2300      	movs	r3, #0
 8009cd0:	220a      	movs	r2, #10
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fb16 	bl	800a304 <__multadd>
 8009cd8:	45b8      	cmp	r8, r7
 8009cda:	ee08 0a10 	vmov	s16, r0
 8009cde:	f04f 0300 	mov.w	r3, #0
 8009ce2:	f04f 020a 	mov.w	r2, #10
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	4620      	mov	r0, r4
 8009cea:	d106      	bne.n	8009cfa <_dtoa_r+0xb0a>
 8009cec:	f000 fb0a 	bl	800a304 <__multadd>
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	f109 0901 	add.w	r9, r9, #1
 8009cf8:	e772      	b.n	8009be0 <_dtoa_r+0x9f0>
 8009cfa:	f000 fb03 	bl	800a304 <__multadd>
 8009cfe:	4639      	mov	r1, r7
 8009d00:	4680      	mov	r8, r0
 8009d02:	2300      	movs	r3, #0
 8009d04:	220a      	movs	r2, #10
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 fafc 	bl	800a304 <__multadd>
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	e7f1      	b.n	8009cf4 <_dtoa_r+0xb04>
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	9302      	str	r3, [sp, #8]
 8009d14:	9d01      	ldr	r5, [sp, #4]
 8009d16:	ee18 0a10 	vmov	r0, s16
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	f7ff f9da 	bl	80090d4 <quorem>
 8009d20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d24:	9b01      	ldr	r3, [sp, #4]
 8009d26:	f805 ab01 	strb.w	sl, [r5], #1
 8009d2a:	1aea      	subs	r2, r5, r3
 8009d2c:	9b02      	ldr	r3, [sp, #8]
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	dd09      	ble.n	8009d46 <_dtoa_r+0xb56>
 8009d32:	ee18 1a10 	vmov	r1, s16
 8009d36:	2300      	movs	r3, #0
 8009d38:	220a      	movs	r2, #10
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fae2 	bl	800a304 <__multadd>
 8009d40:	ee08 0a10 	vmov	s16, r0
 8009d44:	e7e7      	b.n	8009d16 <_dtoa_r+0xb26>
 8009d46:	9b02      	ldr	r3, [sp, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bfc8      	it	gt
 8009d4c:	461d      	movgt	r5, r3
 8009d4e:	9b01      	ldr	r3, [sp, #4]
 8009d50:	bfd8      	it	le
 8009d52:	2501      	movle	r5, #1
 8009d54:	441d      	add	r5, r3
 8009d56:	f04f 0800 	mov.w	r8, #0
 8009d5a:	ee18 1a10 	vmov	r1, s16
 8009d5e:	2201      	movs	r2, #1
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 fc7f 	bl	800a664 <__lshift>
 8009d66:	4631      	mov	r1, r6
 8009d68:	ee08 0a10 	vmov	s16, r0
 8009d6c:	f000 fcea 	bl	800a744 <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	dc91      	bgt.n	8009c98 <_dtoa_r+0xaa8>
 8009d74:	d102      	bne.n	8009d7c <_dtoa_r+0xb8c>
 8009d76:	f01a 0f01 	tst.w	sl, #1
 8009d7a:	d18d      	bne.n	8009c98 <_dtoa_r+0xaa8>
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	461d      	mov	r5, r3
 8009d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d84:	2a30      	cmp	r2, #48	; 0x30
 8009d86:	d0fa      	beq.n	8009d7e <_dtoa_r+0xb8e>
 8009d88:	e6d7      	b.n	8009b3a <_dtoa_r+0x94a>
 8009d8a:	9a01      	ldr	r2, [sp, #4]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d184      	bne.n	8009c9a <_dtoa_r+0xaaa>
 8009d90:	9b00      	ldr	r3, [sp, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	2331      	movs	r3, #49	; 0x31
 8009d98:	7013      	strb	r3, [r2, #0]
 8009d9a:	e6ce      	b.n	8009b3a <_dtoa_r+0x94a>
 8009d9c:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <_dtoa_r+0xbd4>)
 8009d9e:	f7ff ba95 	b.w	80092cc <_dtoa_r+0xdc>
 8009da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f47f aa6e 	bne.w	8009286 <_dtoa_r+0x96>
 8009daa:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <_dtoa_r+0xbd8>)
 8009dac:	f7ff ba8e 	b.w	80092cc <_dtoa_r+0xdc>
 8009db0:	9b02      	ldr	r3, [sp, #8]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	dcae      	bgt.n	8009d14 <_dtoa_r+0xb24>
 8009db6:	9b06      	ldr	r3, [sp, #24]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	f73f aea8 	bgt.w	8009b0e <_dtoa_r+0x91e>
 8009dbe:	e7a9      	b.n	8009d14 <_dtoa_r+0xb24>
 8009dc0:	0800c8bb 	.word	0x0800c8bb
 8009dc4:	0800c818 	.word	0x0800c818
 8009dc8:	0800c83c 	.word	0x0800c83c

08009dcc <__sflush_r>:
 8009dcc:	898a      	ldrh	r2, [r1, #12]
 8009dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	0710      	lsls	r0, r2, #28
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	d458      	bmi.n	8009e8c <__sflush_r+0xc0>
 8009dda:	684b      	ldr	r3, [r1, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dc05      	bgt.n	8009dec <__sflush_r+0x20>
 8009de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	dc02      	bgt.n	8009dec <__sflush_r+0x20>
 8009de6:	2000      	movs	r0, #0
 8009de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	d0f9      	beq.n	8009de6 <__sflush_r+0x1a>
 8009df2:	2300      	movs	r3, #0
 8009df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009df8:	682f      	ldr	r7, [r5, #0]
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	d032      	beq.n	8009e64 <__sflush_r+0x98>
 8009dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	075a      	lsls	r2, r3, #29
 8009e04:	d505      	bpl.n	8009e12 <__sflush_r+0x46>
 8009e06:	6863      	ldr	r3, [r4, #4]
 8009e08:	1ac0      	subs	r0, r0, r3
 8009e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e0c:	b10b      	cbz	r3, 8009e12 <__sflush_r+0x46>
 8009e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e10:	1ac0      	subs	r0, r0, r3
 8009e12:	2300      	movs	r3, #0
 8009e14:	4602      	mov	r2, r0
 8009e16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e18:	6a21      	ldr	r1, [r4, #32]
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b0      	blx	r6
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	d106      	bne.n	8009e32 <__sflush_r+0x66>
 8009e24:	6829      	ldr	r1, [r5, #0]
 8009e26:	291d      	cmp	r1, #29
 8009e28:	d82c      	bhi.n	8009e84 <__sflush_r+0xb8>
 8009e2a:	4a2a      	ldr	r2, [pc, #168]	; (8009ed4 <__sflush_r+0x108>)
 8009e2c:	40ca      	lsrs	r2, r1
 8009e2e:	07d6      	lsls	r6, r2, #31
 8009e30:	d528      	bpl.n	8009e84 <__sflush_r+0xb8>
 8009e32:	2200      	movs	r2, #0
 8009e34:	6062      	str	r2, [r4, #4]
 8009e36:	04d9      	lsls	r1, r3, #19
 8009e38:	6922      	ldr	r2, [r4, #16]
 8009e3a:	6022      	str	r2, [r4, #0]
 8009e3c:	d504      	bpl.n	8009e48 <__sflush_r+0x7c>
 8009e3e:	1c42      	adds	r2, r0, #1
 8009e40:	d101      	bne.n	8009e46 <__sflush_r+0x7a>
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	b903      	cbnz	r3, 8009e48 <__sflush_r+0x7c>
 8009e46:	6560      	str	r0, [r4, #84]	; 0x54
 8009e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e4a:	602f      	str	r7, [r5, #0]
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	d0ca      	beq.n	8009de6 <__sflush_r+0x1a>
 8009e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e54:	4299      	cmp	r1, r3
 8009e56:	d002      	beq.n	8009e5e <__sflush_r+0x92>
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f000 fd8b 	bl	800a974 <_free_r>
 8009e5e:	2000      	movs	r0, #0
 8009e60:	6360      	str	r0, [r4, #52]	; 0x34
 8009e62:	e7c1      	b.n	8009de8 <__sflush_r+0x1c>
 8009e64:	6a21      	ldr	r1, [r4, #32]
 8009e66:	2301      	movs	r3, #1
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b0      	blx	r6
 8009e6c:	1c41      	adds	r1, r0, #1
 8009e6e:	d1c7      	bne.n	8009e00 <__sflush_r+0x34>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0c4      	beq.n	8009e00 <__sflush_r+0x34>
 8009e76:	2b1d      	cmp	r3, #29
 8009e78:	d001      	beq.n	8009e7e <__sflush_r+0xb2>
 8009e7a:	2b16      	cmp	r3, #22
 8009e7c:	d101      	bne.n	8009e82 <__sflush_r+0xb6>
 8009e7e:	602f      	str	r7, [r5, #0]
 8009e80:	e7b1      	b.n	8009de6 <__sflush_r+0x1a>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e88:	81a3      	strh	r3, [r4, #12]
 8009e8a:	e7ad      	b.n	8009de8 <__sflush_r+0x1c>
 8009e8c:	690f      	ldr	r7, [r1, #16]
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	d0a9      	beq.n	8009de6 <__sflush_r+0x1a>
 8009e92:	0793      	lsls	r3, r2, #30
 8009e94:	680e      	ldr	r6, [r1, #0]
 8009e96:	bf08      	it	eq
 8009e98:	694b      	ldreq	r3, [r1, #20]
 8009e9a:	600f      	str	r7, [r1, #0]
 8009e9c:	bf18      	it	ne
 8009e9e:	2300      	movne	r3, #0
 8009ea0:	eba6 0807 	sub.w	r8, r6, r7
 8009ea4:	608b      	str	r3, [r1, #8]
 8009ea6:	f1b8 0f00 	cmp.w	r8, #0
 8009eaa:	dd9c      	ble.n	8009de6 <__sflush_r+0x1a>
 8009eac:	6a21      	ldr	r1, [r4, #32]
 8009eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009eb0:	4643      	mov	r3, r8
 8009eb2:	463a      	mov	r2, r7
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b0      	blx	r6
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	dc06      	bgt.n	8009eca <__sflush_r+0xfe>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	e78e      	b.n	8009de8 <__sflush_r+0x1c>
 8009eca:	4407      	add	r7, r0
 8009ecc:	eba8 0800 	sub.w	r8, r8, r0
 8009ed0:	e7e9      	b.n	8009ea6 <__sflush_r+0xda>
 8009ed2:	bf00      	nop
 8009ed4:	20400001 	.word	0x20400001

08009ed8 <_fflush_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	690b      	ldr	r3, [r1, #16]
 8009edc:	4605      	mov	r5, r0
 8009ede:	460c      	mov	r4, r1
 8009ee0:	b913      	cbnz	r3, 8009ee8 <_fflush_r+0x10>
 8009ee2:	2500      	movs	r5, #0
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	b118      	cbz	r0, 8009ef2 <_fflush_r+0x1a>
 8009eea:	6983      	ldr	r3, [r0, #24]
 8009eec:	b90b      	cbnz	r3, 8009ef2 <_fflush_r+0x1a>
 8009eee:	f000 f887 	bl	800a000 <__sinit>
 8009ef2:	4b14      	ldr	r3, [pc, #80]	; (8009f44 <_fflush_r+0x6c>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	d11b      	bne.n	8009f30 <_fflush_r+0x58>
 8009ef8:	686c      	ldr	r4, [r5, #4]
 8009efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0ef      	beq.n	8009ee2 <_fflush_r+0xa>
 8009f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f04:	07d0      	lsls	r0, r2, #31
 8009f06:	d404      	bmi.n	8009f12 <_fflush_r+0x3a>
 8009f08:	0599      	lsls	r1, r3, #22
 8009f0a:	d402      	bmi.n	8009f12 <_fflush_r+0x3a>
 8009f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0e:	f000 f91a 	bl	800a146 <__retarget_lock_acquire_recursive>
 8009f12:	4628      	mov	r0, r5
 8009f14:	4621      	mov	r1, r4
 8009f16:	f7ff ff59 	bl	8009dcc <__sflush_r>
 8009f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f1c:	07da      	lsls	r2, r3, #31
 8009f1e:	4605      	mov	r5, r0
 8009f20:	d4e0      	bmi.n	8009ee4 <_fflush_r+0xc>
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	059b      	lsls	r3, r3, #22
 8009f26:	d4dd      	bmi.n	8009ee4 <_fflush_r+0xc>
 8009f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f2a:	f000 f90d 	bl	800a148 <__retarget_lock_release_recursive>
 8009f2e:	e7d9      	b.n	8009ee4 <_fflush_r+0xc>
 8009f30:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <_fflush_r+0x70>)
 8009f32:	429c      	cmp	r4, r3
 8009f34:	d101      	bne.n	8009f3a <_fflush_r+0x62>
 8009f36:	68ac      	ldr	r4, [r5, #8]
 8009f38:	e7df      	b.n	8009efa <_fflush_r+0x22>
 8009f3a:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <_fflush_r+0x74>)
 8009f3c:	429c      	cmp	r4, r3
 8009f3e:	bf08      	it	eq
 8009f40:	68ec      	ldreq	r4, [r5, #12]
 8009f42:	e7da      	b.n	8009efa <_fflush_r+0x22>
 8009f44:	0800c8ec 	.word	0x0800c8ec
 8009f48:	0800c90c 	.word	0x0800c90c
 8009f4c:	0800c8cc 	.word	0x0800c8cc

08009f50 <std>:
 8009f50:	2300      	movs	r3, #0
 8009f52:	b510      	push	{r4, lr}
 8009f54:	4604      	mov	r4, r0
 8009f56:	e9c0 3300 	strd	r3, r3, [r0]
 8009f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f5e:	6083      	str	r3, [r0, #8]
 8009f60:	8181      	strh	r1, [r0, #12]
 8009f62:	6643      	str	r3, [r0, #100]	; 0x64
 8009f64:	81c2      	strh	r2, [r0, #14]
 8009f66:	6183      	str	r3, [r0, #24]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	305c      	adds	r0, #92	; 0x5c
 8009f6e:	f7fe faf1 	bl	8008554 <memset>
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <std+0x38>)
 8009f74:	6263      	str	r3, [r4, #36]	; 0x24
 8009f76:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <std+0x3c>)
 8009f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <std+0x40>)
 8009f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f7e:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <std+0x44>)
 8009f80:	6224      	str	r4, [r4, #32]
 8009f82:	6323      	str	r3, [r4, #48]	; 0x30
 8009f84:	bd10      	pop	{r4, pc}
 8009f86:	bf00      	nop
 8009f88:	0800ae09 	.word	0x0800ae09
 8009f8c:	0800ae2b 	.word	0x0800ae2b
 8009f90:	0800ae63 	.word	0x0800ae63
 8009f94:	0800ae87 	.word	0x0800ae87

08009f98 <_cleanup_r>:
 8009f98:	4901      	ldr	r1, [pc, #4]	; (8009fa0 <_cleanup_r+0x8>)
 8009f9a:	f000 b8af 	b.w	800a0fc <_fwalk_reent>
 8009f9e:	bf00      	nop
 8009fa0:	08009ed9 	.word	0x08009ed9

08009fa4 <__sfmoreglue>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	2268      	movs	r2, #104	; 0x68
 8009fa8:	1e4d      	subs	r5, r1, #1
 8009faa:	4355      	muls	r5, r2
 8009fac:	460e      	mov	r6, r1
 8009fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fb2:	f000 fd4b 	bl	800aa4c <_malloc_r>
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	b140      	cbz	r0, 8009fcc <__sfmoreglue+0x28>
 8009fba:	2100      	movs	r1, #0
 8009fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8009fc0:	300c      	adds	r0, #12
 8009fc2:	60a0      	str	r0, [r4, #8]
 8009fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fc8:	f7fe fac4 	bl	8008554 <memset>
 8009fcc:	4620      	mov	r0, r4
 8009fce:	bd70      	pop	{r4, r5, r6, pc}

08009fd0 <__sfp_lock_acquire>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__sfp_lock_acquire+0x8>)
 8009fd2:	f000 b8b8 	b.w	800a146 <__retarget_lock_acquire_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	200005d5 	.word	0x200005d5

08009fdc <__sfp_lock_release>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__sfp_lock_release+0x8>)
 8009fde:	f000 b8b3 	b.w	800a148 <__retarget_lock_release_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	200005d5 	.word	0x200005d5

08009fe8 <__sinit_lock_acquire>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__sinit_lock_acquire+0x8>)
 8009fea:	f000 b8ac 	b.w	800a146 <__retarget_lock_acquire_recursive>
 8009fee:	bf00      	nop
 8009ff0:	200005d6 	.word	0x200005d6

08009ff4 <__sinit_lock_release>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	; (8009ffc <__sinit_lock_release+0x8>)
 8009ff6:	f000 b8a7 	b.w	800a148 <__retarget_lock_release_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	200005d6 	.word	0x200005d6

0800a000 <__sinit>:
 800a000:	b510      	push	{r4, lr}
 800a002:	4604      	mov	r4, r0
 800a004:	f7ff fff0 	bl	8009fe8 <__sinit_lock_acquire>
 800a008:	69a3      	ldr	r3, [r4, #24]
 800a00a:	b11b      	cbz	r3, 800a014 <__sinit+0x14>
 800a00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a010:	f7ff bff0 	b.w	8009ff4 <__sinit_lock_release>
 800a014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a018:	6523      	str	r3, [r4, #80]	; 0x50
 800a01a:	4b13      	ldr	r3, [pc, #76]	; (800a068 <__sinit+0x68>)
 800a01c:	4a13      	ldr	r2, [pc, #76]	; (800a06c <__sinit+0x6c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	62a2      	str	r2, [r4, #40]	; 0x28
 800a022:	42a3      	cmp	r3, r4
 800a024:	bf04      	itt	eq
 800a026:	2301      	moveq	r3, #1
 800a028:	61a3      	streq	r3, [r4, #24]
 800a02a:	4620      	mov	r0, r4
 800a02c:	f000 f820 	bl	800a070 <__sfp>
 800a030:	6060      	str	r0, [r4, #4]
 800a032:	4620      	mov	r0, r4
 800a034:	f000 f81c 	bl	800a070 <__sfp>
 800a038:	60a0      	str	r0, [r4, #8]
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 f818 	bl	800a070 <__sfp>
 800a040:	2200      	movs	r2, #0
 800a042:	60e0      	str	r0, [r4, #12]
 800a044:	2104      	movs	r1, #4
 800a046:	6860      	ldr	r0, [r4, #4]
 800a048:	f7ff ff82 	bl	8009f50 <std>
 800a04c:	68a0      	ldr	r0, [r4, #8]
 800a04e:	2201      	movs	r2, #1
 800a050:	2109      	movs	r1, #9
 800a052:	f7ff ff7d 	bl	8009f50 <std>
 800a056:	68e0      	ldr	r0, [r4, #12]
 800a058:	2202      	movs	r2, #2
 800a05a:	2112      	movs	r1, #18
 800a05c:	f7ff ff78 	bl	8009f50 <std>
 800a060:	2301      	movs	r3, #1
 800a062:	61a3      	str	r3, [r4, #24]
 800a064:	e7d2      	b.n	800a00c <__sinit+0xc>
 800a066:	bf00      	nop
 800a068:	0800c804 	.word	0x0800c804
 800a06c:	08009f99 	.word	0x08009f99

0800a070 <__sfp>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	4607      	mov	r7, r0
 800a074:	f7ff ffac 	bl	8009fd0 <__sfp_lock_acquire>
 800a078:	4b1e      	ldr	r3, [pc, #120]	; (800a0f4 <__sfp+0x84>)
 800a07a:	681e      	ldr	r6, [r3, #0]
 800a07c:	69b3      	ldr	r3, [r6, #24]
 800a07e:	b913      	cbnz	r3, 800a086 <__sfp+0x16>
 800a080:	4630      	mov	r0, r6
 800a082:	f7ff ffbd 	bl	800a000 <__sinit>
 800a086:	3648      	adds	r6, #72	; 0x48
 800a088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	d503      	bpl.n	800a098 <__sfp+0x28>
 800a090:	6833      	ldr	r3, [r6, #0]
 800a092:	b30b      	cbz	r3, 800a0d8 <__sfp+0x68>
 800a094:	6836      	ldr	r6, [r6, #0]
 800a096:	e7f7      	b.n	800a088 <__sfp+0x18>
 800a098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a09c:	b9d5      	cbnz	r5, 800a0d4 <__sfp+0x64>
 800a09e:	4b16      	ldr	r3, [pc, #88]	; (800a0f8 <__sfp+0x88>)
 800a0a0:	60e3      	str	r3, [r4, #12]
 800a0a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0a6:	6665      	str	r5, [r4, #100]	; 0x64
 800a0a8:	f000 f84c 	bl	800a144 <__retarget_lock_init_recursive>
 800a0ac:	f7ff ff96 	bl	8009fdc <__sfp_lock_release>
 800a0b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0b8:	6025      	str	r5, [r4, #0]
 800a0ba:	61a5      	str	r5, [r4, #24]
 800a0bc:	2208      	movs	r2, #8
 800a0be:	4629      	mov	r1, r5
 800a0c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0c4:	f7fe fa46 	bl	8008554 <memset>
 800a0c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d4:	3468      	adds	r4, #104	; 0x68
 800a0d6:	e7d9      	b.n	800a08c <__sfp+0x1c>
 800a0d8:	2104      	movs	r1, #4
 800a0da:	4638      	mov	r0, r7
 800a0dc:	f7ff ff62 	bl	8009fa4 <__sfmoreglue>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	6030      	str	r0, [r6, #0]
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d1d5      	bne.n	800a094 <__sfp+0x24>
 800a0e8:	f7ff ff78 	bl	8009fdc <__sfp_lock_release>
 800a0ec:	230c      	movs	r3, #12
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	e7ee      	b.n	800a0d0 <__sfp+0x60>
 800a0f2:	bf00      	nop
 800a0f4:	0800c804 	.word	0x0800c804
 800a0f8:	ffff0001 	.word	0xffff0001

0800a0fc <_fwalk_reent>:
 800a0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a100:	4606      	mov	r6, r0
 800a102:	4688      	mov	r8, r1
 800a104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a108:	2700      	movs	r7, #0
 800a10a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a10e:	f1b9 0901 	subs.w	r9, r9, #1
 800a112:	d505      	bpl.n	800a120 <_fwalk_reent+0x24>
 800a114:	6824      	ldr	r4, [r4, #0]
 800a116:	2c00      	cmp	r4, #0
 800a118:	d1f7      	bne.n	800a10a <_fwalk_reent+0xe>
 800a11a:	4638      	mov	r0, r7
 800a11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a120:	89ab      	ldrh	r3, [r5, #12]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d907      	bls.n	800a136 <_fwalk_reent+0x3a>
 800a126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a12a:	3301      	adds	r3, #1
 800a12c:	d003      	beq.n	800a136 <_fwalk_reent+0x3a>
 800a12e:	4629      	mov	r1, r5
 800a130:	4630      	mov	r0, r6
 800a132:	47c0      	blx	r8
 800a134:	4307      	orrs	r7, r0
 800a136:	3568      	adds	r5, #104	; 0x68
 800a138:	e7e9      	b.n	800a10e <_fwalk_reent+0x12>
	...

0800a13c <_localeconv_r>:
 800a13c:	4800      	ldr	r0, [pc, #0]	; (800a140 <_localeconv_r+0x4>)
 800a13e:	4770      	bx	lr
 800a140:	20000164 	.word	0x20000164

0800a144 <__retarget_lock_init_recursive>:
 800a144:	4770      	bx	lr

0800a146 <__retarget_lock_acquire_recursive>:
 800a146:	4770      	bx	lr

0800a148 <__retarget_lock_release_recursive>:
 800a148:	4770      	bx	lr

0800a14a <__swhatbuf_r>:
 800a14a:	b570      	push	{r4, r5, r6, lr}
 800a14c:	460e      	mov	r6, r1
 800a14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a152:	2900      	cmp	r1, #0
 800a154:	b096      	sub	sp, #88	; 0x58
 800a156:	4614      	mov	r4, r2
 800a158:	461d      	mov	r5, r3
 800a15a:	da08      	bge.n	800a16e <__swhatbuf_r+0x24>
 800a15c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	602a      	str	r2, [r5, #0]
 800a164:	061a      	lsls	r2, r3, #24
 800a166:	d410      	bmi.n	800a18a <__swhatbuf_r+0x40>
 800a168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a16c:	e00e      	b.n	800a18c <__swhatbuf_r+0x42>
 800a16e:	466a      	mov	r2, sp
 800a170:	f000 fee0 	bl	800af34 <_fstat_r>
 800a174:	2800      	cmp	r0, #0
 800a176:	dbf1      	blt.n	800a15c <__swhatbuf_r+0x12>
 800a178:	9a01      	ldr	r2, [sp, #4]
 800a17a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a17e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a182:	425a      	negs	r2, r3
 800a184:	415a      	adcs	r2, r3
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	e7ee      	b.n	800a168 <__swhatbuf_r+0x1e>
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	2000      	movs	r0, #0
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	b016      	add	sp, #88	; 0x58
 800a192:	bd70      	pop	{r4, r5, r6, pc}

0800a194 <__smakebuf_r>:
 800a194:	898b      	ldrh	r3, [r1, #12]
 800a196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a198:	079d      	lsls	r5, r3, #30
 800a19a:	4606      	mov	r6, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	d507      	bpl.n	800a1b0 <__smakebuf_r+0x1c>
 800a1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	6163      	str	r3, [r4, #20]
 800a1ac:	b002      	add	sp, #8
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	ab01      	add	r3, sp, #4
 800a1b2:	466a      	mov	r2, sp
 800a1b4:	f7ff ffc9 	bl	800a14a <__swhatbuf_r>
 800a1b8:	9900      	ldr	r1, [sp, #0]
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f000 fc45 	bl	800aa4c <_malloc_r>
 800a1c2:	b948      	cbnz	r0, 800a1d8 <__smakebuf_r+0x44>
 800a1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c8:	059a      	lsls	r2, r3, #22
 800a1ca:	d4ef      	bmi.n	800a1ac <__smakebuf_r+0x18>
 800a1cc:	f023 0303 	bic.w	r3, r3, #3
 800a1d0:	f043 0302 	orr.w	r3, r3, #2
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	e7e3      	b.n	800a1a0 <__smakebuf_r+0xc>
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <__smakebuf_r+0x7c>)
 800a1da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	6020      	str	r0, [r4, #0]
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	9b00      	ldr	r3, [sp, #0]
 800a1e8:	6163      	str	r3, [r4, #20]
 800a1ea:	9b01      	ldr	r3, [sp, #4]
 800a1ec:	6120      	str	r0, [r4, #16]
 800a1ee:	b15b      	cbz	r3, 800a208 <__smakebuf_r+0x74>
 800a1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f000 feaf 	bl	800af58 <_isatty_r>
 800a1fa:	b128      	cbz	r0, 800a208 <__smakebuf_r+0x74>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	f023 0303 	bic.w	r3, r3, #3
 800a202:	f043 0301 	orr.w	r3, r3, #1
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	89a0      	ldrh	r0, [r4, #12]
 800a20a:	4305      	orrs	r5, r0
 800a20c:	81a5      	strh	r5, [r4, #12]
 800a20e:	e7cd      	b.n	800a1ac <__smakebuf_r+0x18>
 800a210:	08009f99 	.word	0x08009f99

0800a214 <malloc>:
 800a214:	4b02      	ldr	r3, [pc, #8]	; (800a220 <malloc+0xc>)
 800a216:	4601      	mov	r1, r0
 800a218:	6818      	ldr	r0, [r3, #0]
 800a21a:	f000 bc17 	b.w	800aa4c <_malloc_r>
 800a21e:	bf00      	nop
 800a220:	20000010 	.word	0x20000010

0800a224 <memcpy>:
 800a224:	440a      	add	r2, r1
 800a226:	4291      	cmp	r1, r2
 800a228:	f100 33ff 	add.w	r3, r0, #4294967295
 800a22c:	d100      	bne.n	800a230 <memcpy+0xc>
 800a22e:	4770      	bx	lr
 800a230:	b510      	push	{r4, lr}
 800a232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a23a:	4291      	cmp	r1, r2
 800a23c:	d1f9      	bne.n	800a232 <memcpy+0xe>
 800a23e:	bd10      	pop	{r4, pc}

0800a240 <_Balloc>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a244:	4604      	mov	r4, r0
 800a246:	460d      	mov	r5, r1
 800a248:	b976      	cbnz	r6, 800a268 <_Balloc+0x28>
 800a24a:	2010      	movs	r0, #16
 800a24c:	f7ff ffe2 	bl	800a214 <malloc>
 800a250:	4602      	mov	r2, r0
 800a252:	6260      	str	r0, [r4, #36]	; 0x24
 800a254:	b920      	cbnz	r0, 800a260 <_Balloc+0x20>
 800a256:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <_Balloc+0x78>)
 800a258:	4818      	ldr	r0, [pc, #96]	; (800a2bc <_Balloc+0x7c>)
 800a25a:	2166      	movs	r1, #102	; 0x66
 800a25c:	f000 fe2a 	bl	800aeb4 <__assert_func>
 800a260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a264:	6006      	str	r6, [r0, #0]
 800a266:	60c6      	str	r6, [r0, #12]
 800a268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a26a:	68f3      	ldr	r3, [r6, #12]
 800a26c:	b183      	cbz	r3, 800a290 <_Balloc+0x50>
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a276:	b9b8      	cbnz	r0, 800a2a8 <_Balloc+0x68>
 800a278:	2101      	movs	r1, #1
 800a27a:	fa01 f605 	lsl.w	r6, r1, r5
 800a27e:	1d72      	adds	r2, r6, #5
 800a280:	0092      	lsls	r2, r2, #2
 800a282:	4620      	mov	r0, r4
 800a284:	f000 fb60 	bl	800a948 <_calloc_r>
 800a288:	b160      	cbz	r0, 800a2a4 <_Balloc+0x64>
 800a28a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a28e:	e00e      	b.n	800a2ae <_Balloc+0x6e>
 800a290:	2221      	movs	r2, #33	; 0x21
 800a292:	2104      	movs	r1, #4
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fb57 	bl	800a948 <_calloc_r>
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	60f0      	str	r0, [r6, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e4      	bne.n	800a26e <_Balloc+0x2e>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	6802      	ldr	r2, [r0, #0]
 800a2aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2b4:	e7f7      	b.n	800a2a6 <_Balloc+0x66>
 800a2b6:	bf00      	nop
 800a2b8:	0800c849 	.word	0x0800c849
 800a2bc:	0800c92c 	.word	0x0800c92c

0800a2c0 <_Bfree>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	b976      	cbnz	r6, 800a2e8 <_Bfree+0x28>
 800a2ca:	2010      	movs	r0, #16
 800a2cc:	f7ff ffa2 	bl	800a214 <malloc>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	6268      	str	r0, [r5, #36]	; 0x24
 800a2d4:	b920      	cbnz	r0, 800a2e0 <_Bfree+0x20>
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <_Bfree+0x3c>)
 800a2d8:	4809      	ldr	r0, [pc, #36]	; (800a300 <_Bfree+0x40>)
 800a2da:	218a      	movs	r1, #138	; 0x8a
 800a2dc:	f000 fdea 	bl	800aeb4 <__assert_func>
 800a2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2e4:	6006      	str	r6, [r0, #0]
 800a2e6:	60c6      	str	r6, [r0, #12]
 800a2e8:	b13c      	cbz	r4, 800a2fa <_Bfree+0x3a>
 800a2ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2ec:	6862      	ldr	r2, [r4, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2f4:	6021      	str	r1, [r4, #0]
 800a2f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	0800c849 	.word	0x0800c849
 800a300:	0800c92c 	.word	0x0800c92c

0800a304 <__multadd>:
 800a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a308:	690d      	ldr	r5, [r1, #16]
 800a30a:	4607      	mov	r7, r0
 800a30c:	460c      	mov	r4, r1
 800a30e:	461e      	mov	r6, r3
 800a310:	f101 0c14 	add.w	ip, r1, #20
 800a314:	2000      	movs	r0, #0
 800a316:	f8dc 3000 	ldr.w	r3, [ip]
 800a31a:	b299      	uxth	r1, r3
 800a31c:	fb02 6101 	mla	r1, r2, r1, r6
 800a320:	0c1e      	lsrs	r6, r3, #16
 800a322:	0c0b      	lsrs	r3, r1, #16
 800a324:	fb02 3306 	mla	r3, r2, r6, r3
 800a328:	b289      	uxth	r1, r1
 800a32a:	3001      	adds	r0, #1
 800a32c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a330:	4285      	cmp	r5, r0
 800a332:	f84c 1b04 	str.w	r1, [ip], #4
 800a336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a33a:	dcec      	bgt.n	800a316 <__multadd+0x12>
 800a33c:	b30e      	cbz	r6, 800a382 <__multadd+0x7e>
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	42ab      	cmp	r3, r5
 800a342:	dc19      	bgt.n	800a378 <__multadd+0x74>
 800a344:	6861      	ldr	r1, [r4, #4]
 800a346:	4638      	mov	r0, r7
 800a348:	3101      	adds	r1, #1
 800a34a:	f7ff ff79 	bl	800a240 <_Balloc>
 800a34e:	4680      	mov	r8, r0
 800a350:	b928      	cbnz	r0, 800a35e <__multadd+0x5a>
 800a352:	4602      	mov	r2, r0
 800a354:	4b0c      	ldr	r3, [pc, #48]	; (800a388 <__multadd+0x84>)
 800a356:	480d      	ldr	r0, [pc, #52]	; (800a38c <__multadd+0x88>)
 800a358:	21b5      	movs	r1, #181	; 0xb5
 800a35a:	f000 fdab 	bl	800aeb4 <__assert_func>
 800a35e:	6922      	ldr	r2, [r4, #16]
 800a360:	3202      	adds	r2, #2
 800a362:	f104 010c 	add.w	r1, r4, #12
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	300c      	adds	r0, #12
 800a36a:	f7ff ff5b 	bl	800a224 <memcpy>
 800a36e:	4621      	mov	r1, r4
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff ffa5 	bl	800a2c0 <_Bfree>
 800a376:	4644      	mov	r4, r8
 800a378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a37c:	3501      	adds	r5, #1
 800a37e:	615e      	str	r6, [r3, #20]
 800a380:	6125      	str	r5, [r4, #16]
 800a382:	4620      	mov	r0, r4
 800a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a388:	0800c8bb 	.word	0x0800c8bb
 800a38c:	0800c92c 	.word	0x0800c92c

0800a390 <__hi0bits>:
 800a390:	0c03      	lsrs	r3, r0, #16
 800a392:	041b      	lsls	r3, r3, #16
 800a394:	b9d3      	cbnz	r3, 800a3cc <__hi0bits+0x3c>
 800a396:	0400      	lsls	r0, r0, #16
 800a398:	2310      	movs	r3, #16
 800a39a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a39e:	bf04      	itt	eq
 800a3a0:	0200      	lsleq	r0, r0, #8
 800a3a2:	3308      	addeq	r3, #8
 800a3a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3a8:	bf04      	itt	eq
 800a3aa:	0100      	lsleq	r0, r0, #4
 800a3ac:	3304      	addeq	r3, #4
 800a3ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3b2:	bf04      	itt	eq
 800a3b4:	0080      	lsleq	r0, r0, #2
 800a3b6:	3302      	addeq	r3, #2
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	db05      	blt.n	800a3c8 <__hi0bits+0x38>
 800a3bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3c0:	f103 0301 	add.w	r3, r3, #1
 800a3c4:	bf08      	it	eq
 800a3c6:	2320      	moveq	r3, #32
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	4770      	bx	lr
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	e7e4      	b.n	800a39a <__hi0bits+0xa>

0800a3d0 <__lo0bits>:
 800a3d0:	6803      	ldr	r3, [r0, #0]
 800a3d2:	f013 0207 	ands.w	r2, r3, #7
 800a3d6:	4601      	mov	r1, r0
 800a3d8:	d00b      	beq.n	800a3f2 <__lo0bits+0x22>
 800a3da:	07da      	lsls	r2, r3, #31
 800a3dc:	d423      	bmi.n	800a426 <__lo0bits+0x56>
 800a3de:	0798      	lsls	r0, r3, #30
 800a3e0:	bf49      	itett	mi
 800a3e2:	085b      	lsrmi	r3, r3, #1
 800a3e4:	089b      	lsrpl	r3, r3, #2
 800a3e6:	2001      	movmi	r0, #1
 800a3e8:	600b      	strmi	r3, [r1, #0]
 800a3ea:	bf5c      	itt	pl
 800a3ec:	600b      	strpl	r3, [r1, #0]
 800a3ee:	2002      	movpl	r0, #2
 800a3f0:	4770      	bx	lr
 800a3f2:	b298      	uxth	r0, r3
 800a3f4:	b9a8      	cbnz	r0, 800a422 <__lo0bits+0x52>
 800a3f6:	0c1b      	lsrs	r3, r3, #16
 800a3f8:	2010      	movs	r0, #16
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	b90a      	cbnz	r2, 800a402 <__lo0bits+0x32>
 800a3fe:	3008      	adds	r0, #8
 800a400:	0a1b      	lsrs	r3, r3, #8
 800a402:	071a      	lsls	r2, r3, #28
 800a404:	bf04      	itt	eq
 800a406:	091b      	lsreq	r3, r3, #4
 800a408:	3004      	addeq	r0, #4
 800a40a:	079a      	lsls	r2, r3, #30
 800a40c:	bf04      	itt	eq
 800a40e:	089b      	lsreq	r3, r3, #2
 800a410:	3002      	addeq	r0, #2
 800a412:	07da      	lsls	r2, r3, #31
 800a414:	d403      	bmi.n	800a41e <__lo0bits+0x4e>
 800a416:	085b      	lsrs	r3, r3, #1
 800a418:	f100 0001 	add.w	r0, r0, #1
 800a41c:	d005      	beq.n	800a42a <__lo0bits+0x5a>
 800a41e:	600b      	str	r3, [r1, #0]
 800a420:	4770      	bx	lr
 800a422:	4610      	mov	r0, r2
 800a424:	e7e9      	b.n	800a3fa <__lo0bits+0x2a>
 800a426:	2000      	movs	r0, #0
 800a428:	4770      	bx	lr
 800a42a:	2020      	movs	r0, #32
 800a42c:	4770      	bx	lr
	...

0800a430 <__i2b>:
 800a430:	b510      	push	{r4, lr}
 800a432:	460c      	mov	r4, r1
 800a434:	2101      	movs	r1, #1
 800a436:	f7ff ff03 	bl	800a240 <_Balloc>
 800a43a:	4602      	mov	r2, r0
 800a43c:	b928      	cbnz	r0, 800a44a <__i2b+0x1a>
 800a43e:	4b05      	ldr	r3, [pc, #20]	; (800a454 <__i2b+0x24>)
 800a440:	4805      	ldr	r0, [pc, #20]	; (800a458 <__i2b+0x28>)
 800a442:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a446:	f000 fd35 	bl	800aeb4 <__assert_func>
 800a44a:	2301      	movs	r3, #1
 800a44c:	6144      	str	r4, [r0, #20]
 800a44e:	6103      	str	r3, [r0, #16]
 800a450:	bd10      	pop	{r4, pc}
 800a452:	bf00      	nop
 800a454:	0800c8bb 	.word	0x0800c8bb
 800a458:	0800c92c 	.word	0x0800c92c

0800a45c <__multiply>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	4691      	mov	r9, r2
 800a462:	690a      	ldr	r2, [r1, #16]
 800a464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a468:	429a      	cmp	r2, r3
 800a46a:	bfb8      	it	lt
 800a46c:	460b      	movlt	r3, r1
 800a46e:	460c      	mov	r4, r1
 800a470:	bfbc      	itt	lt
 800a472:	464c      	movlt	r4, r9
 800a474:	4699      	movlt	r9, r3
 800a476:	6927      	ldr	r7, [r4, #16]
 800a478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	6861      	ldr	r1, [r4, #4]
 800a480:	eb07 060a 	add.w	r6, r7, sl
 800a484:	42b3      	cmp	r3, r6
 800a486:	b085      	sub	sp, #20
 800a488:	bfb8      	it	lt
 800a48a:	3101      	addlt	r1, #1
 800a48c:	f7ff fed8 	bl	800a240 <_Balloc>
 800a490:	b930      	cbnz	r0, 800a4a0 <__multiply+0x44>
 800a492:	4602      	mov	r2, r0
 800a494:	4b44      	ldr	r3, [pc, #272]	; (800a5a8 <__multiply+0x14c>)
 800a496:	4845      	ldr	r0, [pc, #276]	; (800a5ac <__multiply+0x150>)
 800a498:	f240 115d 	movw	r1, #349	; 0x15d
 800a49c:	f000 fd0a 	bl	800aeb4 <__assert_func>
 800a4a0:	f100 0514 	add.w	r5, r0, #20
 800a4a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	4543      	cmp	r3, r8
 800a4ae:	d321      	bcc.n	800a4f4 <__multiply+0x98>
 800a4b0:	f104 0314 	add.w	r3, r4, #20
 800a4b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4b8:	f109 0314 	add.w	r3, r9, #20
 800a4bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4c0:	9202      	str	r2, [sp, #8]
 800a4c2:	1b3a      	subs	r2, r7, r4
 800a4c4:	3a15      	subs	r2, #21
 800a4c6:	f022 0203 	bic.w	r2, r2, #3
 800a4ca:	3204      	adds	r2, #4
 800a4cc:	f104 0115 	add.w	r1, r4, #21
 800a4d0:	428f      	cmp	r7, r1
 800a4d2:	bf38      	it	cc
 800a4d4:	2204      	movcc	r2, #4
 800a4d6:	9201      	str	r2, [sp, #4]
 800a4d8:	9a02      	ldr	r2, [sp, #8]
 800a4da:	9303      	str	r3, [sp, #12]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d80c      	bhi.n	800a4fa <__multiply+0x9e>
 800a4e0:	2e00      	cmp	r6, #0
 800a4e2:	dd03      	ble.n	800a4ec <__multiply+0x90>
 800a4e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d05a      	beq.n	800a5a2 <__multiply+0x146>
 800a4ec:	6106      	str	r6, [r0, #16]
 800a4ee:	b005      	add	sp, #20
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	f843 2b04 	str.w	r2, [r3], #4
 800a4f8:	e7d8      	b.n	800a4ac <__multiply+0x50>
 800a4fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4fe:	f1ba 0f00 	cmp.w	sl, #0
 800a502:	d024      	beq.n	800a54e <__multiply+0xf2>
 800a504:	f104 0e14 	add.w	lr, r4, #20
 800a508:	46a9      	mov	r9, r5
 800a50a:	f04f 0c00 	mov.w	ip, #0
 800a50e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a512:	f8d9 1000 	ldr.w	r1, [r9]
 800a516:	fa1f fb82 	uxth.w	fp, r2
 800a51a:	b289      	uxth	r1, r1
 800a51c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a524:	f8d9 2000 	ldr.w	r2, [r9]
 800a528:	4461      	add	r1, ip
 800a52a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a52e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a536:	b289      	uxth	r1, r1
 800a538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a53c:	4577      	cmp	r7, lr
 800a53e:	f849 1b04 	str.w	r1, [r9], #4
 800a542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a546:	d8e2      	bhi.n	800a50e <__multiply+0xb2>
 800a548:	9a01      	ldr	r2, [sp, #4]
 800a54a:	f845 c002 	str.w	ip, [r5, r2]
 800a54e:	9a03      	ldr	r2, [sp, #12]
 800a550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a554:	3304      	adds	r3, #4
 800a556:	f1b9 0f00 	cmp.w	r9, #0
 800a55a:	d020      	beq.n	800a59e <__multiply+0x142>
 800a55c:	6829      	ldr	r1, [r5, #0]
 800a55e:	f104 0c14 	add.w	ip, r4, #20
 800a562:	46ae      	mov	lr, r5
 800a564:	f04f 0a00 	mov.w	sl, #0
 800a568:	f8bc b000 	ldrh.w	fp, [ip]
 800a56c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a570:	fb09 220b 	mla	r2, r9, fp, r2
 800a574:	4492      	add	sl, r2
 800a576:	b289      	uxth	r1, r1
 800a578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a57c:	f84e 1b04 	str.w	r1, [lr], #4
 800a580:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a584:	f8be 1000 	ldrh.w	r1, [lr]
 800a588:	0c12      	lsrs	r2, r2, #16
 800a58a:	fb09 1102 	mla	r1, r9, r2, r1
 800a58e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a592:	4567      	cmp	r7, ip
 800a594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a598:	d8e6      	bhi.n	800a568 <__multiply+0x10c>
 800a59a:	9a01      	ldr	r2, [sp, #4]
 800a59c:	50a9      	str	r1, [r5, r2]
 800a59e:	3504      	adds	r5, #4
 800a5a0:	e79a      	b.n	800a4d8 <__multiply+0x7c>
 800a5a2:	3e01      	subs	r6, #1
 800a5a4:	e79c      	b.n	800a4e0 <__multiply+0x84>
 800a5a6:	bf00      	nop
 800a5a8:	0800c8bb 	.word	0x0800c8bb
 800a5ac:	0800c92c 	.word	0x0800c92c

0800a5b0 <__pow5mult>:
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	4615      	mov	r5, r2
 800a5b6:	f012 0203 	ands.w	r2, r2, #3
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	460f      	mov	r7, r1
 800a5be:	d007      	beq.n	800a5d0 <__pow5mult+0x20>
 800a5c0:	4c25      	ldr	r4, [pc, #148]	; (800a658 <__pow5mult+0xa8>)
 800a5c2:	3a01      	subs	r2, #1
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5ca:	f7ff fe9b 	bl	800a304 <__multadd>
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	10ad      	asrs	r5, r5, #2
 800a5d2:	d03d      	beq.n	800a650 <__pow5mult+0xa0>
 800a5d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5d6:	b97c      	cbnz	r4, 800a5f8 <__pow5mult+0x48>
 800a5d8:	2010      	movs	r0, #16
 800a5da:	f7ff fe1b 	bl	800a214 <malloc>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	6270      	str	r0, [r6, #36]	; 0x24
 800a5e2:	b928      	cbnz	r0, 800a5f0 <__pow5mult+0x40>
 800a5e4:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <__pow5mult+0xac>)
 800a5e6:	481e      	ldr	r0, [pc, #120]	; (800a660 <__pow5mult+0xb0>)
 800a5e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5ec:	f000 fc62 	bl	800aeb4 <__assert_func>
 800a5f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5f4:	6004      	str	r4, [r0, #0]
 800a5f6:	60c4      	str	r4, [r0, #12]
 800a5f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a600:	b94c      	cbnz	r4, 800a616 <__pow5mult+0x66>
 800a602:	f240 2171 	movw	r1, #625	; 0x271
 800a606:	4630      	mov	r0, r6
 800a608:	f7ff ff12 	bl	800a430 <__i2b>
 800a60c:	2300      	movs	r3, #0
 800a60e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a612:	4604      	mov	r4, r0
 800a614:	6003      	str	r3, [r0, #0]
 800a616:	f04f 0900 	mov.w	r9, #0
 800a61a:	07eb      	lsls	r3, r5, #31
 800a61c:	d50a      	bpl.n	800a634 <__pow5mult+0x84>
 800a61e:	4639      	mov	r1, r7
 800a620:	4622      	mov	r2, r4
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ff1a 	bl	800a45c <__multiply>
 800a628:	4639      	mov	r1, r7
 800a62a:	4680      	mov	r8, r0
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff fe47 	bl	800a2c0 <_Bfree>
 800a632:	4647      	mov	r7, r8
 800a634:	106d      	asrs	r5, r5, #1
 800a636:	d00b      	beq.n	800a650 <__pow5mult+0xa0>
 800a638:	6820      	ldr	r0, [r4, #0]
 800a63a:	b938      	cbnz	r0, 800a64c <__pow5mult+0x9c>
 800a63c:	4622      	mov	r2, r4
 800a63e:	4621      	mov	r1, r4
 800a640:	4630      	mov	r0, r6
 800a642:	f7ff ff0b 	bl	800a45c <__multiply>
 800a646:	6020      	str	r0, [r4, #0]
 800a648:	f8c0 9000 	str.w	r9, [r0]
 800a64c:	4604      	mov	r4, r0
 800a64e:	e7e4      	b.n	800a61a <__pow5mult+0x6a>
 800a650:	4638      	mov	r0, r7
 800a652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a656:	bf00      	nop
 800a658:	0800ca78 	.word	0x0800ca78
 800a65c:	0800c849 	.word	0x0800c849
 800a660:	0800c92c 	.word	0x0800c92c

0800a664 <__lshift>:
 800a664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a668:	460c      	mov	r4, r1
 800a66a:	6849      	ldr	r1, [r1, #4]
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a672:	68a3      	ldr	r3, [r4, #8]
 800a674:	4607      	mov	r7, r0
 800a676:	4691      	mov	r9, r2
 800a678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a67c:	f108 0601 	add.w	r6, r8, #1
 800a680:	42b3      	cmp	r3, r6
 800a682:	db0b      	blt.n	800a69c <__lshift+0x38>
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff fddb 	bl	800a240 <_Balloc>
 800a68a:	4605      	mov	r5, r0
 800a68c:	b948      	cbnz	r0, 800a6a2 <__lshift+0x3e>
 800a68e:	4602      	mov	r2, r0
 800a690:	4b2a      	ldr	r3, [pc, #168]	; (800a73c <__lshift+0xd8>)
 800a692:	482b      	ldr	r0, [pc, #172]	; (800a740 <__lshift+0xdc>)
 800a694:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a698:	f000 fc0c 	bl	800aeb4 <__assert_func>
 800a69c:	3101      	adds	r1, #1
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	e7ee      	b.n	800a680 <__lshift+0x1c>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f100 0114 	add.w	r1, r0, #20
 800a6a8:	f100 0210 	add.w	r2, r0, #16
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	4553      	cmp	r3, sl
 800a6b0:	db37      	blt.n	800a722 <__lshift+0xbe>
 800a6b2:	6920      	ldr	r0, [r4, #16]
 800a6b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6b8:	f104 0314 	add.w	r3, r4, #20
 800a6bc:	f019 091f 	ands.w	r9, r9, #31
 800a6c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6c8:	d02f      	beq.n	800a72a <__lshift+0xc6>
 800a6ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ce:	468a      	mov	sl, r1
 800a6d0:	f04f 0c00 	mov.w	ip, #0
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	fa02 f209 	lsl.w	r2, r2, r9
 800a6da:	ea42 020c 	orr.w	r2, r2, ip
 800a6de:	f84a 2b04 	str.w	r2, [sl], #4
 800a6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e6:	4298      	cmp	r0, r3
 800a6e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6ec:	d8f2      	bhi.n	800a6d4 <__lshift+0x70>
 800a6ee:	1b03      	subs	r3, r0, r4
 800a6f0:	3b15      	subs	r3, #21
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	f104 0215 	add.w	r2, r4, #21
 800a6fc:	4290      	cmp	r0, r2
 800a6fe:	bf38      	it	cc
 800a700:	2304      	movcc	r3, #4
 800a702:	f841 c003 	str.w	ip, [r1, r3]
 800a706:	f1bc 0f00 	cmp.w	ip, #0
 800a70a:	d001      	beq.n	800a710 <__lshift+0xac>
 800a70c:	f108 0602 	add.w	r6, r8, #2
 800a710:	3e01      	subs	r6, #1
 800a712:	4638      	mov	r0, r7
 800a714:	612e      	str	r6, [r5, #16]
 800a716:	4621      	mov	r1, r4
 800a718:	f7ff fdd2 	bl	800a2c0 <_Bfree>
 800a71c:	4628      	mov	r0, r5
 800a71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a722:	f842 0f04 	str.w	r0, [r2, #4]!
 800a726:	3301      	adds	r3, #1
 800a728:	e7c1      	b.n	800a6ae <__lshift+0x4a>
 800a72a:	3904      	subs	r1, #4
 800a72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a730:	f841 2f04 	str.w	r2, [r1, #4]!
 800a734:	4298      	cmp	r0, r3
 800a736:	d8f9      	bhi.n	800a72c <__lshift+0xc8>
 800a738:	e7ea      	b.n	800a710 <__lshift+0xac>
 800a73a:	bf00      	nop
 800a73c:	0800c8bb 	.word	0x0800c8bb
 800a740:	0800c92c 	.word	0x0800c92c

0800a744 <__mcmp>:
 800a744:	b530      	push	{r4, r5, lr}
 800a746:	6902      	ldr	r2, [r0, #16]
 800a748:	690c      	ldr	r4, [r1, #16]
 800a74a:	1b12      	subs	r2, r2, r4
 800a74c:	d10e      	bne.n	800a76c <__mcmp+0x28>
 800a74e:	f100 0314 	add.w	r3, r0, #20
 800a752:	3114      	adds	r1, #20
 800a754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a75c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a764:	42a5      	cmp	r5, r4
 800a766:	d003      	beq.n	800a770 <__mcmp+0x2c>
 800a768:	d305      	bcc.n	800a776 <__mcmp+0x32>
 800a76a:	2201      	movs	r2, #1
 800a76c:	4610      	mov	r0, r2
 800a76e:	bd30      	pop	{r4, r5, pc}
 800a770:	4283      	cmp	r3, r0
 800a772:	d3f3      	bcc.n	800a75c <__mcmp+0x18>
 800a774:	e7fa      	b.n	800a76c <__mcmp+0x28>
 800a776:	f04f 32ff 	mov.w	r2, #4294967295
 800a77a:	e7f7      	b.n	800a76c <__mcmp+0x28>

0800a77c <__mdiff>:
 800a77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	460c      	mov	r4, r1
 800a782:	4606      	mov	r6, r0
 800a784:	4611      	mov	r1, r2
 800a786:	4620      	mov	r0, r4
 800a788:	4690      	mov	r8, r2
 800a78a:	f7ff ffdb 	bl	800a744 <__mcmp>
 800a78e:	1e05      	subs	r5, r0, #0
 800a790:	d110      	bne.n	800a7b4 <__mdiff+0x38>
 800a792:	4629      	mov	r1, r5
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff fd53 	bl	800a240 <_Balloc>
 800a79a:	b930      	cbnz	r0, 800a7aa <__mdiff+0x2e>
 800a79c:	4b3a      	ldr	r3, [pc, #232]	; (800a888 <__mdiff+0x10c>)
 800a79e:	4602      	mov	r2, r0
 800a7a0:	f240 2132 	movw	r1, #562	; 0x232
 800a7a4:	4839      	ldr	r0, [pc, #228]	; (800a88c <__mdiff+0x110>)
 800a7a6:	f000 fb85 	bl	800aeb4 <__assert_func>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b4:	bfa4      	itt	ge
 800a7b6:	4643      	movge	r3, r8
 800a7b8:	46a0      	movge	r8, r4
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7c0:	bfa6      	itte	ge
 800a7c2:	461c      	movge	r4, r3
 800a7c4:	2500      	movge	r5, #0
 800a7c6:	2501      	movlt	r5, #1
 800a7c8:	f7ff fd3a 	bl	800a240 <_Balloc>
 800a7cc:	b920      	cbnz	r0, 800a7d8 <__mdiff+0x5c>
 800a7ce:	4b2e      	ldr	r3, [pc, #184]	; (800a888 <__mdiff+0x10c>)
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7d6:	e7e5      	b.n	800a7a4 <__mdiff+0x28>
 800a7d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7dc:	6926      	ldr	r6, [r4, #16]
 800a7de:	60c5      	str	r5, [r0, #12]
 800a7e0:	f104 0914 	add.w	r9, r4, #20
 800a7e4:	f108 0514 	add.w	r5, r8, #20
 800a7e8:	f100 0e14 	add.w	lr, r0, #20
 800a7ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7f4:	f108 0210 	add.w	r2, r8, #16
 800a7f8:	46f2      	mov	sl, lr
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a800:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a804:	fa1f f883 	uxth.w	r8, r3
 800a808:	fa11 f18b 	uxtah	r1, r1, fp
 800a80c:	0c1b      	lsrs	r3, r3, #16
 800a80e:	eba1 0808 	sub.w	r8, r1, r8
 800a812:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a816:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a81a:	fa1f f888 	uxth.w	r8, r8
 800a81e:	1419      	asrs	r1, r3, #16
 800a820:	454e      	cmp	r6, r9
 800a822:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a826:	f84a 3b04 	str.w	r3, [sl], #4
 800a82a:	d8e7      	bhi.n	800a7fc <__mdiff+0x80>
 800a82c:	1b33      	subs	r3, r6, r4
 800a82e:	3b15      	subs	r3, #21
 800a830:	f023 0303 	bic.w	r3, r3, #3
 800a834:	3304      	adds	r3, #4
 800a836:	3415      	adds	r4, #21
 800a838:	42a6      	cmp	r6, r4
 800a83a:	bf38      	it	cc
 800a83c:	2304      	movcc	r3, #4
 800a83e:	441d      	add	r5, r3
 800a840:	4473      	add	r3, lr
 800a842:	469e      	mov	lr, r3
 800a844:	462e      	mov	r6, r5
 800a846:	4566      	cmp	r6, ip
 800a848:	d30e      	bcc.n	800a868 <__mdiff+0xec>
 800a84a:	f10c 0203 	add.w	r2, ip, #3
 800a84e:	1b52      	subs	r2, r2, r5
 800a850:	f022 0203 	bic.w	r2, r2, #3
 800a854:	3d03      	subs	r5, #3
 800a856:	45ac      	cmp	ip, r5
 800a858:	bf38      	it	cc
 800a85a:	2200      	movcc	r2, #0
 800a85c:	441a      	add	r2, r3
 800a85e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a862:	b17b      	cbz	r3, 800a884 <__mdiff+0x108>
 800a864:	6107      	str	r7, [r0, #16]
 800a866:	e7a3      	b.n	800a7b0 <__mdiff+0x34>
 800a868:	f856 8b04 	ldr.w	r8, [r6], #4
 800a86c:	fa11 f288 	uxtah	r2, r1, r8
 800a870:	1414      	asrs	r4, r2, #16
 800a872:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a876:	b292      	uxth	r2, r2
 800a878:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a87c:	f84e 2b04 	str.w	r2, [lr], #4
 800a880:	1421      	asrs	r1, r4, #16
 800a882:	e7e0      	b.n	800a846 <__mdiff+0xca>
 800a884:	3f01      	subs	r7, #1
 800a886:	e7ea      	b.n	800a85e <__mdiff+0xe2>
 800a888:	0800c8bb 	.word	0x0800c8bb
 800a88c:	0800c92c 	.word	0x0800c92c

0800a890 <__d2b>:
 800a890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a894:	4689      	mov	r9, r1
 800a896:	2101      	movs	r1, #1
 800a898:	ec57 6b10 	vmov	r6, r7, d0
 800a89c:	4690      	mov	r8, r2
 800a89e:	f7ff fccf 	bl	800a240 <_Balloc>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	b930      	cbnz	r0, 800a8b4 <__d2b+0x24>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4b25      	ldr	r3, [pc, #148]	; (800a940 <__d2b+0xb0>)
 800a8aa:	4826      	ldr	r0, [pc, #152]	; (800a944 <__d2b+0xb4>)
 800a8ac:	f240 310a 	movw	r1, #778	; 0x30a
 800a8b0:	f000 fb00 	bl	800aeb4 <__assert_func>
 800a8b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8bc:	bb35      	cbnz	r5, 800a90c <__d2b+0x7c>
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	d028      	beq.n	800a916 <__d2b+0x86>
 800a8c4:	4668      	mov	r0, sp
 800a8c6:	9600      	str	r6, [sp, #0]
 800a8c8:	f7ff fd82 	bl	800a3d0 <__lo0bits>
 800a8cc:	9900      	ldr	r1, [sp, #0]
 800a8ce:	b300      	cbz	r0, 800a912 <__d2b+0x82>
 800a8d0:	9a01      	ldr	r2, [sp, #4]
 800a8d2:	f1c0 0320 	rsb	r3, r0, #32
 800a8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8da:	430b      	orrs	r3, r1
 800a8dc:	40c2      	lsrs	r2, r0
 800a8de:	6163      	str	r3, [r4, #20]
 800a8e0:	9201      	str	r2, [sp, #4]
 800a8e2:	9b01      	ldr	r3, [sp, #4]
 800a8e4:	61a3      	str	r3, [r4, #24]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bf14      	ite	ne
 800a8ea:	2202      	movne	r2, #2
 800a8ec:	2201      	moveq	r2, #1
 800a8ee:	6122      	str	r2, [r4, #16]
 800a8f0:	b1d5      	cbz	r5, 800a928 <__d2b+0x98>
 800a8f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8f6:	4405      	add	r5, r0
 800a8f8:	f8c9 5000 	str.w	r5, [r9]
 800a8fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a900:	f8c8 0000 	str.w	r0, [r8]
 800a904:	4620      	mov	r0, r4
 800a906:	b003      	add	sp, #12
 800a908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a90c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a910:	e7d5      	b.n	800a8be <__d2b+0x2e>
 800a912:	6161      	str	r1, [r4, #20]
 800a914:	e7e5      	b.n	800a8e2 <__d2b+0x52>
 800a916:	a801      	add	r0, sp, #4
 800a918:	f7ff fd5a 	bl	800a3d0 <__lo0bits>
 800a91c:	9b01      	ldr	r3, [sp, #4]
 800a91e:	6163      	str	r3, [r4, #20]
 800a920:	2201      	movs	r2, #1
 800a922:	6122      	str	r2, [r4, #16]
 800a924:	3020      	adds	r0, #32
 800a926:	e7e3      	b.n	800a8f0 <__d2b+0x60>
 800a928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a92c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a930:	f8c9 0000 	str.w	r0, [r9]
 800a934:	6918      	ldr	r0, [r3, #16]
 800a936:	f7ff fd2b 	bl	800a390 <__hi0bits>
 800a93a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a93e:	e7df      	b.n	800a900 <__d2b+0x70>
 800a940:	0800c8bb 	.word	0x0800c8bb
 800a944:	0800c92c 	.word	0x0800c92c

0800a948 <_calloc_r>:
 800a948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a94a:	fba1 2402 	umull	r2, r4, r1, r2
 800a94e:	b94c      	cbnz	r4, 800a964 <_calloc_r+0x1c>
 800a950:	4611      	mov	r1, r2
 800a952:	9201      	str	r2, [sp, #4]
 800a954:	f000 f87a 	bl	800aa4c <_malloc_r>
 800a958:	9a01      	ldr	r2, [sp, #4]
 800a95a:	4605      	mov	r5, r0
 800a95c:	b930      	cbnz	r0, 800a96c <_calloc_r+0x24>
 800a95e:	4628      	mov	r0, r5
 800a960:	b003      	add	sp, #12
 800a962:	bd30      	pop	{r4, r5, pc}
 800a964:	220c      	movs	r2, #12
 800a966:	6002      	str	r2, [r0, #0]
 800a968:	2500      	movs	r5, #0
 800a96a:	e7f8      	b.n	800a95e <_calloc_r+0x16>
 800a96c:	4621      	mov	r1, r4
 800a96e:	f7fd fdf1 	bl	8008554 <memset>
 800a972:	e7f4      	b.n	800a95e <_calloc_r+0x16>

0800a974 <_free_r>:
 800a974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a976:	2900      	cmp	r1, #0
 800a978:	d044      	beq.n	800aa04 <_free_r+0x90>
 800a97a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a97e:	9001      	str	r0, [sp, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	f1a1 0404 	sub.w	r4, r1, #4
 800a986:	bfb8      	it	lt
 800a988:	18e4      	addlt	r4, r4, r3
 800a98a:	f000 fb19 	bl	800afc0 <__malloc_lock>
 800a98e:	4a1e      	ldr	r2, [pc, #120]	; (800aa08 <_free_r+0x94>)
 800a990:	9801      	ldr	r0, [sp, #4]
 800a992:	6813      	ldr	r3, [r2, #0]
 800a994:	b933      	cbnz	r3, 800a9a4 <_free_r+0x30>
 800a996:	6063      	str	r3, [r4, #4]
 800a998:	6014      	str	r4, [r2, #0]
 800a99a:	b003      	add	sp, #12
 800a99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9a0:	f000 bb14 	b.w	800afcc <__malloc_unlock>
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d908      	bls.n	800a9ba <_free_r+0x46>
 800a9a8:	6825      	ldr	r5, [r4, #0]
 800a9aa:	1961      	adds	r1, r4, r5
 800a9ac:	428b      	cmp	r3, r1
 800a9ae:	bf01      	itttt	eq
 800a9b0:	6819      	ldreq	r1, [r3, #0]
 800a9b2:	685b      	ldreq	r3, [r3, #4]
 800a9b4:	1949      	addeq	r1, r1, r5
 800a9b6:	6021      	streq	r1, [r4, #0]
 800a9b8:	e7ed      	b.n	800a996 <_free_r+0x22>
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	b10b      	cbz	r3, 800a9c4 <_free_r+0x50>
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d9fa      	bls.n	800a9ba <_free_r+0x46>
 800a9c4:	6811      	ldr	r1, [r2, #0]
 800a9c6:	1855      	adds	r5, r2, r1
 800a9c8:	42a5      	cmp	r5, r4
 800a9ca:	d10b      	bne.n	800a9e4 <_free_r+0x70>
 800a9cc:	6824      	ldr	r4, [r4, #0]
 800a9ce:	4421      	add	r1, r4
 800a9d0:	1854      	adds	r4, r2, r1
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	6011      	str	r1, [r2, #0]
 800a9d6:	d1e0      	bne.n	800a99a <_free_r+0x26>
 800a9d8:	681c      	ldr	r4, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	6053      	str	r3, [r2, #4]
 800a9de:	4421      	add	r1, r4
 800a9e0:	6011      	str	r1, [r2, #0]
 800a9e2:	e7da      	b.n	800a99a <_free_r+0x26>
 800a9e4:	d902      	bls.n	800a9ec <_free_r+0x78>
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	6003      	str	r3, [r0, #0]
 800a9ea:	e7d6      	b.n	800a99a <_free_r+0x26>
 800a9ec:	6825      	ldr	r5, [r4, #0]
 800a9ee:	1961      	adds	r1, r4, r5
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf04      	itt	eq
 800a9f4:	6819      	ldreq	r1, [r3, #0]
 800a9f6:	685b      	ldreq	r3, [r3, #4]
 800a9f8:	6063      	str	r3, [r4, #4]
 800a9fa:	bf04      	itt	eq
 800a9fc:	1949      	addeq	r1, r1, r5
 800a9fe:	6021      	streq	r1, [r4, #0]
 800aa00:	6054      	str	r4, [r2, #4]
 800aa02:	e7ca      	b.n	800a99a <_free_r+0x26>
 800aa04:	b003      	add	sp, #12
 800aa06:	bd30      	pop	{r4, r5, pc}
 800aa08:	200005d8 	.word	0x200005d8

0800aa0c <sbrk_aligned>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	4e0e      	ldr	r6, [pc, #56]	; (800aa48 <sbrk_aligned+0x3c>)
 800aa10:	460c      	mov	r4, r1
 800aa12:	6831      	ldr	r1, [r6, #0]
 800aa14:	4605      	mov	r5, r0
 800aa16:	b911      	cbnz	r1, 800aa1e <sbrk_aligned+0x12>
 800aa18:	f000 f9e6 	bl	800ade8 <_sbrk_r>
 800aa1c:	6030      	str	r0, [r6, #0]
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4628      	mov	r0, r5
 800aa22:	f000 f9e1 	bl	800ade8 <_sbrk_r>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	d00a      	beq.n	800aa40 <sbrk_aligned+0x34>
 800aa2a:	1cc4      	adds	r4, r0, #3
 800aa2c:	f024 0403 	bic.w	r4, r4, #3
 800aa30:	42a0      	cmp	r0, r4
 800aa32:	d007      	beq.n	800aa44 <sbrk_aligned+0x38>
 800aa34:	1a21      	subs	r1, r4, r0
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f9d6 	bl	800ade8 <_sbrk_r>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d101      	bne.n	800aa44 <sbrk_aligned+0x38>
 800aa40:	f04f 34ff 	mov.w	r4, #4294967295
 800aa44:	4620      	mov	r0, r4
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	200005dc 	.word	0x200005dc

0800aa4c <_malloc_r>:
 800aa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa50:	1ccd      	adds	r5, r1, #3
 800aa52:	f025 0503 	bic.w	r5, r5, #3
 800aa56:	3508      	adds	r5, #8
 800aa58:	2d0c      	cmp	r5, #12
 800aa5a:	bf38      	it	cc
 800aa5c:	250c      	movcc	r5, #12
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	4607      	mov	r7, r0
 800aa62:	db01      	blt.n	800aa68 <_malloc_r+0x1c>
 800aa64:	42a9      	cmp	r1, r5
 800aa66:	d905      	bls.n	800aa74 <_malloc_r+0x28>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	2600      	movs	r6, #0
 800aa6e:	4630      	mov	r0, r6
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa74:	4e2e      	ldr	r6, [pc, #184]	; (800ab30 <_malloc_r+0xe4>)
 800aa76:	f000 faa3 	bl	800afc0 <__malloc_lock>
 800aa7a:	6833      	ldr	r3, [r6, #0]
 800aa7c:	461c      	mov	r4, r3
 800aa7e:	bb34      	cbnz	r4, 800aace <_malloc_r+0x82>
 800aa80:	4629      	mov	r1, r5
 800aa82:	4638      	mov	r0, r7
 800aa84:	f7ff ffc2 	bl	800aa0c <sbrk_aligned>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	d14d      	bne.n	800ab2a <_malloc_r+0xde>
 800aa8e:	6834      	ldr	r4, [r6, #0]
 800aa90:	4626      	mov	r6, r4
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	d140      	bne.n	800ab18 <_malloc_r+0xcc>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	4631      	mov	r1, r6
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	eb04 0803 	add.w	r8, r4, r3
 800aaa0:	f000 f9a2 	bl	800ade8 <_sbrk_r>
 800aaa4:	4580      	cmp	r8, r0
 800aaa6:	d13a      	bne.n	800ab1e <_malloc_r+0xd2>
 800aaa8:	6821      	ldr	r1, [r4, #0]
 800aaaa:	3503      	adds	r5, #3
 800aaac:	1a6d      	subs	r5, r5, r1
 800aaae:	f025 0503 	bic.w	r5, r5, #3
 800aab2:	3508      	adds	r5, #8
 800aab4:	2d0c      	cmp	r5, #12
 800aab6:	bf38      	it	cc
 800aab8:	250c      	movcc	r5, #12
 800aaba:	4629      	mov	r1, r5
 800aabc:	4638      	mov	r0, r7
 800aabe:	f7ff ffa5 	bl	800aa0c <sbrk_aligned>
 800aac2:	3001      	adds	r0, #1
 800aac4:	d02b      	beq.n	800ab1e <_malloc_r+0xd2>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	442b      	add	r3, r5
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	e00e      	b.n	800aaec <_malloc_r+0xa0>
 800aace:	6822      	ldr	r2, [r4, #0]
 800aad0:	1b52      	subs	r2, r2, r5
 800aad2:	d41e      	bmi.n	800ab12 <_malloc_r+0xc6>
 800aad4:	2a0b      	cmp	r2, #11
 800aad6:	d916      	bls.n	800ab06 <_malloc_r+0xba>
 800aad8:	1961      	adds	r1, r4, r5
 800aada:	42a3      	cmp	r3, r4
 800aadc:	6025      	str	r5, [r4, #0]
 800aade:	bf18      	it	ne
 800aae0:	6059      	strne	r1, [r3, #4]
 800aae2:	6863      	ldr	r3, [r4, #4]
 800aae4:	bf08      	it	eq
 800aae6:	6031      	streq	r1, [r6, #0]
 800aae8:	5162      	str	r2, [r4, r5]
 800aaea:	604b      	str	r3, [r1, #4]
 800aaec:	4638      	mov	r0, r7
 800aaee:	f104 060b 	add.w	r6, r4, #11
 800aaf2:	f000 fa6b 	bl	800afcc <__malloc_unlock>
 800aaf6:	f026 0607 	bic.w	r6, r6, #7
 800aafa:	1d23      	adds	r3, r4, #4
 800aafc:	1af2      	subs	r2, r6, r3
 800aafe:	d0b6      	beq.n	800aa6e <_malloc_r+0x22>
 800ab00:	1b9b      	subs	r3, r3, r6
 800ab02:	50a3      	str	r3, [r4, r2]
 800ab04:	e7b3      	b.n	800aa6e <_malloc_r+0x22>
 800ab06:	6862      	ldr	r2, [r4, #4]
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	bf0c      	ite	eq
 800ab0c:	6032      	streq	r2, [r6, #0]
 800ab0e:	605a      	strne	r2, [r3, #4]
 800ab10:	e7ec      	b.n	800aaec <_malloc_r+0xa0>
 800ab12:	4623      	mov	r3, r4
 800ab14:	6864      	ldr	r4, [r4, #4]
 800ab16:	e7b2      	b.n	800aa7e <_malloc_r+0x32>
 800ab18:	4634      	mov	r4, r6
 800ab1a:	6876      	ldr	r6, [r6, #4]
 800ab1c:	e7b9      	b.n	800aa92 <_malloc_r+0x46>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	603b      	str	r3, [r7, #0]
 800ab22:	4638      	mov	r0, r7
 800ab24:	f000 fa52 	bl	800afcc <__malloc_unlock>
 800ab28:	e7a1      	b.n	800aa6e <_malloc_r+0x22>
 800ab2a:	6025      	str	r5, [r4, #0]
 800ab2c:	e7de      	b.n	800aaec <_malloc_r+0xa0>
 800ab2e:	bf00      	nop
 800ab30:	200005d8 	.word	0x200005d8

0800ab34 <__sfputc_r>:
 800ab34:	6893      	ldr	r3, [r2, #8]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	b410      	push	{r4}
 800ab3c:	6093      	str	r3, [r2, #8]
 800ab3e:	da08      	bge.n	800ab52 <__sfputc_r+0x1e>
 800ab40:	6994      	ldr	r4, [r2, #24]
 800ab42:	42a3      	cmp	r3, r4
 800ab44:	db01      	blt.n	800ab4a <__sfputc_r+0x16>
 800ab46:	290a      	cmp	r1, #10
 800ab48:	d103      	bne.n	800ab52 <__sfputc_r+0x1e>
 800ab4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab4e:	f7fe ba01 	b.w	8008f54 <__swbuf_r>
 800ab52:	6813      	ldr	r3, [r2, #0]
 800ab54:	1c58      	adds	r0, r3, #1
 800ab56:	6010      	str	r0, [r2, #0]
 800ab58:	7019      	strb	r1, [r3, #0]
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <__sfputs_r>:
 800ab62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab64:	4606      	mov	r6, r0
 800ab66:	460f      	mov	r7, r1
 800ab68:	4614      	mov	r4, r2
 800ab6a:	18d5      	adds	r5, r2, r3
 800ab6c:	42ac      	cmp	r4, r5
 800ab6e:	d101      	bne.n	800ab74 <__sfputs_r+0x12>
 800ab70:	2000      	movs	r0, #0
 800ab72:	e007      	b.n	800ab84 <__sfputs_r+0x22>
 800ab74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab78:	463a      	mov	r2, r7
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f7ff ffda 	bl	800ab34 <__sfputc_r>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d1f3      	bne.n	800ab6c <__sfputs_r+0xa>
 800ab84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab88 <_vfiprintf_r>:
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	b09d      	sub	sp, #116	; 0x74
 800ab90:	4614      	mov	r4, r2
 800ab92:	4698      	mov	r8, r3
 800ab94:	4606      	mov	r6, r0
 800ab96:	b118      	cbz	r0, 800aba0 <_vfiprintf_r+0x18>
 800ab98:	6983      	ldr	r3, [r0, #24]
 800ab9a:	b90b      	cbnz	r3, 800aba0 <_vfiprintf_r+0x18>
 800ab9c:	f7ff fa30 	bl	800a000 <__sinit>
 800aba0:	4b89      	ldr	r3, [pc, #548]	; (800adc8 <_vfiprintf_r+0x240>)
 800aba2:	429d      	cmp	r5, r3
 800aba4:	d11b      	bne.n	800abde <_vfiprintf_r+0x56>
 800aba6:	6875      	ldr	r5, [r6, #4]
 800aba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abaa:	07d9      	lsls	r1, r3, #31
 800abac:	d405      	bmi.n	800abba <_vfiprintf_r+0x32>
 800abae:	89ab      	ldrh	r3, [r5, #12]
 800abb0:	059a      	lsls	r2, r3, #22
 800abb2:	d402      	bmi.n	800abba <_vfiprintf_r+0x32>
 800abb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abb6:	f7ff fac6 	bl	800a146 <__retarget_lock_acquire_recursive>
 800abba:	89ab      	ldrh	r3, [r5, #12]
 800abbc:	071b      	lsls	r3, r3, #28
 800abbe:	d501      	bpl.n	800abc4 <_vfiprintf_r+0x3c>
 800abc0:	692b      	ldr	r3, [r5, #16]
 800abc2:	b9eb      	cbnz	r3, 800ac00 <_vfiprintf_r+0x78>
 800abc4:	4629      	mov	r1, r5
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7fe fa16 	bl	8008ff8 <__swsetup_r>
 800abcc:	b1c0      	cbz	r0, 800ac00 <_vfiprintf_r+0x78>
 800abce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd0:	07dc      	lsls	r4, r3, #31
 800abd2:	d50e      	bpl.n	800abf2 <_vfiprintf_r+0x6a>
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	b01d      	add	sp, #116	; 0x74
 800abda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abde:	4b7b      	ldr	r3, [pc, #492]	; (800adcc <_vfiprintf_r+0x244>)
 800abe0:	429d      	cmp	r5, r3
 800abe2:	d101      	bne.n	800abe8 <_vfiprintf_r+0x60>
 800abe4:	68b5      	ldr	r5, [r6, #8]
 800abe6:	e7df      	b.n	800aba8 <_vfiprintf_r+0x20>
 800abe8:	4b79      	ldr	r3, [pc, #484]	; (800add0 <_vfiprintf_r+0x248>)
 800abea:	429d      	cmp	r5, r3
 800abec:	bf08      	it	eq
 800abee:	68f5      	ldreq	r5, [r6, #12]
 800abf0:	e7da      	b.n	800aba8 <_vfiprintf_r+0x20>
 800abf2:	89ab      	ldrh	r3, [r5, #12]
 800abf4:	0598      	lsls	r0, r3, #22
 800abf6:	d4ed      	bmi.n	800abd4 <_vfiprintf_r+0x4c>
 800abf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abfa:	f7ff faa5 	bl	800a148 <__retarget_lock_release_recursive>
 800abfe:	e7e9      	b.n	800abd4 <_vfiprintf_r+0x4c>
 800ac00:	2300      	movs	r3, #0
 800ac02:	9309      	str	r3, [sp, #36]	; 0x24
 800ac04:	2320      	movs	r3, #32
 800ac06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac0e:	2330      	movs	r3, #48	; 0x30
 800ac10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800add4 <_vfiprintf_r+0x24c>
 800ac14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac18:	f04f 0901 	mov.w	r9, #1
 800ac1c:	4623      	mov	r3, r4
 800ac1e:	469a      	mov	sl, r3
 800ac20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac24:	b10a      	cbz	r2, 800ac2a <_vfiprintf_r+0xa2>
 800ac26:	2a25      	cmp	r2, #37	; 0x25
 800ac28:	d1f9      	bne.n	800ac1e <_vfiprintf_r+0x96>
 800ac2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac2e:	d00b      	beq.n	800ac48 <_vfiprintf_r+0xc0>
 800ac30:	465b      	mov	r3, fp
 800ac32:	4622      	mov	r2, r4
 800ac34:	4629      	mov	r1, r5
 800ac36:	4630      	mov	r0, r6
 800ac38:	f7ff ff93 	bl	800ab62 <__sfputs_r>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f000 80aa 	beq.w	800ad96 <_vfiprintf_r+0x20e>
 800ac42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac44:	445a      	add	r2, fp
 800ac46:	9209      	str	r2, [sp, #36]	; 0x24
 800ac48:	f89a 3000 	ldrb.w	r3, [sl]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 80a2 	beq.w	800ad96 <_vfiprintf_r+0x20e>
 800ac52:	2300      	movs	r3, #0
 800ac54:	f04f 32ff 	mov.w	r2, #4294967295
 800ac58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac5c:	f10a 0a01 	add.w	sl, sl, #1
 800ac60:	9304      	str	r3, [sp, #16]
 800ac62:	9307      	str	r3, [sp, #28]
 800ac64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac68:	931a      	str	r3, [sp, #104]	; 0x68
 800ac6a:	4654      	mov	r4, sl
 800ac6c:	2205      	movs	r2, #5
 800ac6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac72:	4858      	ldr	r0, [pc, #352]	; (800add4 <_vfiprintf_r+0x24c>)
 800ac74:	f7f5 fab4 	bl	80001e0 <memchr>
 800ac78:	9a04      	ldr	r2, [sp, #16]
 800ac7a:	b9d8      	cbnz	r0, 800acb4 <_vfiprintf_r+0x12c>
 800ac7c:	06d1      	lsls	r1, r2, #27
 800ac7e:	bf44      	itt	mi
 800ac80:	2320      	movmi	r3, #32
 800ac82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac86:	0713      	lsls	r3, r2, #28
 800ac88:	bf44      	itt	mi
 800ac8a:	232b      	movmi	r3, #43	; 0x2b
 800ac8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac90:	f89a 3000 	ldrb.w	r3, [sl]
 800ac94:	2b2a      	cmp	r3, #42	; 0x2a
 800ac96:	d015      	beq.n	800acc4 <_vfiprintf_r+0x13c>
 800ac98:	9a07      	ldr	r2, [sp, #28]
 800ac9a:	4654      	mov	r4, sl
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	f04f 0c0a 	mov.w	ip, #10
 800aca2:	4621      	mov	r1, r4
 800aca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aca8:	3b30      	subs	r3, #48	; 0x30
 800acaa:	2b09      	cmp	r3, #9
 800acac:	d94e      	bls.n	800ad4c <_vfiprintf_r+0x1c4>
 800acae:	b1b0      	cbz	r0, 800acde <_vfiprintf_r+0x156>
 800acb0:	9207      	str	r2, [sp, #28]
 800acb2:	e014      	b.n	800acde <_vfiprintf_r+0x156>
 800acb4:	eba0 0308 	sub.w	r3, r0, r8
 800acb8:	fa09 f303 	lsl.w	r3, r9, r3
 800acbc:	4313      	orrs	r3, r2
 800acbe:	9304      	str	r3, [sp, #16]
 800acc0:	46a2      	mov	sl, r4
 800acc2:	e7d2      	b.n	800ac6a <_vfiprintf_r+0xe2>
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	1d19      	adds	r1, r3, #4
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	9103      	str	r1, [sp, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	bfbb      	ittet	lt
 800acd0:	425b      	neglt	r3, r3
 800acd2:	f042 0202 	orrlt.w	r2, r2, #2
 800acd6:	9307      	strge	r3, [sp, #28]
 800acd8:	9307      	strlt	r3, [sp, #28]
 800acda:	bfb8      	it	lt
 800acdc:	9204      	strlt	r2, [sp, #16]
 800acde:	7823      	ldrb	r3, [r4, #0]
 800ace0:	2b2e      	cmp	r3, #46	; 0x2e
 800ace2:	d10c      	bne.n	800acfe <_vfiprintf_r+0x176>
 800ace4:	7863      	ldrb	r3, [r4, #1]
 800ace6:	2b2a      	cmp	r3, #42	; 0x2a
 800ace8:	d135      	bne.n	800ad56 <_vfiprintf_r+0x1ce>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	1d1a      	adds	r2, r3, #4
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	9203      	str	r2, [sp, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	bfb8      	it	lt
 800acf6:	f04f 33ff 	movlt.w	r3, #4294967295
 800acfa:	3402      	adds	r4, #2
 800acfc:	9305      	str	r3, [sp, #20]
 800acfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ade4 <_vfiprintf_r+0x25c>
 800ad02:	7821      	ldrb	r1, [r4, #0]
 800ad04:	2203      	movs	r2, #3
 800ad06:	4650      	mov	r0, sl
 800ad08:	f7f5 fa6a 	bl	80001e0 <memchr>
 800ad0c:	b140      	cbz	r0, 800ad20 <_vfiprintf_r+0x198>
 800ad0e:	2340      	movs	r3, #64	; 0x40
 800ad10:	eba0 000a 	sub.w	r0, r0, sl
 800ad14:	fa03 f000 	lsl.w	r0, r3, r0
 800ad18:	9b04      	ldr	r3, [sp, #16]
 800ad1a:	4303      	orrs	r3, r0
 800ad1c:	3401      	adds	r4, #1
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad24:	482c      	ldr	r0, [pc, #176]	; (800add8 <_vfiprintf_r+0x250>)
 800ad26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad2a:	2206      	movs	r2, #6
 800ad2c:	f7f5 fa58 	bl	80001e0 <memchr>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d03f      	beq.n	800adb4 <_vfiprintf_r+0x22c>
 800ad34:	4b29      	ldr	r3, [pc, #164]	; (800addc <_vfiprintf_r+0x254>)
 800ad36:	bb1b      	cbnz	r3, 800ad80 <_vfiprintf_r+0x1f8>
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	3307      	adds	r3, #7
 800ad3c:	f023 0307 	bic.w	r3, r3, #7
 800ad40:	3308      	adds	r3, #8
 800ad42:	9303      	str	r3, [sp, #12]
 800ad44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad46:	443b      	add	r3, r7
 800ad48:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4a:	e767      	b.n	800ac1c <_vfiprintf_r+0x94>
 800ad4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad50:	460c      	mov	r4, r1
 800ad52:	2001      	movs	r0, #1
 800ad54:	e7a5      	b.n	800aca2 <_vfiprintf_r+0x11a>
 800ad56:	2300      	movs	r3, #0
 800ad58:	3401      	adds	r4, #1
 800ad5a:	9305      	str	r3, [sp, #20]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	f04f 0c0a 	mov.w	ip, #10
 800ad62:	4620      	mov	r0, r4
 800ad64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad68:	3a30      	subs	r2, #48	; 0x30
 800ad6a:	2a09      	cmp	r2, #9
 800ad6c:	d903      	bls.n	800ad76 <_vfiprintf_r+0x1ee>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0c5      	beq.n	800acfe <_vfiprintf_r+0x176>
 800ad72:	9105      	str	r1, [sp, #20]
 800ad74:	e7c3      	b.n	800acfe <_vfiprintf_r+0x176>
 800ad76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e7f0      	b.n	800ad62 <_vfiprintf_r+0x1da>
 800ad80:	ab03      	add	r3, sp, #12
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	462a      	mov	r2, r5
 800ad86:	4b16      	ldr	r3, [pc, #88]	; (800ade0 <_vfiprintf_r+0x258>)
 800ad88:	a904      	add	r1, sp, #16
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f7fd fc8a 	bl	80086a4 <_printf_float>
 800ad90:	4607      	mov	r7, r0
 800ad92:	1c78      	adds	r0, r7, #1
 800ad94:	d1d6      	bne.n	800ad44 <_vfiprintf_r+0x1bc>
 800ad96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad98:	07d9      	lsls	r1, r3, #31
 800ad9a:	d405      	bmi.n	800ada8 <_vfiprintf_r+0x220>
 800ad9c:	89ab      	ldrh	r3, [r5, #12]
 800ad9e:	059a      	lsls	r2, r3, #22
 800ada0:	d402      	bmi.n	800ada8 <_vfiprintf_r+0x220>
 800ada2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ada4:	f7ff f9d0 	bl	800a148 <__retarget_lock_release_recursive>
 800ada8:	89ab      	ldrh	r3, [r5, #12]
 800adaa:	065b      	lsls	r3, r3, #25
 800adac:	f53f af12 	bmi.w	800abd4 <_vfiprintf_r+0x4c>
 800adb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adb2:	e711      	b.n	800abd8 <_vfiprintf_r+0x50>
 800adb4:	ab03      	add	r3, sp, #12
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	462a      	mov	r2, r5
 800adba:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <_vfiprintf_r+0x258>)
 800adbc:	a904      	add	r1, sp, #16
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7fd ff14 	bl	8008bec <_printf_i>
 800adc4:	e7e4      	b.n	800ad90 <_vfiprintf_r+0x208>
 800adc6:	bf00      	nop
 800adc8:	0800c8ec 	.word	0x0800c8ec
 800adcc:	0800c90c 	.word	0x0800c90c
 800add0:	0800c8cc 	.word	0x0800c8cc
 800add4:	0800ca84 	.word	0x0800ca84
 800add8:	0800ca8e 	.word	0x0800ca8e
 800addc:	080086a5 	.word	0x080086a5
 800ade0:	0800ab63 	.word	0x0800ab63
 800ade4:	0800ca8a 	.word	0x0800ca8a

0800ade8 <_sbrk_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d06      	ldr	r5, [pc, #24]	; (800ae04 <_sbrk_r+0x1c>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	f7f8 fb5c 	bl	80034b0 <_sbrk>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_sbrk_r+0x1a>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_sbrk_r+0x1a>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	200005e0 	.word	0x200005e0

0800ae08 <__sread>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae10:	f000 f8e2 	bl	800afd8 <_read_r>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	bfab      	itete	ge
 800ae18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae1c:	181b      	addge	r3, r3, r0
 800ae1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae22:	bfac      	ite	ge
 800ae24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae26:	81a3      	strhlt	r3, [r4, #12]
 800ae28:	bd10      	pop	{r4, pc}

0800ae2a <__swrite>:
 800ae2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2e:	461f      	mov	r7, r3
 800ae30:	898b      	ldrh	r3, [r1, #12]
 800ae32:	05db      	lsls	r3, r3, #23
 800ae34:	4605      	mov	r5, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	4616      	mov	r6, r2
 800ae3a:	d505      	bpl.n	800ae48 <__swrite+0x1e>
 800ae3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae40:	2302      	movs	r3, #2
 800ae42:	2200      	movs	r2, #0
 800ae44:	f000 f898 	bl	800af78 <_lseek_r>
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	4632      	mov	r2, r6
 800ae56:	463b      	mov	r3, r7
 800ae58:	4628      	mov	r0, r5
 800ae5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5e:	f000 b817 	b.w	800ae90 <_write_r>

0800ae62 <__sseek>:
 800ae62:	b510      	push	{r4, lr}
 800ae64:	460c      	mov	r4, r1
 800ae66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae6a:	f000 f885 	bl	800af78 <_lseek_r>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	bf15      	itete	ne
 800ae74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae7e:	81a3      	strheq	r3, [r4, #12]
 800ae80:	bf18      	it	ne
 800ae82:	81a3      	strhne	r3, [r4, #12]
 800ae84:	bd10      	pop	{r4, pc}

0800ae86 <__sclose>:
 800ae86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8a:	f000 b831 	b.w	800aef0 <_close_r>
	...

0800ae90 <_write_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	; (800aeb0 <_write_r+0x20>)
 800ae94:	4604      	mov	r4, r0
 800ae96:	4608      	mov	r0, r1
 800ae98:	4611      	mov	r1, r2
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f7f8 fab5 	bl	800340e <_write>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_write_r+0x1e>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_write_r+0x1e>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	200005e0 	.word	0x200005e0

0800aeb4 <__assert_func>:
 800aeb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeb6:	4614      	mov	r4, r2
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <__assert_func+0x2c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4605      	mov	r5, r0
 800aec0:	68d8      	ldr	r0, [r3, #12]
 800aec2:	b14c      	cbz	r4, 800aed8 <__assert_func+0x24>
 800aec4:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <__assert_func+0x30>)
 800aec6:	9100      	str	r1, [sp, #0]
 800aec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aecc:	4906      	ldr	r1, [pc, #24]	; (800aee8 <__assert_func+0x34>)
 800aece:	462b      	mov	r3, r5
 800aed0:	f000 f81e 	bl	800af10 <fiprintf>
 800aed4:	f000 f89f 	bl	800b016 <abort>
 800aed8:	4b04      	ldr	r3, [pc, #16]	; (800aeec <__assert_func+0x38>)
 800aeda:	461c      	mov	r4, r3
 800aedc:	e7f3      	b.n	800aec6 <__assert_func+0x12>
 800aede:	bf00      	nop
 800aee0:	20000010 	.word	0x20000010
 800aee4:	0800ca95 	.word	0x0800ca95
 800aee8:	0800caa2 	.word	0x0800caa2
 800aeec:	0800cad0 	.word	0x0800cad0

0800aef0 <_close_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d06      	ldr	r5, [pc, #24]	; (800af0c <_close_r+0x1c>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	f7f8 faa3 	bl	8003446 <_close>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_close_r+0x1a>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_close_r+0x1a>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	200005e0 	.word	0x200005e0

0800af10 <fiprintf>:
 800af10:	b40e      	push	{r1, r2, r3}
 800af12:	b503      	push	{r0, r1, lr}
 800af14:	4601      	mov	r1, r0
 800af16:	ab03      	add	r3, sp, #12
 800af18:	4805      	ldr	r0, [pc, #20]	; (800af30 <fiprintf+0x20>)
 800af1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af1e:	6800      	ldr	r0, [r0, #0]
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	f7ff fe31 	bl	800ab88 <_vfiprintf_r>
 800af26:	b002      	add	sp, #8
 800af28:	f85d eb04 	ldr.w	lr, [sp], #4
 800af2c:	b003      	add	sp, #12
 800af2e:	4770      	bx	lr
 800af30:	20000010 	.word	0x20000010

0800af34 <_fstat_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_fstat_r+0x20>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	602b      	str	r3, [r5, #0]
 800af42:	f7f8 fa8c 	bl	800345e <_fstat>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d102      	bne.n	800af50 <_fstat_r+0x1c>
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	b103      	cbz	r3, 800af50 <_fstat_r+0x1c>
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	bf00      	nop
 800af54:	200005e0 	.word	0x200005e0

0800af58 <_isatty_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d06      	ldr	r5, [pc, #24]	; (800af74 <_isatty_r+0x1c>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f8 fa8b 	bl	800347e <_isatty>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_isatty_r+0x1a>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_isatty_r+0x1a>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	200005e0 	.word	0x200005e0

0800af78 <_lseek_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d07      	ldr	r5, [pc, #28]	; (800af98 <_lseek_r+0x20>)
 800af7c:	4604      	mov	r4, r0
 800af7e:	4608      	mov	r0, r1
 800af80:	4611      	mov	r1, r2
 800af82:	2200      	movs	r2, #0
 800af84:	602a      	str	r2, [r5, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	f7f8 fa84 	bl	8003494 <_lseek>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_lseek_r+0x1e>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_lseek_r+0x1e>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	200005e0 	.word	0x200005e0

0800af9c <__ascii_mbtowc>:
 800af9c:	b082      	sub	sp, #8
 800af9e:	b901      	cbnz	r1, 800afa2 <__ascii_mbtowc+0x6>
 800afa0:	a901      	add	r1, sp, #4
 800afa2:	b142      	cbz	r2, 800afb6 <__ascii_mbtowc+0x1a>
 800afa4:	b14b      	cbz	r3, 800afba <__ascii_mbtowc+0x1e>
 800afa6:	7813      	ldrb	r3, [r2, #0]
 800afa8:	600b      	str	r3, [r1, #0]
 800afaa:	7812      	ldrb	r2, [r2, #0]
 800afac:	1e10      	subs	r0, r2, #0
 800afae:	bf18      	it	ne
 800afb0:	2001      	movne	r0, #1
 800afb2:	b002      	add	sp, #8
 800afb4:	4770      	bx	lr
 800afb6:	4610      	mov	r0, r2
 800afb8:	e7fb      	b.n	800afb2 <__ascii_mbtowc+0x16>
 800afba:	f06f 0001 	mvn.w	r0, #1
 800afbe:	e7f8      	b.n	800afb2 <__ascii_mbtowc+0x16>

0800afc0 <__malloc_lock>:
 800afc0:	4801      	ldr	r0, [pc, #4]	; (800afc8 <__malloc_lock+0x8>)
 800afc2:	f7ff b8c0 	b.w	800a146 <__retarget_lock_acquire_recursive>
 800afc6:	bf00      	nop
 800afc8:	200005d4 	.word	0x200005d4

0800afcc <__malloc_unlock>:
 800afcc:	4801      	ldr	r0, [pc, #4]	; (800afd4 <__malloc_unlock+0x8>)
 800afce:	f7ff b8bb 	b.w	800a148 <__retarget_lock_release_recursive>
 800afd2:	bf00      	nop
 800afd4:	200005d4 	.word	0x200005d4

0800afd8 <_read_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_read_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f8 f9f4 	bl	80033d4 <_read>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_read_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_read_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	200005e0 	.word	0x200005e0

0800affc <__ascii_wctomb>:
 800affc:	b149      	cbz	r1, 800b012 <__ascii_wctomb+0x16>
 800affe:	2aff      	cmp	r2, #255	; 0xff
 800b000:	bf85      	ittet	hi
 800b002:	238a      	movhi	r3, #138	; 0x8a
 800b004:	6003      	strhi	r3, [r0, #0]
 800b006:	700a      	strbls	r2, [r1, #0]
 800b008:	f04f 30ff 	movhi.w	r0, #4294967295
 800b00c:	bf98      	it	ls
 800b00e:	2001      	movls	r0, #1
 800b010:	4770      	bx	lr
 800b012:	4608      	mov	r0, r1
 800b014:	4770      	bx	lr

0800b016 <abort>:
 800b016:	b508      	push	{r3, lr}
 800b018:	2006      	movs	r0, #6
 800b01a:	f000 f82b 	bl	800b074 <raise>
 800b01e:	2001      	movs	r0, #1
 800b020:	f7f8 f9ce 	bl	80033c0 <_exit>

0800b024 <_raise_r>:
 800b024:	291f      	cmp	r1, #31
 800b026:	b538      	push	{r3, r4, r5, lr}
 800b028:	4604      	mov	r4, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	d904      	bls.n	800b038 <_raise_r+0x14>
 800b02e:	2316      	movs	r3, #22
 800b030:	6003      	str	r3, [r0, #0]
 800b032:	f04f 30ff 	mov.w	r0, #4294967295
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b03a:	b112      	cbz	r2, 800b042 <_raise_r+0x1e>
 800b03c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b040:	b94b      	cbnz	r3, 800b056 <_raise_r+0x32>
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f830 	bl	800b0a8 <_getpid_r>
 800b048:	462a      	mov	r2, r5
 800b04a:	4601      	mov	r1, r0
 800b04c:	4620      	mov	r0, r4
 800b04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b052:	f000 b817 	b.w	800b084 <_kill_r>
 800b056:	2b01      	cmp	r3, #1
 800b058:	d00a      	beq.n	800b070 <_raise_r+0x4c>
 800b05a:	1c59      	adds	r1, r3, #1
 800b05c:	d103      	bne.n	800b066 <_raise_r+0x42>
 800b05e:	2316      	movs	r3, #22
 800b060:	6003      	str	r3, [r0, #0]
 800b062:	2001      	movs	r0, #1
 800b064:	e7e7      	b.n	800b036 <_raise_r+0x12>
 800b066:	2400      	movs	r4, #0
 800b068:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b06c:	4628      	mov	r0, r5
 800b06e:	4798      	blx	r3
 800b070:	2000      	movs	r0, #0
 800b072:	e7e0      	b.n	800b036 <_raise_r+0x12>

0800b074 <raise>:
 800b074:	4b02      	ldr	r3, [pc, #8]	; (800b080 <raise+0xc>)
 800b076:	4601      	mov	r1, r0
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	f7ff bfd3 	b.w	800b024 <_raise_r>
 800b07e:	bf00      	nop
 800b080:	20000010 	.word	0x20000010

0800b084 <_kill_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d07      	ldr	r5, [pc, #28]	; (800b0a4 <_kill_r+0x20>)
 800b088:	2300      	movs	r3, #0
 800b08a:	4604      	mov	r4, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	4611      	mov	r1, r2
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	f7f8 f985 	bl	80033a0 <_kill>
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	d102      	bne.n	800b0a0 <_kill_r+0x1c>
 800b09a:	682b      	ldr	r3, [r5, #0]
 800b09c:	b103      	cbz	r3, 800b0a0 <_kill_r+0x1c>
 800b09e:	6023      	str	r3, [r4, #0]
 800b0a0:	bd38      	pop	{r3, r4, r5, pc}
 800b0a2:	bf00      	nop
 800b0a4:	200005e0 	.word	0x200005e0

0800b0a8 <_getpid_r>:
 800b0a8:	f7f8 b972 	b.w	8003390 <_getpid>

0800b0ac <cosf>:
 800b0ac:	ee10 3a10 	vmov	r3, s0
 800b0b0:	b507      	push	{r0, r1, r2, lr}
 800b0b2:	4a1e      	ldr	r2, [pc, #120]	; (800b12c <cosf+0x80>)
 800b0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	dc06      	bgt.n	800b0ca <cosf+0x1e>
 800b0bc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b130 <cosf+0x84>
 800b0c0:	b003      	add	sp, #12
 800b0c2:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c6:	f000 bd93 	b.w	800bbf0 <__kernel_cosf>
 800b0ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b0ce:	db04      	blt.n	800b0da <cosf+0x2e>
 800b0d0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b0d4:	b003      	add	sp, #12
 800b0d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0da:	4668      	mov	r0, sp
 800b0dc:	f000 fc48 	bl	800b970 <__ieee754_rem_pio2f>
 800b0e0:	f000 0003 	and.w	r0, r0, #3
 800b0e4:	2801      	cmp	r0, #1
 800b0e6:	d009      	beq.n	800b0fc <cosf+0x50>
 800b0e8:	2802      	cmp	r0, #2
 800b0ea:	d010      	beq.n	800b10e <cosf+0x62>
 800b0ec:	b9b0      	cbnz	r0, 800b11c <cosf+0x70>
 800b0ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0f2:	ed9d 0a00 	vldr	s0, [sp]
 800b0f6:	f000 fd7b 	bl	800bbf0 <__kernel_cosf>
 800b0fa:	e7eb      	b.n	800b0d4 <cosf+0x28>
 800b0fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b100:	ed9d 0a00 	vldr	s0, [sp]
 800b104:	f001 f84a 	bl	800c19c <__kernel_sinf>
 800b108:	eeb1 0a40 	vneg.f32	s0, s0
 800b10c:	e7e2      	b.n	800b0d4 <cosf+0x28>
 800b10e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b112:	ed9d 0a00 	vldr	s0, [sp]
 800b116:	f000 fd6b 	bl	800bbf0 <__kernel_cosf>
 800b11a:	e7f5      	b.n	800b108 <cosf+0x5c>
 800b11c:	eddd 0a01 	vldr	s1, [sp, #4]
 800b120:	ed9d 0a00 	vldr	s0, [sp]
 800b124:	2001      	movs	r0, #1
 800b126:	f001 f839 	bl	800c19c <__kernel_sinf>
 800b12a:	e7d3      	b.n	800b0d4 <cosf+0x28>
 800b12c:	3f490fd8 	.word	0x3f490fd8
 800b130:	00000000 	.word	0x00000000

0800b134 <sinf>:
 800b134:	ee10 3a10 	vmov	r3, s0
 800b138:	b507      	push	{r0, r1, r2, lr}
 800b13a:	4a1f      	ldr	r2, [pc, #124]	; (800b1b8 <sinf+0x84>)
 800b13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b140:	4293      	cmp	r3, r2
 800b142:	dc07      	bgt.n	800b154 <sinf+0x20>
 800b144:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b1bc <sinf+0x88>
 800b148:	2000      	movs	r0, #0
 800b14a:	b003      	add	sp, #12
 800b14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b150:	f001 b824 	b.w	800c19c <__kernel_sinf>
 800b154:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b158:	db04      	blt.n	800b164 <sinf+0x30>
 800b15a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b15e:	b003      	add	sp, #12
 800b160:	f85d fb04 	ldr.w	pc, [sp], #4
 800b164:	4668      	mov	r0, sp
 800b166:	f000 fc03 	bl	800b970 <__ieee754_rem_pio2f>
 800b16a:	f000 0003 	and.w	r0, r0, #3
 800b16e:	2801      	cmp	r0, #1
 800b170:	d00a      	beq.n	800b188 <sinf+0x54>
 800b172:	2802      	cmp	r0, #2
 800b174:	d00f      	beq.n	800b196 <sinf+0x62>
 800b176:	b9c0      	cbnz	r0, 800b1aa <sinf+0x76>
 800b178:	eddd 0a01 	vldr	s1, [sp, #4]
 800b17c:	ed9d 0a00 	vldr	s0, [sp]
 800b180:	2001      	movs	r0, #1
 800b182:	f001 f80b 	bl	800c19c <__kernel_sinf>
 800b186:	e7ea      	b.n	800b15e <sinf+0x2a>
 800b188:	eddd 0a01 	vldr	s1, [sp, #4]
 800b18c:	ed9d 0a00 	vldr	s0, [sp]
 800b190:	f000 fd2e 	bl	800bbf0 <__kernel_cosf>
 800b194:	e7e3      	b.n	800b15e <sinf+0x2a>
 800b196:	eddd 0a01 	vldr	s1, [sp, #4]
 800b19a:	ed9d 0a00 	vldr	s0, [sp]
 800b19e:	2001      	movs	r0, #1
 800b1a0:	f000 fffc 	bl	800c19c <__kernel_sinf>
 800b1a4:	eeb1 0a40 	vneg.f32	s0, s0
 800b1a8:	e7d9      	b.n	800b15e <sinf+0x2a>
 800b1aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ae:	ed9d 0a00 	vldr	s0, [sp]
 800b1b2:	f000 fd1d 	bl	800bbf0 <__kernel_cosf>
 800b1b6:	e7f5      	b.n	800b1a4 <sinf+0x70>
 800b1b8:	3f490fd8 	.word	0x3f490fd8
 800b1bc:	00000000 	.word	0x00000000

0800b1c0 <tanf>:
 800b1c0:	ee10 3a10 	vmov	r3, s0
 800b1c4:	b507      	push	{r0, r1, r2, lr}
 800b1c6:	4a12      	ldr	r2, [pc, #72]	; (800b210 <tanf+0x50>)
 800b1c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	dc07      	bgt.n	800b1e0 <tanf+0x20>
 800b1d0:	eddf 0a10 	vldr	s1, [pc, #64]	; 800b214 <tanf+0x54>
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	b003      	add	sp, #12
 800b1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1dc:	f001 b826 	b.w	800c22c <__kernel_tanf>
 800b1e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1e4:	db04      	blt.n	800b1f0 <tanf+0x30>
 800b1e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1ea:	b003      	add	sp, #12
 800b1ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1f0:	4668      	mov	r0, sp
 800b1f2:	f000 fbbd 	bl	800b970 <__ieee754_rem_pio2f>
 800b1f6:	0040      	lsls	r0, r0, #1
 800b1f8:	f000 0002 	and.w	r0, r0, #2
 800b1fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b200:	ed9d 0a00 	vldr	s0, [sp]
 800b204:	f1c0 0001 	rsb	r0, r0, #1
 800b208:	f001 f810 	bl	800c22c <__kernel_tanf>
 800b20c:	e7ed      	b.n	800b1ea <tanf+0x2a>
 800b20e:	bf00      	nop
 800b210:	3f490fda 	.word	0x3f490fda
 800b214:	00000000 	.word	0x00000000

0800b218 <log>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	ed2d 8b02 	vpush	{d8}
 800b21e:	ec55 4b10 	vmov	r4, r5, d0
 800b222:	f000 f865 	bl	800b2f0 <__ieee754_log>
 800b226:	4622      	mov	r2, r4
 800b228:	462b      	mov	r3, r5
 800b22a:	4620      	mov	r0, r4
 800b22c:	4629      	mov	r1, r5
 800b22e:	eeb0 8a40 	vmov.f32	s16, s0
 800b232:	eef0 8a60 	vmov.f32	s17, s1
 800b236:	f7f5 fc79 	bl	8000b2c <__aeabi_dcmpun>
 800b23a:	b998      	cbnz	r0, 800b264 <log+0x4c>
 800b23c:	2200      	movs	r2, #0
 800b23e:	2300      	movs	r3, #0
 800b240:	4620      	mov	r0, r4
 800b242:	4629      	mov	r1, r5
 800b244:	f7f5 fc68 	bl	8000b18 <__aeabi_dcmpgt>
 800b248:	b960      	cbnz	r0, 800b264 <log+0x4c>
 800b24a:	2200      	movs	r2, #0
 800b24c:	2300      	movs	r3, #0
 800b24e:	4620      	mov	r0, r4
 800b250:	4629      	mov	r1, r5
 800b252:	f7f5 fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 800b256:	b160      	cbz	r0, 800b272 <log+0x5a>
 800b258:	f7fd f952 	bl	8008500 <__errno>
 800b25c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b288 <log+0x70>
 800b260:	2322      	movs	r3, #34	; 0x22
 800b262:	6003      	str	r3, [r0, #0]
 800b264:	eeb0 0a48 	vmov.f32	s0, s16
 800b268:	eef0 0a68 	vmov.f32	s1, s17
 800b26c:	ecbd 8b02 	vpop	{d8}
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	f7fd f945 	bl	8008500 <__errno>
 800b276:	ecbd 8b02 	vpop	{d8}
 800b27a:	2321      	movs	r3, #33	; 0x21
 800b27c:	6003      	str	r3, [r0, #0]
 800b27e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b282:	4803      	ldr	r0, [pc, #12]	; (800b290 <log+0x78>)
 800b284:	f001 b8b4 	b.w	800c3f0 <nan>
 800b288:	00000000 	.word	0x00000000
 800b28c:	fff00000 	.word	0xfff00000
 800b290:	0800cad0 	.word	0x0800cad0

0800b294 <asinf>:
 800b294:	b508      	push	{r3, lr}
 800b296:	ed2d 8b02 	vpush	{d8}
 800b29a:	eeb0 8a40 	vmov.f32	s16, s0
 800b29e:	f000 f9e1 	bl	800b664 <__ieee754_asinf>
 800b2a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800b2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2aa:	eef0 8a40 	vmov.f32	s17, s0
 800b2ae:	d615      	bvs.n	800b2dc <asinf+0x48>
 800b2b0:	eeb0 0a48 	vmov.f32	s0, s16
 800b2b4:	f001 f978 	bl	800c5a8 <fabsf>
 800b2b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b2bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c4:	dd0a      	ble.n	800b2dc <asinf+0x48>
 800b2c6:	f7fd f91b 	bl	8008500 <__errno>
 800b2ca:	ecbd 8b02 	vpop	{d8}
 800b2ce:	2321      	movs	r3, #33	; 0x21
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b2d6:	4804      	ldr	r0, [pc, #16]	; (800b2e8 <asinf+0x54>)
 800b2d8:	f001 b9b0 	b.w	800c63c <nanf>
 800b2dc:	eeb0 0a68 	vmov.f32	s0, s17
 800b2e0:	ecbd 8b02 	vpop	{d8}
 800b2e4:	bd08      	pop	{r3, pc}
 800b2e6:	bf00      	nop
 800b2e8:	0800cad0 	.word	0x0800cad0

0800b2ec <atan2f>:
 800b2ec:	f000 baa0 	b.w	800b830 <__ieee754_atan2f>

0800b2f0 <__ieee754_log>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	ec51 0b10 	vmov	r0, r1, d0
 800b2f8:	ed2d 8b04 	vpush	{d8-d9}
 800b2fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b300:	b083      	sub	sp, #12
 800b302:	460d      	mov	r5, r1
 800b304:	da29      	bge.n	800b35a <__ieee754_log+0x6a>
 800b306:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b30a:	4303      	orrs	r3, r0
 800b30c:	ee10 2a10 	vmov	r2, s0
 800b310:	d10c      	bne.n	800b32c <__ieee754_log+0x3c>
 800b312:	49cf      	ldr	r1, [pc, #828]	; (800b650 <__ieee754_log+0x360>)
 800b314:	2200      	movs	r2, #0
 800b316:	2300      	movs	r3, #0
 800b318:	2000      	movs	r0, #0
 800b31a:	f7f5 fa97 	bl	800084c <__aeabi_ddiv>
 800b31e:	ec41 0b10 	vmov	d0, r0, r1
 800b322:	b003      	add	sp, #12
 800b324:	ecbd 8b04 	vpop	{d8-d9}
 800b328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32c:	2900      	cmp	r1, #0
 800b32e:	da05      	bge.n	800b33c <__ieee754_log+0x4c>
 800b330:	460b      	mov	r3, r1
 800b332:	f7f4 ffa9 	bl	8000288 <__aeabi_dsub>
 800b336:	2200      	movs	r2, #0
 800b338:	2300      	movs	r3, #0
 800b33a:	e7ee      	b.n	800b31a <__ieee754_log+0x2a>
 800b33c:	4bc5      	ldr	r3, [pc, #788]	; (800b654 <__ieee754_log+0x364>)
 800b33e:	2200      	movs	r2, #0
 800b340:	f7f5 f95a 	bl	80005f8 <__aeabi_dmul>
 800b344:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b348:	460d      	mov	r5, r1
 800b34a:	4ac3      	ldr	r2, [pc, #780]	; (800b658 <__ieee754_log+0x368>)
 800b34c:	4295      	cmp	r5, r2
 800b34e:	dd06      	ble.n	800b35e <__ieee754_log+0x6e>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	f7f4 ff9a 	bl	800028c <__adddf3>
 800b358:	e7e1      	b.n	800b31e <__ieee754_log+0x2e>
 800b35a:	2300      	movs	r3, #0
 800b35c:	e7f5      	b.n	800b34a <__ieee754_log+0x5a>
 800b35e:	152c      	asrs	r4, r5, #20
 800b360:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b364:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b368:	441c      	add	r4, r3
 800b36a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b36e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b376:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b37a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b37e:	ea42 0105 	orr.w	r1, r2, r5
 800b382:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b386:	2200      	movs	r2, #0
 800b388:	4bb4      	ldr	r3, [pc, #720]	; (800b65c <__ieee754_log+0x36c>)
 800b38a:	f7f4 ff7d 	bl	8000288 <__aeabi_dsub>
 800b38e:	1cab      	adds	r3, r5, #2
 800b390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b394:	2b02      	cmp	r3, #2
 800b396:	4682      	mov	sl, r0
 800b398:	468b      	mov	fp, r1
 800b39a:	f04f 0200 	mov.w	r2, #0
 800b39e:	dc53      	bgt.n	800b448 <__ieee754_log+0x158>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f7f5 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a6:	b1d0      	cbz	r0, 800b3de <__ieee754_log+0xee>
 800b3a8:	2c00      	cmp	r4, #0
 800b3aa:	f000 8122 	beq.w	800b5f2 <__ieee754_log+0x302>
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7f5 f8b8 	bl	8000524 <__aeabi_i2d>
 800b3b4:	a390      	add	r3, pc, #576	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	f7f5 f91b 	bl	80005f8 <__aeabi_dmul>
 800b3c2:	a38f      	add	r3, pc, #572	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f5 f912 	bl	80005f8 <__aeabi_dmul>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4620      	mov	r0, r4
 800b3da:	4629      	mov	r1, r5
 800b3dc:	e7ba      	b.n	800b354 <__ieee754_log+0x64>
 800b3de:	a38a      	add	r3, pc, #552	; (adr r3, 800b608 <__ieee754_log+0x318>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	4659      	mov	r1, fp
 800b3e8:	f7f5 f906 	bl	80005f8 <__aeabi_dmul>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	499b      	ldr	r1, [pc, #620]	; (800b660 <__ieee754_log+0x370>)
 800b3f4:	f7f4 ff48 	bl	8000288 <__aeabi_dsub>
 800b3f8:	4652      	mov	r2, sl
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	465b      	mov	r3, fp
 800b400:	4650      	mov	r0, sl
 800b402:	4659      	mov	r1, fp
 800b404:	f7f5 f8f8 	bl	80005f8 <__aeabi_dmul>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f5 f8f2 	bl	80005f8 <__aeabi_dmul>
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	b914      	cbnz	r4, 800b420 <__ieee754_log+0x130>
 800b41a:	4632      	mov	r2, r6
 800b41c:	463b      	mov	r3, r7
 800b41e:	e0a2      	b.n	800b566 <__ieee754_log+0x276>
 800b420:	4620      	mov	r0, r4
 800b422:	f7f5 f87f 	bl	8000524 <__aeabi_i2d>
 800b426:	a374      	add	r3, pc, #464	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	4680      	mov	r8, r0
 800b42e:	4689      	mov	r9, r1
 800b430:	f7f5 f8e2 	bl	80005f8 <__aeabi_dmul>
 800b434:	a372      	add	r3, pc, #456	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	4604      	mov	r4, r0
 800b43c:	460d      	mov	r5, r1
 800b43e:	4640      	mov	r0, r8
 800b440:	4649      	mov	r1, r9
 800b442:	f7f5 f8d9 	bl	80005f8 <__aeabi_dmul>
 800b446:	e0a7      	b.n	800b598 <__ieee754_log+0x2a8>
 800b448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b44c:	f7f4 ff1e 	bl	800028c <__adddf3>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4650      	mov	r0, sl
 800b456:	4659      	mov	r1, fp
 800b458:	f7f5 f9f8 	bl	800084c <__aeabi_ddiv>
 800b45c:	ec41 0b18 	vmov	d8, r0, r1
 800b460:	4620      	mov	r0, r4
 800b462:	f7f5 f85f 	bl	8000524 <__aeabi_i2d>
 800b466:	ec53 2b18 	vmov	r2, r3, d8
 800b46a:	ec41 0b19 	vmov	d9, r0, r1
 800b46e:	ec51 0b18 	vmov	r0, r1, d8
 800b472:	f7f5 f8c1 	bl	80005f8 <__aeabi_dmul>
 800b476:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b47a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4680      	mov	r8, r0
 800b486:	4689      	mov	r9, r1
 800b488:	f7f5 f8b6 	bl	80005f8 <__aeabi_dmul>
 800b48c:	a360      	add	r3, pc, #384	; (adr r3, 800b610 <__ieee754_log+0x320>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	f7f5 f8af 	bl	80005f8 <__aeabi_dmul>
 800b49a:	a35f      	add	r3, pc, #380	; (adr r3, 800b618 <__ieee754_log+0x328>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 fef4 	bl	800028c <__adddf3>
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	f7f5 f8a6 	bl	80005f8 <__aeabi_dmul>
 800b4ac:	a35c      	add	r3, pc, #368	; (adr r3, 800b620 <__ieee754_log+0x330>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 feeb 	bl	800028c <__adddf3>
 800b4b6:	4632      	mov	r2, r6
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	f7f5 f89d 	bl	80005f8 <__aeabi_dmul>
 800b4be:	a35a      	add	r3, pc, #360	; (adr r3, 800b628 <__ieee754_log+0x338>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 fee2 	bl	800028c <__adddf3>
 800b4c8:	4642      	mov	r2, r8
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	f7f5 f894 	bl	80005f8 <__aeabi_dmul>
 800b4d0:	a357      	add	r3, pc, #348	; (adr r3, 800b630 <__ieee754_log+0x340>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	4689      	mov	r9, r1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f5 f88b 	bl	80005f8 <__aeabi_dmul>
 800b4e2:	a355      	add	r3, pc, #340	; (adr r3, 800b638 <__ieee754_log+0x348>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f4 fed0 	bl	800028c <__adddf3>
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	f7f5 f882 	bl	80005f8 <__aeabi_dmul>
 800b4f4:	a352      	add	r3, pc, #328	; (adr r3, 800b640 <__ieee754_log+0x350>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f4 fec7 	bl	800028c <__adddf3>
 800b4fe:	4632      	mov	r2, r6
 800b500:	463b      	mov	r3, r7
 800b502:	f7f5 f879 	bl	80005f8 <__aeabi_dmul>
 800b506:	460b      	mov	r3, r1
 800b508:	4602      	mov	r2, r0
 800b50a:	4649      	mov	r1, r9
 800b50c:	4640      	mov	r0, r8
 800b50e:	f7f4 febd 	bl	800028c <__adddf3>
 800b512:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b516:	9b01      	ldr	r3, [sp, #4]
 800b518:	3551      	adds	r5, #81	; 0x51
 800b51a:	431d      	orrs	r5, r3
 800b51c:	2d00      	cmp	r5, #0
 800b51e:	4680      	mov	r8, r0
 800b520:	4689      	mov	r9, r1
 800b522:	dd48      	ble.n	800b5b6 <__ieee754_log+0x2c6>
 800b524:	4b4e      	ldr	r3, [pc, #312]	; (800b660 <__ieee754_log+0x370>)
 800b526:	2200      	movs	r2, #0
 800b528:	4650      	mov	r0, sl
 800b52a:	4659      	mov	r1, fp
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	4652      	mov	r2, sl
 800b532:	465b      	mov	r3, fp
 800b534:	f7f5 f860 	bl	80005f8 <__aeabi_dmul>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	4640      	mov	r0, r8
 800b542:	4649      	mov	r1, r9
 800b544:	f7f4 fea2 	bl	800028c <__adddf3>
 800b548:	ec53 2b18 	vmov	r2, r3, d8
 800b54c:	f7f5 f854 	bl	80005f8 <__aeabi_dmul>
 800b550:	4680      	mov	r8, r0
 800b552:	4689      	mov	r9, r1
 800b554:	b964      	cbnz	r4, 800b570 <__ieee754_log+0x280>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4630      	mov	r0, r6
 800b55c:	4639      	mov	r1, r7
 800b55e:	f7f4 fe93 	bl	8000288 <__aeabi_dsub>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4650      	mov	r0, sl
 800b568:	4659      	mov	r1, fp
 800b56a:	f7f4 fe8d 	bl	8000288 <__aeabi_dsub>
 800b56e:	e6d6      	b.n	800b31e <__ieee754_log+0x2e>
 800b570:	a321      	add	r3, pc, #132	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	ec51 0b19 	vmov	r0, r1, d9
 800b57a:	f7f5 f83d 	bl	80005f8 <__aeabi_dmul>
 800b57e:	a320      	add	r3, pc, #128	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	4604      	mov	r4, r0
 800b586:	460d      	mov	r5, r1
 800b588:	ec51 0b19 	vmov	r0, r1, d9
 800b58c:	f7f5 f834 	bl	80005f8 <__aeabi_dmul>
 800b590:	4642      	mov	r2, r8
 800b592:	464b      	mov	r3, r9
 800b594:	f7f4 fe7a 	bl	800028c <__adddf3>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4630      	mov	r0, r6
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f4 fe72 	bl	8000288 <__aeabi_dsub>
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	465b      	mov	r3, fp
 800b5a8:	f7f4 fe6e 	bl	8000288 <__aeabi_dsub>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	e7d9      	b.n	800b56a <__ieee754_log+0x27a>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4650      	mov	r0, sl
 800b5bc:	4659      	mov	r1, fp
 800b5be:	f7f4 fe63 	bl	8000288 <__aeabi_dsub>
 800b5c2:	ec53 2b18 	vmov	r2, r3, d8
 800b5c6:	f7f5 f817 	bl	80005f8 <__aeabi_dmul>
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	2c00      	cmp	r4, #0
 800b5d0:	f43f af23 	beq.w	800b41a <__ieee754_log+0x12a>
 800b5d4:	a308      	add	r3, pc, #32	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5da:	ec51 0b19 	vmov	r0, r1, d9
 800b5de:	f7f5 f80b 	bl	80005f8 <__aeabi_dmul>
 800b5e2:	a307      	add	r3, pc, #28	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	ec51 0b19 	vmov	r0, r1, d9
 800b5f0:	e727      	b.n	800b442 <__ieee754_log+0x152>
 800b5f2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b648 <__ieee754_log+0x358>
 800b5f6:	e694      	b.n	800b322 <__ieee754_log+0x32>
 800b5f8:	fee00000 	.word	0xfee00000
 800b5fc:	3fe62e42 	.word	0x3fe62e42
 800b600:	35793c76 	.word	0x35793c76
 800b604:	3dea39ef 	.word	0x3dea39ef
 800b608:	55555555 	.word	0x55555555
 800b60c:	3fd55555 	.word	0x3fd55555
 800b610:	df3e5244 	.word	0xdf3e5244
 800b614:	3fc2f112 	.word	0x3fc2f112
 800b618:	96cb03de 	.word	0x96cb03de
 800b61c:	3fc74664 	.word	0x3fc74664
 800b620:	94229359 	.word	0x94229359
 800b624:	3fd24924 	.word	0x3fd24924
 800b628:	55555593 	.word	0x55555593
 800b62c:	3fe55555 	.word	0x3fe55555
 800b630:	d078c69f 	.word	0xd078c69f
 800b634:	3fc39a09 	.word	0x3fc39a09
 800b638:	1d8e78af 	.word	0x1d8e78af
 800b63c:	3fcc71c5 	.word	0x3fcc71c5
 800b640:	9997fa04 	.word	0x9997fa04
 800b644:	3fd99999 	.word	0x3fd99999
	...
 800b650:	c3500000 	.word	0xc3500000
 800b654:	43500000 	.word	0x43500000
 800b658:	7fefffff 	.word	0x7fefffff
 800b65c:	3ff00000 	.word	0x3ff00000
 800b660:	3fe00000 	.word	0x3fe00000

0800b664 <__ieee754_asinf>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	ee10 5a10 	vmov	r5, s0
 800b66a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b66e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b672:	ed2d 8b04 	vpush	{d8-d9}
 800b676:	d10c      	bne.n	800b692 <__ieee754_asinf+0x2e>
 800b678:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b7f0 <__ieee754_asinf+0x18c>
 800b67c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b7f4 <__ieee754_asinf+0x190>
 800b680:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b684:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b688:	eeb0 0a67 	vmov.f32	s0, s15
 800b68c:	ecbd 8b04 	vpop	{d8-d9}
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	dd04      	ble.n	800b69e <__ieee754_asinf+0x3a>
 800b694:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b698:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b69c:	e7f6      	b.n	800b68c <__ieee754_asinf+0x28>
 800b69e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b6a2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b6a6:	da0b      	bge.n	800b6c0 <__ieee754_asinf+0x5c>
 800b6a8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b6ac:	da52      	bge.n	800b754 <__ieee754_asinf+0xf0>
 800b6ae:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b7f8 <__ieee754_asinf+0x194>
 800b6b2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b6b6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6be:	dce5      	bgt.n	800b68c <__ieee754_asinf+0x28>
 800b6c0:	f000 ff72 	bl	800c5a8 <fabsf>
 800b6c4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b6c8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b6cc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800b6d0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b7fc <__ieee754_asinf+0x198>
 800b6d4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b800 <__ieee754_asinf+0x19c>
 800b6d8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b804 <__ieee754_asinf+0x1a0>
 800b6dc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b6e0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b808 <__ieee754_asinf+0x1a4>
 800b6e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b6e8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b80c <__ieee754_asinf+0x1a8>
 800b6ec:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b6f0:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b810 <__ieee754_asinf+0x1ac>
 800b6f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b6f8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b814 <__ieee754_asinf+0x1b0>
 800b6fc:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b700:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b818 <__ieee754_asinf+0x1b4>
 800b704:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b708:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b81c <__ieee754_asinf+0x1b8>
 800b70c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b710:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b820 <__ieee754_asinf+0x1bc>
 800b714:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b718:	eeb0 0a48 	vmov.f32	s0, s16
 800b71c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b720:	f000 fa62 	bl	800bbe8 <__ieee754_sqrtf>
 800b724:	4b3f      	ldr	r3, [pc, #252]	; (800b824 <__ieee754_asinf+0x1c0>)
 800b726:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b72a:	429c      	cmp	r4, r3
 800b72c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b730:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b734:	dd3d      	ble.n	800b7b2 <__ieee754_asinf+0x14e>
 800b736:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b73a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b828 <__ieee754_asinf+0x1c4>
 800b73e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b742:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b7f4 <__ieee754_asinf+0x190>
 800b746:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b74a:	2d00      	cmp	r5, #0
 800b74c:	bfd8      	it	le
 800b74e:	eeb1 0a40 	vnegle.f32	s0, s0
 800b752:	e79b      	b.n	800b68c <__ieee754_asinf+0x28>
 800b754:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b758:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b7fc <__ieee754_asinf+0x198>
 800b75c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b800 <__ieee754_asinf+0x19c>
 800b760:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b814 <__ieee754_asinf+0x1b0>
 800b764:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b768:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b808 <__ieee754_asinf+0x1a4>
 800b76c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b770:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b80c <__ieee754_asinf+0x1a8>
 800b774:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b778:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b810 <__ieee754_asinf+0x1ac>
 800b77c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b780:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b804 <__ieee754_asinf+0x1a0>
 800b784:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b788:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b818 <__ieee754_asinf+0x1b4>
 800b78c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b790:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b81c <__ieee754_asinf+0x1b8>
 800b794:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b798:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b820 <__ieee754_asinf+0x1bc>
 800b79c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b7a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7a4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b7a8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b7ac:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b7b0:	e76c      	b.n	800b68c <__ieee754_asinf+0x28>
 800b7b2:	ee10 3a10 	vmov	r3, s0
 800b7b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b7ba:	f023 030f 	bic.w	r3, r3, #15
 800b7be:	ee07 3a10 	vmov	s14, r3
 800b7c2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b7c6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b7ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b7ce:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b7d2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b7f0 <__ieee754_asinf+0x18c>
 800b7d6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b7da:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b7de:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b82c <__ieee754_asinf+0x1c8>
 800b7e2:	eeb0 6a40 	vmov.f32	s12, s0
 800b7e6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b7ea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b7ee:	e7aa      	b.n	800b746 <__ieee754_asinf+0xe2>
 800b7f0:	b33bbd2e 	.word	0xb33bbd2e
 800b7f4:	3fc90fdb 	.word	0x3fc90fdb
 800b7f8:	7149f2ca 	.word	0x7149f2ca
 800b7fc:	3811ef08 	.word	0x3811ef08
 800b800:	3a4f7f04 	.word	0x3a4f7f04
 800b804:	3e2aaaab 	.word	0x3e2aaaab
 800b808:	bd241146 	.word	0xbd241146
 800b80c:	3e4e0aa8 	.word	0x3e4e0aa8
 800b810:	bea6b090 	.word	0xbea6b090
 800b814:	3d9dc62e 	.word	0x3d9dc62e
 800b818:	bf303361 	.word	0xbf303361
 800b81c:	4001572d 	.word	0x4001572d
 800b820:	c019d139 	.word	0xc019d139
 800b824:	3f799999 	.word	0x3f799999
 800b828:	333bbd2e 	.word	0x333bbd2e
 800b82c:	3f490fdb 	.word	0x3f490fdb

0800b830 <__ieee754_atan2f>:
 800b830:	ee10 2a90 	vmov	r2, s1
 800b834:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b838:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b83c:	b510      	push	{r4, lr}
 800b83e:	eef0 7a40 	vmov.f32	s15, s0
 800b842:	dc06      	bgt.n	800b852 <__ieee754_atan2f+0x22>
 800b844:	ee10 0a10 	vmov	r0, s0
 800b848:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b84c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b850:	dd04      	ble.n	800b85c <__ieee754_atan2f+0x2c>
 800b852:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b856:	eeb0 0a67 	vmov.f32	s0, s15
 800b85a:	bd10      	pop	{r4, pc}
 800b85c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b860:	d103      	bne.n	800b86a <__ieee754_atan2f+0x3a>
 800b862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b866:	f000 bdcb 	b.w	800c400 <atanf>
 800b86a:	1794      	asrs	r4, r2, #30
 800b86c:	f004 0402 	and.w	r4, r4, #2
 800b870:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b874:	b943      	cbnz	r3, 800b888 <__ieee754_atan2f+0x58>
 800b876:	2c02      	cmp	r4, #2
 800b878:	d05e      	beq.n	800b938 <__ieee754_atan2f+0x108>
 800b87a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b94c <__ieee754_atan2f+0x11c>
 800b87e:	2c03      	cmp	r4, #3
 800b880:	bf08      	it	eq
 800b882:	eef0 7a47 	vmoveq.f32	s15, s14
 800b886:	e7e6      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b888:	b941      	cbnz	r1, 800b89c <__ieee754_atan2f+0x6c>
 800b88a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b950 <__ieee754_atan2f+0x120>
 800b88e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b954 <__ieee754_atan2f+0x124>
 800b892:	2800      	cmp	r0, #0
 800b894:	bfb8      	it	lt
 800b896:	eef0 7a40 	vmovlt.f32	s15, s0
 800b89a:	e7dc      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b89c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b8a0:	d110      	bne.n	800b8c4 <__ieee754_atan2f+0x94>
 800b8a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b8a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b8aa:	d107      	bne.n	800b8bc <__ieee754_atan2f+0x8c>
 800b8ac:	2c02      	cmp	r4, #2
 800b8ae:	d846      	bhi.n	800b93e <__ieee754_atan2f+0x10e>
 800b8b0:	4b29      	ldr	r3, [pc, #164]	; (800b958 <__ieee754_atan2f+0x128>)
 800b8b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8b6:	edd4 7a00 	vldr	s15, [r4]
 800b8ba:	e7cc      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b8bc:	2c02      	cmp	r4, #2
 800b8be:	d841      	bhi.n	800b944 <__ieee754_atan2f+0x114>
 800b8c0:	4b26      	ldr	r3, [pc, #152]	; (800b95c <__ieee754_atan2f+0x12c>)
 800b8c2:	e7f6      	b.n	800b8b2 <__ieee754_atan2f+0x82>
 800b8c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b8c8:	d0df      	beq.n	800b88a <__ieee754_atan2f+0x5a>
 800b8ca:	1a5b      	subs	r3, r3, r1
 800b8cc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b8d0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b8d4:	da1a      	bge.n	800b90c <__ieee754_atan2f+0xdc>
 800b8d6:	2a00      	cmp	r2, #0
 800b8d8:	da01      	bge.n	800b8de <__ieee754_atan2f+0xae>
 800b8da:	313c      	adds	r1, #60	; 0x3c
 800b8dc:	db19      	blt.n	800b912 <__ieee754_atan2f+0xe2>
 800b8de:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b8e2:	f000 fe61 	bl	800c5a8 <fabsf>
 800b8e6:	f000 fd8b 	bl	800c400 <atanf>
 800b8ea:	eef0 7a40 	vmov.f32	s15, s0
 800b8ee:	2c01      	cmp	r4, #1
 800b8f0:	d012      	beq.n	800b918 <__ieee754_atan2f+0xe8>
 800b8f2:	2c02      	cmp	r4, #2
 800b8f4:	d017      	beq.n	800b926 <__ieee754_atan2f+0xf6>
 800b8f6:	2c00      	cmp	r4, #0
 800b8f8:	d0ad      	beq.n	800b856 <__ieee754_atan2f+0x26>
 800b8fa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b960 <__ieee754_atan2f+0x130>
 800b8fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b902:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b964 <__ieee754_atan2f+0x134>
 800b906:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b90a:	e7a4      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b90c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b950 <__ieee754_atan2f+0x120>
 800b910:	e7ed      	b.n	800b8ee <__ieee754_atan2f+0xbe>
 800b912:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b968 <__ieee754_atan2f+0x138>
 800b916:	e7ea      	b.n	800b8ee <__ieee754_atan2f+0xbe>
 800b918:	ee17 3a90 	vmov	r3, s15
 800b91c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b920:	ee07 3a90 	vmov	s15, r3
 800b924:	e797      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b926:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b960 <__ieee754_atan2f+0x130>
 800b92a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b92e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b964 <__ieee754_atan2f+0x134>
 800b932:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b936:	e78e      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b938:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b964 <__ieee754_atan2f+0x134>
 800b93c:	e78b      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b93e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b96c <__ieee754_atan2f+0x13c>
 800b942:	e788      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b944:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b968 <__ieee754_atan2f+0x138>
 800b948:	e785      	b.n	800b856 <__ieee754_atan2f+0x26>
 800b94a:	bf00      	nop
 800b94c:	c0490fdb 	.word	0xc0490fdb
 800b950:	3fc90fdb 	.word	0x3fc90fdb
 800b954:	bfc90fdb 	.word	0xbfc90fdb
 800b958:	0800cbdc 	.word	0x0800cbdc
 800b95c:	0800cbe8 	.word	0x0800cbe8
 800b960:	33bbbd2e 	.word	0x33bbbd2e
 800b964:	40490fdb 	.word	0x40490fdb
 800b968:	00000000 	.word	0x00000000
 800b96c:	3f490fdb 	.word	0x3f490fdb

0800b970 <__ieee754_rem_pio2f>:
 800b970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b972:	ee10 6a10 	vmov	r6, s0
 800b976:	4b8e      	ldr	r3, [pc, #568]	; (800bbb0 <__ieee754_rem_pio2f+0x240>)
 800b978:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b97c:	429d      	cmp	r5, r3
 800b97e:	b087      	sub	sp, #28
 800b980:	eef0 7a40 	vmov.f32	s15, s0
 800b984:	4604      	mov	r4, r0
 800b986:	dc05      	bgt.n	800b994 <__ieee754_rem_pio2f+0x24>
 800b988:	2300      	movs	r3, #0
 800b98a:	ed80 0a00 	vstr	s0, [r0]
 800b98e:	6043      	str	r3, [r0, #4]
 800b990:	2000      	movs	r0, #0
 800b992:	e01a      	b.n	800b9ca <__ieee754_rem_pio2f+0x5a>
 800b994:	4b87      	ldr	r3, [pc, #540]	; (800bbb4 <__ieee754_rem_pio2f+0x244>)
 800b996:	429d      	cmp	r5, r3
 800b998:	dc46      	bgt.n	800ba28 <__ieee754_rem_pio2f+0xb8>
 800b99a:	2e00      	cmp	r6, #0
 800b99c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800bbb8 <__ieee754_rem_pio2f+0x248>
 800b9a0:	4b86      	ldr	r3, [pc, #536]	; (800bbbc <__ieee754_rem_pio2f+0x24c>)
 800b9a2:	f025 050f 	bic.w	r5, r5, #15
 800b9a6:	dd1f      	ble.n	800b9e8 <__ieee754_rem_pio2f+0x78>
 800b9a8:	429d      	cmp	r5, r3
 800b9aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9ae:	d00e      	beq.n	800b9ce <__ieee754_rem_pio2f+0x5e>
 800b9b0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bbc0 <__ieee754_rem_pio2f+0x250>
 800b9b4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b9b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9bc:	ed80 0a00 	vstr	s0, [r0]
 800b9c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	edc4 7a01 	vstr	s15, [r4, #4]
 800b9ca:	b007      	add	sp, #28
 800b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ce:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800bbc4 <__ieee754_rem_pio2f+0x254>
 800b9d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800bbc8 <__ieee754_rem_pio2f+0x258>
 800b9d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b9de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9e2:	edc0 6a00 	vstr	s13, [r0]
 800b9e6:	e7eb      	b.n	800b9c0 <__ieee754_rem_pio2f+0x50>
 800b9e8:	429d      	cmp	r5, r3
 800b9ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b9ee:	d00e      	beq.n	800ba0e <__ieee754_rem_pio2f+0x9e>
 800b9f0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bbc0 <__ieee754_rem_pio2f+0x250>
 800b9f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b9f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9fc:	ed80 0a00 	vstr	s0, [r0]
 800ba00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba04:	f04f 30ff 	mov.w	r0, #4294967295
 800ba08:	edc4 7a01 	vstr	s15, [r4, #4]
 800ba0c:	e7dd      	b.n	800b9ca <__ieee754_rem_pio2f+0x5a>
 800ba0e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800bbc4 <__ieee754_rem_pio2f+0x254>
 800ba12:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800bbc8 <__ieee754_rem_pio2f+0x258>
 800ba16:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ba1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ba1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba22:	edc0 6a00 	vstr	s13, [r0]
 800ba26:	e7eb      	b.n	800ba00 <__ieee754_rem_pio2f+0x90>
 800ba28:	4b68      	ldr	r3, [pc, #416]	; (800bbcc <__ieee754_rem_pio2f+0x25c>)
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	dc72      	bgt.n	800bb14 <__ieee754_rem_pio2f+0x1a4>
 800ba2e:	f000 fdbb 	bl	800c5a8 <fabsf>
 800ba32:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bbd0 <__ieee754_rem_pio2f+0x260>
 800ba36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba3a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba46:	ee17 0a90 	vmov	r0, s15
 800ba4a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bbb8 <__ieee754_rem_pio2f+0x248>
 800ba4e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ba52:	281f      	cmp	r0, #31
 800ba54:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bbc0 <__ieee754_rem_pio2f+0x250>
 800ba58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5c:	eeb1 6a47 	vneg.f32	s12, s14
 800ba60:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ba64:	ee16 2a90 	vmov	r2, s13
 800ba68:	dc1c      	bgt.n	800baa4 <__ieee754_rem_pio2f+0x134>
 800ba6a:	495a      	ldr	r1, [pc, #360]	; (800bbd4 <__ieee754_rem_pio2f+0x264>)
 800ba6c:	1e47      	subs	r7, r0, #1
 800ba6e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ba72:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ba76:	428b      	cmp	r3, r1
 800ba78:	d014      	beq.n	800baa4 <__ieee754_rem_pio2f+0x134>
 800ba7a:	6022      	str	r2, [r4, #0]
 800ba7c:	ed94 7a00 	vldr	s14, [r4]
 800ba80:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ba84:	2e00      	cmp	r6, #0
 800ba86:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba8a:	ed84 0a01 	vstr	s0, [r4, #4]
 800ba8e:	da9c      	bge.n	800b9ca <__ieee754_rem_pio2f+0x5a>
 800ba90:	eeb1 7a47 	vneg.f32	s14, s14
 800ba94:	eeb1 0a40 	vneg.f32	s0, s0
 800ba98:	ed84 7a00 	vstr	s14, [r4]
 800ba9c:	ed84 0a01 	vstr	s0, [r4, #4]
 800baa0:	4240      	negs	r0, r0
 800baa2:	e792      	b.n	800b9ca <__ieee754_rem_pio2f+0x5a>
 800baa4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800baa8:	15eb      	asrs	r3, r5, #23
 800baaa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800baae:	2d08      	cmp	r5, #8
 800bab0:	dde3      	ble.n	800ba7a <__ieee754_rem_pio2f+0x10a>
 800bab2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800bbc4 <__ieee754_rem_pio2f+0x254>
 800bab6:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bbc8 <__ieee754_rem_pio2f+0x258>
 800baba:	eef0 6a40 	vmov.f32	s13, s0
 800babe:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bac2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bac6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800baca:	eef0 7a40 	vmov.f32	s15, s0
 800bace:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bad2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bad6:	ee15 2a90 	vmov	r2, s11
 800bada:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bade:	1a5b      	subs	r3, r3, r1
 800bae0:	2b19      	cmp	r3, #25
 800bae2:	dc04      	bgt.n	800baee <__ieee754_rem_pio2f+0x17e>
 800bae4:	edc4 5a00 	vstr	s11, [r4]
 800bae8:	eeb0 0a66 	vmov.f32	s0, s13
 800baec:	e7c6      	b.n	800ba7c <__ieee754_rem_pio2f+0x10c>
 800baee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bbd8 <__ieee754_rem_pio2f+0x268>
 800baf2:	eeb0 0a66 	vmov.f32	s0, s13
 800baf6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bafa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bafe:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bbdc <__ieee754_rem_pio2f+0x26c>
 800bb02:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bb06:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bb0a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bb0e:	ed84 7a00 	vstr	s14, [r4]
 800bb12:	e7b3      	b.n	800ba7c <__ieee754_rem_pio2f+0x10c>
 800bb14:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bb18:	db06      	blt.n	800bb28 <__ieee754_rem_pio2f+0x1b8>
 800bb1a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bb1e:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb22:	edc0 7a00 	vstr	s15, [r0]
 800bb26:	e733      	b.n	800b990 <__ieee754_rem_pio2f+0x20>
 800bb28:	15ea      	asrs	r2, r5, #23
 800bb2a:	3a86      	subs	r2, #134	; 0x86
 800bb2c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bb30:	ee07 3a90 	vmov	s15, r3
 800bb34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb38:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bbe0 <__ieee754_rem_pio2f+0x270>
 800bb3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb44:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bb48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb4c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb58:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bb5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb60:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb68:	edcd 7a05 	vstr	s15, [sp, #20]
 800bb6c:	d11e      	bne.n	800bbac <__ieee754_rem_pio2f+0x23c>
 800bb6e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb76:	bf14      	ite	ne
 800bb78:	2302      	movne	r3, #2
 800bb7a:	2301      	moveq	r3, #1
 800bb7c:	4919      	ldr	r1, [pc, #100]	; (800bbe4 <__ieee754_rem_pio2f+0x274>)
 800bb7e:	9101      	str	r1, [sp, #4]
 800bb80:	2102      	movs	r1, #2
 800bb82:	9100      	str	r1, [sp, #0]
 800bb84:	a803      	add	r0, sp, #12
 800bb86:	4621      	mov	r1, r4
 800bb88:	f000 f892 	bl	800bcb0 <__kernel_rem_pio2f>
 800bb8c:	2e00      	cmp	r6, #0
 800bb8e:	f6bf af1c 	bge.w	800b9ca <__ieee754_rem_pio2f+0x5a>
 800bb92:	edd4 7a00 	vldr	s15, [r4]
 800bb96:	eef1 7a67 	vneg.f32	s15, s15
 800bb9a:	edc4 7a00 	vstr	s15, [r4]
 800bb9e:	edd4 7a01 	vldr	s15, [r4, #4]
 800bba2:	eef1 7a67 	vneg.f32	s15, s15
 800bba6:	edc4 7a01 	vstr	s15, [r4, #4]
 800bbaa:	e779      	b.n	800baa0 <__ieee754_rem_pio2f+0x130>
 800bbac:	2303      	movs	r3, #3
 800bbae:	e7e5      	b.n	800bb7c <__ieee754_rem_pio2f+0x20c>
 800bbb0:	3f490fd8 	.word	0x3f490fd8
 800bbb4:	4016cbe3 	.word	0x4016cbe3
 800bbb8:	3fc90f80 	.word	0x3fc90f80
 800bbbc:	3fc90fd0 	.word	0x3fc90fd0
 800bbc0:	37354443 	.word	0x37354443
 800bbc4:	37354400 	.word	0x37354400
 800bbc8:	2e85a308 	.word	0x2e85a308
 800bbcc:	43490f80 	.word	0x43490f80
 800bbd0:	3f22f984 	.word	0x3f22f984
 800bbd4:	0800cbf4 	.word	0x0800cbf4
 800bbd8:	2e85a300 	.word	0x2e85a300
 800bbdc:	248d3132 	.word	0x248d3132
 800bbe0:	43800000 	.word	0x43800000
 800bbe4:	0800cc74 	.word	0x0800cc74

0800bbe8 <__ieee754_sqrtf>:
 800bbe8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bbec:	4770      	bx	lr
	...

0800bbf0 <__kernel_cosf>:
 800bbf0:	ee10 3a10 	vmov	r3, s0
 800bbf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbf8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bbfc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bc00:	da05      	bge.n	800bc0e <__kernel_cosf+0x1e>
 800bc02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bc06:	ee17 2a90 	vmov	r2, s15
 800bc0a:	2a00      	cmp	r2, #0
 800bc0c:	d03d      	beq.n	800bc8a <__kernel_cosf+0x9a>
 800bc0e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800bc12:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bc90 <__kernel_cosf+0xa0>
 800bc16:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bc94 <__kernel_cosf+0xa4>
 800bc1a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bc98 <__kernel_cosf+0xa8>
 800bc1e:	4a1f      	ldr	r2, [pc, #124]	; (800bc9c <__kernel_cosf+0xac>)
 800bc20:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bc24:	4293      	cmp	r3, r2
 800bc26:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bca0 <__kernel_cosf+0xb0>
 800bc2a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bc2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bca4 <__kernel_cosf+0xb4>
 800bc32:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bc36:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bca8 <__kernel_cosf+0xb8>
 800bc3a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bc3e:	eeb0 7a66 	vmov.f32	s14, s13
 800bc42:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bc46:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bc4a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800bc4e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800bc52:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800bc56:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bc5a:	dc04      	bgt.n	800bc66 <__kernel_cosf+0x76>
 800bc5c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bc60:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bc64:	4770      	bx	lr
 800bc66:	4a11      	ldr	r2, [pc, #68]	; (800bcac <__kernel_cosf+0xbc>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	bfda      	itte	le
 800bc6c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bc70:	ee06 3a90 	vmovle	s13, r3
 800bc74:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bc78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bc7c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bc80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc84:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc88:	4770      	bx	lr
 800bc8a:	eeb0 0a46 	vmov.f32	s0, s12
 800bc8e:	4770      	bx	lr
 800bc90:	ad47d74e 	.word	0xad47d74e
 800bc94:	310f74f6 	.word	0x310f74f6
 800bc98:	3d2aaaab 	.word	0x3d2aaaab
 800bc9c:	3e999999 	.word	0x3e999999
 800bca0:	b493f27c 	.word	0xb493f27c
 800bca4:	37d00d01 	.word	0x37d00d01
 800bca8:	bab60b61 	.word	0xbab60b61
 800bcac:	3f480000 	.word	0x3f480000

0800bcb0 <__kernel_rem_pio2f>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	ed2d 8b04 	vpush	{d8-d9}
 800bcb8:	b0d9      	sub	sp, #356	; 0x164
 800bcba:	4688      	mov	r8, r1
 800bcbc:	9002      	str	r0, [sp, #8]
 800bcbe:	49bb      	ldr	r1, [pc, #748]	; (800bfac <__kernel_rem_pio2f+0x2fc>)
 800bcc0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800bcc8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800bccc:	1e59      	subs	r1, r3, #1
 800bcce:	1d13      	adds	r3, r2, #4
 800bcd0:	db27      	blt.n	800bd22 <__kernel_rem_pio2f+0x72>
 800bcd2:	f1b2 0b03 	subs.w	fp, r2, #3
 800bcd6:	bf48      	it	mi
 800bcd8:	f102 0b04 	addmi.w	fp, r2, #4
 800bcdc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800bce0:	1c45      	adds	r5, r0, #1
 800bce2:	00ec      	lsls	r4, r5, #3
 800bce4:	1a47      	subs	r7, r0, r1
 800bce6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800bfbc <__kernel_rem_pio2f+0x30c>
 800bcea:	9403      	str	r4, [sp, #12]
 800bcec:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800bcf0:	eb0a 0c01 	add.w	ip, sl, r1
 800bcf4:	ae1c      	add	r6, sp, #112	; 0x70
 800bcf6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800bcfa:	2400      	movs	r4, #0
 800bcfc:	4564      	cmp	r4, ip
 800bcfe:	dd12      	ble.n	800bd26 <__kernel_rem_pio2f+0x76>
 800bd00:	9b01      	ldr	r3, [sp, #4]
 800bd02:	ac1c      	add	r4, sp, #112	; 0x70
 800bd04:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bd08:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800bd0c:	f04f 0c00 	mov.w	ip, #0
 800bd10:	45d4      	cmp	ip, sl
 800bd12:	dc27      	bgt.n	800bd64 <__kernel_rem_pio2f+0xb4>
 800bd14:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800bd18:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bfbc <__kernel_rem_pio2f+0x30c>
 800bd1c:	4627      	mov	r7, r4
 800bd1e:	2600      	movs	r6, #0
 800bd20:	e016      	b.n	800bd50 <__kernel_rem_pio2f+0xa0>
 800bd22:	2000      	movs	r0, #0
 800bd24:	e7dc      	b.n	800bce0 <__kernel_rem_pio2f+0x30>
 800bd26:	42e7      	cmn	r7, r4
 800bd28:	bf5d      	ittte	pl
 800bd2a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800bd2e:	ee07 3a90 	vmovpl	s15, r3
 800bd32:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bd36:	eef0 7a47 	vmovmi.f32	s15, s14
 800bd3a:	ece6 7a01 	vstmia	r6!, {s15}
 800bd3e:	3401      	adds	r4, #1
 800bd40:	e7dc      	b.n	800bcfc <__kernel_rem_pio2f+0x4c>
 800bd42:	ecf9 6a01 	vldmia	r9!, {s13}
 800bd46:	ed97 7a00 	vldr	s14, [r7]
 800bd4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd4e:	3601      	adds	r6, #1
 800bd50:	428e      	cmp	r6, r1
 800bd52:	f1a7 0704 	sub.w	r7, r7, #4
 800bd56:	ddf4      	ble.n	800bd42 <__kernel_rem_pio2f+0x92>
 800bd58:	eceb 7a01 	vstmia	fp!, {s15}
 800bd5c:	f10c 0c01 	add.w	ip, ip, #1
 800bd60:	3404      	adds	r4, #4
 800bd62:	e7d5      	b.n	800bd10 <__kernel_rem_pio2f+0x60>
 800bd64:	ab08      	add	r3, sp, #32
 800bd66:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800bd6a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800bfb8 <__kernel_rem_pio2f+0x308>
 800bd6e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800bfb4 <__kernel_rem_pio2f+0x304>
 800bd72:	9304      	str	r3, [sp, #16]
 800bd74:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800bd78:	4656      	mov	r6, sl
 800bd7a:	00b3      	lsls	r3, r6, #2
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	ab58      	add	r3, sp, #352	; 0x160
 800bd80:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bd84:	ac08      	add	r4, sp, #32
 800bd86:	ab44      	add	r3, sp, #272	; 0x110
 800bd88:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800bd8c:	46a4      	mov	ip, r4
 800bd8e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bd92:	4637      	mov	r7, r6
 800bd94:	2f00      	cmp	r7, #0
 800bd96:	f1a0 0004 	sub.w	r0, r0, #4
 800bd9a:	dc4f      	bgt.n	800be3c <__kernel_rem_pio2f+0x18c>
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bda2:	f000 fc51 	bl	800c648 <scalbnf>
 800bda6:	eeb0 8a40 	vmov.f32	s16, s0
 800bdaa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bdae:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bdb2:	f000 fc01 	bl	800c5b8 <floorf>
 800bdb6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bdba:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bdbe:	2d00      	cmp	r5, #0
 800bdc0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bdc4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bdc8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800bdcc:	ee17 9a90 	vmov	r9, s15
 800bdd0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bdd4:	dd44      	ble.n	800be60 <__kernel_rem_pio2f+0x1b0>
 800bdd6:	f106 3cff 	add.w	ip, r6, #4294967295
 800bdda:	ab08      	add	r3, sp, #32
 800bddc:	f1c5 0e08 	rsb	lr, r5, #8
 800bde0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800bde4:	fa47 f00e 	asr.w	r0, r7, lr
 800bde8:	4481      	add	r9, r0
 800bdea:	fa00 f00e 	lsl.w	r0, r0, lr
 800bdee:	1a3f      	subs	r7, r7, r0
 800bdf0:	f1c5 0007 	rsb	r0, r5, #7
 800bdf4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800bdf8:	4107      	asrs	r7, r0
 800bdfa:	2f00      	cmp	r7, #0
 800bdfc:	dd3f      	ble.n	800be7e <__kernel_rem_pio2f+0x1ce>
 800bdfe:	f04f 0e00 	mov.w	lr, #0
 800be02:	f109 0901 	add.w	r9, r9, #1
 800be06:	4673      	mov	r3, lr
 800be08:	4576      	cmp	r6, lr
 800be0a:	dc6b      	bgt.n	800bee4 <__kernel_rem_pio2f+0x234>
 800be0c:	2d00      	cmp	r5, #0
 800be0e:	dd04      	ble.n	800be1a <__kernel_rem_pio2f+0x16a>
 800be10:	2d01      	cmp	r5, #1
 800be12:	d078      	beq.n	800bf06 <__kernel_rem_pio2f+0x256>
 800be14:	2d02      	cmp	r5, #2
 800be16:	f000 8081 	beq.w	800bf1c <__kernel_rem_pio2f+0x26c>
 800be1a:	2f02      	cmp	r7, #2
 800be1c:	d12f      	bne.n	800be7e <__kernel_rem_pio2f+0x1ce>
 800be1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800be22:	ee30 8a48 	vsub.f32	s16, s0, s16
 800be26:	b353      	cbz	r3, 800be7e <__kernel_rem_pio2f+0x1ce>
 800be28:	4628      	mov	r0, r5
 800be2a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800be2e:	f000 fc0b 	bl	800c648 <scalbnf>
 800be32:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800be36:	ee38 8a40 	vsub.f32	s16, s16, s0
 800be3a:	e020      	b.n	800be7e <__kernel_rem_pio2f+0x1ce>
 800be3c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800be40:	3f01      	subs	r7, #1
 800be42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be4a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800be4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be52:	ecac 0a01 	vstmia	ip!, {s0}
 800be56:	ed90 0a00 	vldr	s0, [r0]
 800be5a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800be5e:	e799      	b.n	800bd94 <__kernel_rem_pio2f+0xe4>
 800be60:	d105      	bne.n	800be6e <__kernel_rem_pio2f+0x1be>
 800be62:	1e70      	subs	r0, r6, #1
 800be64:	ab08      	add	r3, sp, #32
 800be66:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800be6a:	11ff      	asrs	r7, r7, #7
 800be6c:	e7c5      	b.n	800bdfa <__kernel_rem_pio2f+0x14a>
 800be6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7a:	da31      	bge.n	800bee0 <__kernel_rem_pio2f+0x230>
 800be7c:	2700      	movs	r7, #0
 800be7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800be82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be86:	f040 809b 	bne.w	800bfc0 <__kernel_rem_pio2f+0x310>
 800be8a:	1e74      	subs	r4, r6, #1
 800be8c:	46a4      	mov	ip, r4
 800be8e:	2000      	movs	r0, #0
 800be90:	45d4      	cmp	ip, sl
 800be92:	da4a      	bge.n	800bf2a <__kernel_rem_pio2f+0x27a>
 800be94:	2800      	cmp	r0, #0
 800be96:	d07a      	beq.n	800bf8e <__kernel_rem_pio2f+0x2de>
 800be98:	ab08      	add	r3, sp, #32
 800be9a:	3d08      	subs	r5, #8
 800be9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 8081 	beq.w	800bfa8 <__kernel_rem_pio2f+0x2f8>
 800bea6:	4628      	mov	r0, r5
 800bea8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800beac:	00a5      	lsls	r5, r4, #2
 800beae:	f000 fbcb 	bl	800c648 <scalbnf>
 800beb2:	aa44      	add	r2, sp, #272	; 0x110
 800beb4:	1d2b      	adds	r3, r5, #4
 800beb6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800bfb8 <__kernel_rem_pio2f+0x308>
 800beba:	18d1      	adds	r1, r2, r3
 800bebc:	4622      	mov	r2, r4
 800bebe:	2a00      	cmp	r2, #0
 800bec0:	f280 80ae 	bge.w	800c020 <__kernel_rem_pio2f+0x370>
 800bec4:	4622      	mov	r2, r4
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	f2c0 80cc 	blt.w	800c064 <__kernel_rem_pio2f+0x3b4>
 800becc:	a944      	add	r1, sp, #272	; 0x110
 800bece:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800bed2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800bfb0 <__kernel_rem_pio2f+0x300>
 800bed6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800bfbc <__kernel_rem_pio2f+0x30c>
 800beda:	2000      	movs	r0, #0
 800bedc:	1aa1      	subs	r1, r4, r2
 800bede:	e0b6      	b.n	800c04e <__kernel_rem_pio2f+0x39e>
 800bee0:	2702      	movs	r7, #2
 800bee2:	e78c      	b.n	800bdfe <__kernel_rem_pio2f+0x14e>
 800bee4:	6820      	ldr	r0, [r4, #0]
 800bee6:	b94b      	cbnz	r3, 800befc <__kernel_rem_pio2f+0x24c>
 800bee8:	b118      	cbz	r0, 800bef2 <__kernel_rem_pio2f+0x242>
 800beea:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800beee:	6020      	str	r0, [r4, #0]
 800bef0:	2001      	movs	r0, #1
 800bef2:	f10e 0e01 	add.w	lr, lr, #1
 800bef6:	3404      	adds	r4, #4
 800bef8:	4603      	mov	r3, r0
 800befa:	e785      	b.n	800be08 <__kernel_rem_pio2f+0x158>
 800befc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800bf00:	6020      	str	r0, [r4, #0]
 800bf02:	4618      	mov	r0, r3
 800bf04:	e7f5      	b.n	800bef2 <__kernel_rem_pio2f+0x242>
 800bf06:	1e74      	subs	r4, r6, #1
 800bf08:	a808      	add	r0, sp, #32
 800bf0a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bf0e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bf12:	f10d 0c20 	add.w	ip, sp, #32
 800bf16:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800bf1a:	e77e      	b.n	800be1a <__kernel_rem_pio2f+0x16a>
 800bf1c:	1e74      	subs	r4, r6, #1
 800bf1e:	a808      	add	r0, sp, #32
 800bf20:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bf24:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800bf28:	e7f3      	b.n	800bf12 <__kernel_rem_pio2f+0x262>
 800bf2a:	ab08      	add	r3, sp, #32
 800bf2c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bf30:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf34:	4318      	orrs	r0, r3
 800bf36:	e7ab      	b.n	800be90 <__kernel_rem_pio2f+0x1e0>
 800bf38:	f10c 0c01 	add.w	ip, ip, #1
 800bf3c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800bf40:	2c00      	cmp	r4, #0
 800bf42:	d0f9      	beq.n	800bf38 <__kernel_rem_pio2f+0x288>
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bf4a:	eb0d 0003 	add.w	r0, sp, r3
 800bf4e:	9b01      	ldr	r3, [sp, #4]
 800bf50:	18f4      	adds	r4, r6, r3
 800bf52:	ab1c      	add	r3, sp, #112	; 0x70
 800bf54:	1c77      	adds	r7, r6, #1
 800bf56:	384c      	subs	r0, #76	; 0x4c
 800bf58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf5c:	4466      	add	r6, ip
 800bf5e:	42be      	cmp	r6, r7
 800bf60:	f6ff af0b 	blt.w	800bd7a <__kernel_rem_pio2f+0xca>
 800bf64:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800bf68:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bf6c:	ee07 3a90 	vmov	s15, r3
 800bf70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf74:	f04f 0c00 	mov.w	ip, #0
 800bf78:	ece4 7a01 	vstmia	r4!, {s15}
 800bf7c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bfbc <__kernel_rem_pio2f+0x30c>
 800bf80:	46a1      	mov	r9, r4
 800bf82:	458c      	cmp	ip, r1
 800bf84:	dd07      	ble.n	800bf96 <__kernel_rem_pio2f+0x2e6>
 800bf86:	ece0 7a01 	vstmia	r0!, {s15}
 800bf8a:	3701      	adds	r7, #1
 800bf8c:	e7e7      	b.n	800bf5e <__kernel_rem_pio2f+0x2ae>
 800bf8e:	9804      	ldr	r0, [sp, #16]
 800bf90:	f04f 0c01 	mov.w	ip, #1
 800bf94:	e7d2      	b.n	800bf3c <__kernel_rem_pio2f+0x28c>
 800bf96:	ecfe 6a01 	vldmia	lr!, {s13}
 800bf9a:	ed39 7a01 	vldmdb	r9!, {s14}
 800bf9e:	f10c 0c01 	add.w	ip, ip, #1
 800bfa2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bfa6:	e7ec      	b.n	800bf82 <__kernel_rem_pio2f+0x2d2>
 800bfa8:	3c01      	subs	r4, #1
 800bfaa:	e775      	b.n	800be98 <__kernel_rem_pio2f+0x1e8>
 800bfac:	0800cfb8 	.word	0x0800cfb8
 800bfb0:	0800cf8c 	.word	0x0800cf8c
 800bfb4:	43800000 	.word	0x43800000
 800bfb8:	3b800000 	.word	0x3b800000
 800bfbc:	00000000 	.word	0x00000000
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	eeb0 0a48 	vmov.f32	s0, s16
 800bfc6:	1a98      	subs	r0, r3, r2
 800bfc8:	f000 fb3e 	bl	800c648 <scalbnf>
 800bfcc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bfb4 <__kernel_rem_pio2f+0x304>
 800bfd0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd8:	db19      	blt.n	800c00e <__kernel_rem_pio2f+0x35e>
 800bfda:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bfb8 <__kernel_rem_pio2f+0x308>
 800bfde:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bfe2:	aa08      	add	r2, sp, #32
 800bfe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfe8:	1c74      	adds	r4, r6, #1
 800bfea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfee:	3508      	adds	r5, #8
 800bff0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bff8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bffc:	ee10 3a10 	vmov	r3, s0
 800c000:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c004:	ee17 3a90 	vmov	r3, s15
 800c008:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c00c:	e74b      	b.n	800bea6 <__kernel_rem_pio2f+0x1f6>
 800c00e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c012:	aa08      	add	r2, sp, #32
 800c014:	ee10 3a10 	vmov	r3, s0
 800c018:	4634      	mov	r4, r6
 800c01a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c01e:	e742      	b.n	800bea6 <__kernel_rem_pio2f+0x1f6>
 800c020:	a808      	add	r0, sp, #32
 800c022:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c026:	9001      	str	r0, [sp, #4]
 800c028:	ee07 0a90 	vmov	s15, r0
 800c02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c030:	3a01      	subs	r2, #1
 800c032:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c036:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c03a:	ed61 7a01 	vstmdb	r1!, {s15}
 800c03e:	e73e      	b.n	800bebe <__kernel_rem_pio2f+0x20e>
 800c040:	ecfc 6a01 	vldmia	ip!, {s13}
 800c044:	ecb6 7a01 	vldmia	r6!, {s14}
 800c048:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c04c:	3001      	adds	r0, #1
 800c04e:	4550      	cmp	r0, sl
 800c050:	dc01      	bgt.n	800c056 <__kernel_rem_pio2f+0x3a6>
 800c052:	4288      	cmp	r0, r1
 800c054:	ddf4      	ble.n	800c040 <__kernel_rem_pio2f+0x390>
 800c056:	a858      	add	r0, sp, #352	; 0x160
 800c058:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c05c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c060:	3a01      	subs	r2, #1
 800c062:	e730      	b.n	800bec6 <__kernel_rem_pio2f+0x216>
 800c064:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c066:	2a02      	cmp	r2, #2
 800c068:	dc09      	bgt.n	800c07e <__kernel_rem_pio2f+0x3ce>
 800c06a:	2a00      	cmp	r2, #0
 800c06c:	dc2a      	bgt.n	800c0c4 <__kernel_rem_pio2f+0x414>
 800c06e:	d043      	beq.n	800c0f8 <__kernel_rem_pio2f+0x448>
 800c070:	f009 0007 	and.w	r0, r9, #7
 800c074:	b059      	add	sp, #356	; 0x164
 800c076:	ecbd 8b04 	vpop	{d8-d9}
 800c07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c080:	2b03      	cmp	r3, #3
 800c082:	d1f5      	bne.n	800c070 <__kernel_rem_pio2f+0x3c0>
 800c084:	ab30      	add	r3, sp, #192	; 0xc0
 800c086:	442b      	add	r3, r5
 800c088:	461a      	mov	r2, r3
 800c08a:	4619      	mov	r1, r3
 800c08c:	4620      	mov	r0, r4
 800c08e:	2800      	cmp	r0, #0
 800c090:	f1a1 0104 	sub.w	r1, r1, #4
 800c094:	dc51      	bgt.n	800c13a <__kernel_rem_pio2f+0x48a>
 800c096:	4621      	mov	r1, r4
 800c098:	2901      	cmp	r1, #1
 800c09a:	f1a2 0204 	sub.w	r2, r2, #4
 800c09e:	dc5c      	bgt.n	800c15a <__kernel_rem_pio2f+0x4aa>
 800c0a0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800bfbc <__kernel_rem_pio2f+0x30c>
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	2c01      	cmp	r4, #1
 800c0a8:	dc67      	bgt.n	800c17a <__kernel_rem_pio2f+0x4ca>
 800c0aa:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c0ae:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c0b2:	2f00      	cmp	r7, #0
 800c0b4:	d167      	bne.n	800c186 <__kernel_rem_pio2f+0x4d6>
 800c0b6:	edc8 6a00 	vstr	s13, [r8]
 800c0ba:	ed88 7a01 	vstr	s14, [r8, #4]
 800c0be:	edc8 7a02 	vstr	s15, [r8, #8]
 800c0c2:	e7d5      	b.n	800c070 <__kernel_rem_pio2f+0x3c0>
 800c0c4:	aa30      	add	r2, sp, #192	; 0xc0
 800c0c6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800bfbc <__kernel_rem_pio2f+0x30c>
 800c0ca:	4413      	add	r3, r2
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	2a00      	cmp	r2, #0
 800c0d0:	da24      	bge.n	800c11c <__kernel_rem_pio2f+0x46c>
 800c0d2:	b34f      	cbz	r7, 800c128 <__kernel_rem_pio2f+0x478>
 800c0d4:	eef1 7a47 	vneg.f32	s15, s14
 800c0d8:	edc8 7a00 	vstr	s15, [r8]
 800c0dc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c0e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0e4:	aa31      	add	r2, sp, #196	; 0xc4
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	da20      	bge.n	800c12e <__kernel_rem_pio2f+0x47e>
 800c0ec:	b10f      	cbz	r7, 800c0f2 <__kernel_rem_pio2f+0x442>
 800c0ee:	eef1 7a67 	vneg.f32	s15, s15
 800c0f2:	edc8 7a01 	vstr	s15, [r8, #4]
 800c0f6:	e7bb      	b.n	800c070 <__kernel_rem_pio2f+0x3c0>
 800c0f8:	aa30      	add	r2, sp, #192	; 0xc0
 800c0fa:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800bfbc <__kernel_rem_pio2f+0x30c>
 800c0fe:	4413      	add	r3, r2
 800c100:	2c00      	cmp	r4, #0
 800c102:	da05      	bge.n	800c110 <__kernel_rem_pio2f+0x460>
 800c104:	b10f      	cbz	r7, 800c10a <__kernel_rem_pio2f+0x45a>
 800c106:	eef1 7a67 	vneg.f32	s15, s15
 800c10a:	edc8 7a00 	vstr	s15, [r8]
 800c10e:	e7af      	b.n	800c070 <__kernel_rem_pio2f+0x3c0>
 800c110:	ed33 7a01 	vldmdb	r3!, {s14}
 800c114:	3c01      	subs	r4, #1
 800c116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c11a:	e7f1      	b.n	800c100 <__kernel_rem_pio2f+0x450>
 800c11c:	ed73 7a01 	vldmdb	r3!, {s15}
 800c120:	3a01      	subs	r2, #1
 800c122:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c126:	e7d2      	b.n	800c0ce <__kernel_rem_pio2f+0x41e>
 800c128:	eef0 7a47 	vmov.f32	s15, s14
 800c12c:	e7d4      	b.n	800c0d8 <__kernel_rem_pio2f+0x428>
 800c12e:	ecb2 7a01 	vldmia	r2!, {s14}
 800c132:	3301      	adds	r3, #1
 800c134:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c138:	e7d6      	b.n	800c0e8 <__kernel_rem_pio2f+0x438>
 800c13a:	edd1 7a00 	vldr	s15, [r1]
 800c13e:	edd1 6a01 	vldr	s13, [r1, #4]
 800c142:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c146:	3801      	subs	r0, #1
 800c148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c14c:	ed81 7a00 	vstr	s14, [r1]
 800c150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c154:	edc1 7a01 	vstr	s15, [r1, #4]
 800c158:	e799      	b.n	800c08e <__kernel_rem_pio2f+0x3de>
 800c15a:	edd2 7a00 	vldr	s15, [r2]
 800c15e:	edd2 6a01 	vldr	s13, [r2, #4]
 800c162:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c166:	3901      	subs	r1, #1
 800c168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c16c:	ed82 7a00 	vstr	s14, [r2]
 800c170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c174:	edc2 7a01 	vstr	s15, [r2, #4]
 800c178:	e78e      	b.n	800c098 <__kernel_rem_pio2f+0x3e8>
 800c17a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c17e:	3c01      	subs	r4, #1
 800c180:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c184:	e78f      	b.n	800c0a6 <__kernel_rem_pio2f+0x3f6>
 800c186:	eef1 6a66 	vneg.f32	s13, s13
 800c18a:	eeb1 7a47 	vneg.f32	s14, s14
 800c18e:	edc8 6a00 	vstr	s13, [r8]
 800c192:	ed88 7a01 	vstr	s14, [r8, #4]
 800c196:	eef1 7a67 	vneg.f32	s15, s15
 800c19a:	e790      	b.n	800c0be <__kernel_rem_pio2f+0x40e>

0800c19c <__kernel_sinf>:
 800c19c:	ee10 3a10 	vmov	r3, s0
 800c1a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c1a8:	da04      	bge.n	800c1b4 <__kernel_sinf+0x18>
 800c1aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c1ae:	ee17 3a90 	vmov	r3, s15
 800c1b2:	b35b      	cbz	r3, 800c20c <__kernel_sinf+0x70>
 800c1b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c1b8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c210 <__kernel_sinf+0x74>
 800c1bc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c214 <__kernel_sinf+0x78>
 800c1c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c1c4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c218 <__kernel_sinf+0x7c>
 800c1c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1cc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c21c <__kernel_sinf+0x80>
 800c1d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c1d4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c220 <__kernel_sinf+0x84>
 800c1d8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c1dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1e0:	b930      	cbnz	r0, 800c1f0 <__kernel_sinf+0x54>
 800c1e2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c224 <__kernel_sinf+0x88>
 800c1e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c1ea:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c1ee:	4770      	bx	lr
 800c1f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c1f4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c1f8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c1fc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c200:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c228 <__kernel_sinf+0x8c>
 800c204:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c208:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	2f2ec9d3 	.word	0x2f2ec9d3
 800c214:	b2d72f34 	.word	0xb2d72f34
 800c218:	3638ef1b 	.word	0x3638ef1b
 800c21c:	b9500d01 	.word	0xb9500d01
 800c220:	3c088889 	.word	0x3c088889
 800c224:	be2aaaab 	.word	0xbe2aaaab
 800c228:	3e2aaaab 	.word	0x3e2aaaab

0800c22c <__kernel_tanf>:
 800c22c:	b508      	push	{r3, lr}
 800c22e:	ee10 3a10 	vmov	r3, s0
 800c232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c236:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800c23a:	eef0 7a40 	vmov.f32	s15, s0
 800c23e:	da17      	bge.n	800c270 <__kernel_tanf+0x44>
 800c240:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800c244:	ee17 1a10 	vmov	r1, s14
 800c248:	bb41      	cbnz	r1, 800c29c <__kernel_tanf+0x70>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	4313      	orrs	r3, r2
 800c24e:	d108      	bne.n	800c262 <__kernel_tanf+0x36>
 800c250:	f000 f9aa 	bl	800c5a8 <fabsf>
 800c254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c258:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c25c:	eeb0 0a67 	vmov.f32	s0, s15
 800c260:	bd08      	pop	{r3, pc}
 800c262:	2801      	cmp	r0, #1
 800c264:	d0fa      	beq.n	800c25c <__kernel_tanf+0x30>
 800c266:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c26a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c26e:	e7f5      	b.n	800c25c <__kernel_tanf+0x30>
 800c270:	494c      	ldr	r1, [pc, #304]	; (800c3a4 <__kernel_tanf+0x178>)
 800c272:	428a      	cmp	r2, r1
 800c274:	db12      	blt.n	800c29c <__kernel_tanf+0x70>
 800c276:	2b00      	cmp	r3, #0
 800c278:	bfb8      	it	lt
 800c27a:	eef1 7a40 	vneglt.f32	s15, s0
 800c27e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800c3a8 <__kernel_tanf+0x17c>
 800c282:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c286:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800c3ac <__kernel_tanf+0x180>
 800c28a:	bfb8      	it	lt
 800c28c:	eef1 0a60 	vneglt.f32	s1, s1
 800c290:	ee70 0a60 	vsub.f32	s1, s0, s1
 800c294:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800c298:	eddf 0a45 	vldr	s1, [pc, #276]	; 800c3b0 <__kernel_tanf+0x184>
 800c29c:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c3b4 <__kernel_tanf+0x188>
 800c2a0:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800c3b8 <__kernel_tanf+0x18c>
 800c2a4:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800c3bc <__kernel_tanf+0x190>
 800c2a8:	493e      	ldr	r1, [pc, #248]	; (800c3a4 <__kernel_tanf+0x178>)
 800c2aa:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c2ae:	428a      	cmp	r2, r1
 800c2b0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c2b4:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c2b8:	eddf 5a41 	vldr	s11, [pc, #260]	; 800c3c0 <__kernel_tanf+0x194>
 800c2bc:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c2c0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800c3c4 <__kernel_tanf+0x198>
 800c2c4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c2c8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c3c8 <__kernel_tanf+0x19c>
 800c2cc:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c2d0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800c3cc <__kernel_tanf+0x1a0>
 800c2d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c2d8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800c3d0 <__kernel_tanf+0x1a4>
 800c2dc:	eee7 5a05 	vfma.f32	s11, s14, s10
 800c2e0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800c3d4 <__kernel_tanf+0x1a8>
 800c2e4:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c2e8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800c3d8 <__kernel_tanf+0x1ac>
 800c2ec:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c2f0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800c3dc <__kernel_tanf+0x1b0>
 800c2f4:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c2f8:	eddf 5a39 	vldr	s11, [pc, #228]	; 800c3e0 <__kernel_tanf+0x1b4>
 800c2fc:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c300:	eeb0 7a46 	vmov.f32	s14, s12
 800c304:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c308:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800c30c:	eeb0 6a60 	vmov.f32	s12, s1
 800c310:	eea7 6a05 	vfma.f32	s12, s14, s10
 800c314:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c3e4 <__kernel_tanf+0x1b8>
 800c318:	eee6 0a26 	vfma.f32	s1, s12, s13
 800c31c:	eee5 0a07 	vfma.f32	s1, s10, s14
 800c320:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c324:	db1d      	blt.n	800c362 <__kernel_tanf+0x136>
 800c326:	ee06 0a90 	vmov	s13, r0
 800c32a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800c32e:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c332:	ee37 7a00 	vadd.f32	s14, s14, s0
 800c336:	179b      	asrs	r3, r3, #30
 800c338:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c33c:	f003 0302 	and.w	r3, r3, #2
 800c340:	f1c3 0301 	rsb	r3, r3, #1
 800c344:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c348:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800c34c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c350:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c354:	ee07 3a90 	vmov	s15, r3
 800c358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c35c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c360:	e77c      	b.n	800c25c <__kernel_tanf+0x30>
 800c362:	2801      	cmp	r0, #1
 800c364:	d01b      	beq.n	800c39e <__kernel_tanf+0x172>
 800c366:	4b20      	ldr	r3, [pc, #128]	; (800c3e8 <__kernel_tanf+0x1bc>)
 800c368:	ee17 2a10 	vmov	r2, s14
 800c36c:	401a      	ands	r2, r3
 800c36e:	ee06 2a10 	vmov	s12, r2
 800c372:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c376:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c37a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c37e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c386:	ee16 2a90 	vmov	r2, s13
 800c38a:	4013      	ands	r3, r2
 800c38c:	ee07 3a90 	vmov	s15, r3
 800c390:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c394:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800c398:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c39c:	e75e      	b.n	800c25c <__kernel_tanf+0x30>
 800c39e:	eef0 7a47 	vmov.f32	s15, s14
 800c3a2:	e75b      	b.n	800c25c <__kernel_tanf+0x30>
 800c3a4:	3f2ca140 	.word	0x3f2ca140
 800c3a8:	3f490fda 	.word	0x3f490fda
 800c3ac:	33222168 	.word	0x33222168
 800c3b0:	00000000 	.word	0x00000000
 800c3b4:	b79bae5f 	.word	0xb79bae5f
 800c3b8:	38a3f445 	.word	0x38a3f445
 800c3bc:	37d95384 	.word	0x37d95384
 800c3c0:	3a1a26c8 	.word	0x3a1a26c8
 800c3c4:	3b6b6916 	.word	0x3b6b6916
 800c3c8:	3cb327a4 	.word	0x3cb327a4
 800c3cc:	3e088889 	.word	0x3e088889
 800c3d0:	3895c07a 	.word	0x3895c07a
 800c3d4:	398137b9 	.word	0x398137b9
 800c3d8:	3abede48 	.word	0x3abede48
 800c3dc:	3c11371f 	.word	0x3c11371f
 800c3e0:	3d5d0dd1 	.word	0x3d5d0dd1
 800c3e4:	3eaaaaab 	.word	0x3eaaaaab
 800c3e8:	fffff000 	.word	0xfffff000
 800c3ec:	00000000 	.word	0x00000000

0800c3f0 <nan>:
 800c3f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3f8 <nan+0x8>
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	00000000 	.word	0x00000000
 800c3fc:	7ff80000 	.word	0x7ff80000

0800c400 <atanf>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	ee10 5a10 	vmov	r5, s0
 800c406:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c40a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c40e:	eef0 7a40 	vmov.f32	s15, s0
 800c412:	db10      	blt.n	800c436 <atanf+0x36>
 800c414:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c418:	dd04      	ble.n	800c424 <atanf+0x24>
 800c41a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c41e:	eeb0 0a67 	vmov.f32	s0, s15
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c55c <atanf+0x15c>
 800c428:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c560 <atanf+0x160>
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	bfd8      	it	le
 800c430:	eef0 7a40 	vmovle.f32	s15, s0
 800c434:	e7f3      	b.n	800c41e <atanf+0x1e>
 800c436:	4b4b      	ldr	r3, [pc, #300]	; (800c564 <atanf+0x164>)
 800c438:	429c      	cmp	r4, r3
 800c43a:	dc10      	bgt.n	800c45e <atanf+0x5e>
 800c43c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c440:	da0a      	bge.n	800c458 <atanf+0x58>
 800c442:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c568 <atanf+0x168>
 800c446:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c44e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c456:	dce2      	bgt.n	800c41e <atanf+0x1e>
 800c458:	f04f 33ff 	mov.w	r3, #4294967295
 800c45c:	e013      	b.n	800c486 <atanf+0x86>
 800c45e:	f000 f8a3 	bl	800c5a8 <fabsf>
 800c462:	4b42      	ldr	r3, [pc, #264]	; (800c56c <atanf+0x16c>)
 800c464:	429c      	cmp	r4, r3
 800c466:	dc4f      	bgt.n	800c508 <atanf+0x108>
 800c468:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c46c:	429c      	cmp	r4, r3
 800c46e:	dc41      	bgt.n	800c4f4 <atanf+0xf4>
 800c470:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c474:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c478:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c47c:	2300      	movs	r3, #0
 800c47e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c482:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c48c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c570 <atanf+0x170>
 800c490:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c574 <atanf+0x174>
 800c494:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c578 <atanf+0x178>
 800c498:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c49c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c4a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c57c <atanf+0x17c>
 800c4a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c4a8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c580 <atanf+0x180>
 800c4ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c4b0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c584 <atanf+0x184>
 800c4b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c4b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c588 <atanf+0x188>
 800c4bc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c4c0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c58c <atanf+0x18c>
 800c4c4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c4c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c590 <atanf+0x190>
 800c4cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c4d0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c594 <atanf+0x194>
 800c4d4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c4d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c598 <atanf+0x198>
 800c4dc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c4e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c4e4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c4e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c4ec:	d121      	bne.n	800c532 <atanf+0x132>
 800c4ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4f2:	e794      	b.n	800c41e <atanf+0x1e>
 800c4f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c4f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c4fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c500:	2301      	movs	r3, #1
 800c502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c506:	e7be      	b.n	800c486 <atanf+0x86>
 800c508:	4b24      	ldr	r3, [pc, #144]	; (800c59c <atanf+0x19c>)
 800c50a:	429c      	cmp	r4, r3
 800c50c:	dc0b      	bgt.n	800c526 <atanf+0x126>
 800c50e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c516:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c51a:	2302      	movs	r3, #2
 800c51c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c524:	e7af      	b.n	800c486 <atanf+0x86>
 800c526:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c52a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c52e:	2303      	movs	r3, #3
 800c530:	e7a9      	b.n	800c486 <atanf+0x86>
 800c532:	4a1b      	ldr	r2, [pc, #108]	; (800c5a0 <atanf+0x1a0>)
 800c534:	491b      	ldr	r1, [pc, #108]	; (800c5a4 <atanf+0x1a4>)
 800c536:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c53a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c53e:	ed93 0a00 	vldr	s0, [r3]
 800c542:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c546:	ed92 0a00 	vldr	s0, [r2]
 800c54a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c54e:	2d00      	cmp	r5, #0
 800c550:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c554:	bfb8      	it	lt
 800c556:	eef1 7a67 	vneglt.f32	s15, s15
 800c55a:	e760      	b.n	800c41e <atanf+0x1e>
 800c55c:	3fc90fdb 	.word	0x3fc90fdb
 800c560:	bfc90fdb 	.word	0xbfc90fdb
 800c564:	3edfffff 	.word	0x3edfffff
 800c568:	7149f2ca 	.word	0x7149f2ca
 800c56c:	3f97ffff 	.word	0x3f97ffff
 800c570:	3c8569d7 	.word	0x3c8569d7
 800c574:	3d4bda59 	.word	0x3d4bda59
 800c578:	bd6ef16b 	.word	0xbd6ef16b
 800c57c:	3d886b35 	.word	0x3d886b35
 800c580:	3dba2e6e 	.word	0x3dba2e6e
 800c584:	3e124925 	.word	0x3e124925
 800c588:	3eaaaaab 	.word	0x3eaaaaab
 800c58c:	bd15a221 	.word	0xbd15a221
 800c590:	bd9d8795 	.word	0xbd9d8795
 800c594:	bde38e38 	.word	0xbde38e38
 800c598:	be4ccccd 	.word	0xbe4ccccd
 800c59c:	401bffff 	.word	0x401bffff
 800c5a0:	0800cfc4 	.word	0x0800cfc4
 800c5a4:	0800cfd4 	.word	0x0800cfd4

0800c5a8 <fabsf>:
 800c5a8:	ee10 3a10 	vmov	r3, s0
 800c5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5b0:	ee00 3a10 	vmov	s0, r3
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <floorf>:
 800c5b8:	ee10 3a10 	vmov	r3, s0
 800c5bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c5c0:	3a7f      	subs	r2, #127	; 0x7f
 800c5c2:	2a16      	cmp	r2, #22
 800c5c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5c8:	dc2a      	bgt.n	800c620 <floorf+0x68>
 800c5ca:	2a00      	cmp	r2, #0
 800c5cc:	da11      	bge.n	800c5f2 <floorf+0x3a>
 800c5ce:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c630 <floorf+0x78>
 800c5d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5de:	dd05      	ble.n	800c5ec <floorf+0x34>
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	da23      	bge.n	800c62c <floorf+0x74>
 800c5e4:	4a13      	ldr	r2, [pc, #76]	; (800c634 <floorf+0x7c>)
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	bf18      	it	ne
 800c5ea:	4613      	movne	r3, r2
 800c5ec:	ee00 3a10 	vmov	s0, r3
 800c5f0:	4770      	bx	lr
 800c5f2:	4911      	ldr	r1, [pc, #68]	; (800c638 <floorf+0x80>)
 800c5f4:	4111      	asrs	r1, r2
 800c5f6:	420b      	tst	r3, r1
 800c5f8:	d0fa      	beq.n	800c5f0 <floorf+0x38>
 800c5fa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c630 <floorf+0x78>
 800c5fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c602:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60a:	ddef      	ble.n	800c5ec <floorf+0x34>
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfbe      	ittt	lt
 800c610:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c614:	fa40 f202 	asrlt.w	r2, r0, r2
 800c618:	189b      	addlt	r3, r3, r2
 800c61a:	ea23 0301 	bic.w	r3, r3, r1
 800c61e:	e7e5      	b.n	800c5ec <floorf+0x34>
 800c620:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c624:	d3e4      	bcc.n	800c5f0 <floorf+0x38>
 800c626:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c62a:	4770      	bx	lr
 800c62c:	2300      	movs	r3, #0
 800c62e:	e7dd      	b.n	800c5ec <floorf+0x34>
 800c630:	7149f2ca 	.word	0x7149f2ca
 800c634:	bf800000 	.word	0xbf800000
 800c638:	007fffff 	.word	0x007fffff

0800c63c <nanf>:
 800c63c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c644 <nanf+0x8>
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	7fc00000 	.word	0x7fc00000

0800c648 <scalbnf>:
 800c648:	ee10 3a10 	vmov	r3, s0
 800c64c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c650:	d025      	beq.n	800c69e <scalbnf+0x56>
 800c652:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c656:	d302      	bcc.n	800c65e <scalbnf+0x16>
 800c658:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c65c:	4770      	bx	lr
 800c65e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c662:	d122      	bne.n	800c6aa <scalbnf+0x62>
 800c664:	4b2a      	ldr	r3, [pc, #168]	; (800c710 <scalbnf+0xc8>)
 800c666:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c714 <scalbnf+0xcc>
 800c66a:	4298      	cmp	r0, r3
 800c66c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c670:	db16      	blt.n	800c6a0 <scalbnf+0x58>
 800c672:	ee10 3a10 	vmov	r3, s0
 800c676:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c67a:	3a19      	subs	r2, #25
 800c67c:	4402      	add	r2, r0
 800c67e:	2afe      	cmp	r2, #254	; 0xfe
 800c680:	dd15      	ble.n	800c6ae <scalbnf+0x66>
 800c682:	ee10 3a10 	vmov	r3, s0
 800c686:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c718 <scalbnf+0xd0>
 800c68a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c71c <scalbnf+0xd4>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	eeb0 7a67 	vmov.f32	s14, s15
 800c694:	bfb8      	it	lt
 800c696:	eef0 7a66 	vmovlt.f32	s15, s13
 800c69a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c69e:	4770      	bx	lr
 800c6a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c720 <scalbnf+0xd8>
 800c6a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6a8:	4770      	bx	lr
 800c6aa:	0dd2      	lsrs	r2, r2, #23
 800c6ac:	e7e6      	b.n	800c67c <scalbnf+0x34>
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	dd06      	ble.n	800c6c0 <scalbnf+0x78>
 800c6b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c6ba:	ee00 3a10 	vmov	s0, r3
 800c6be:	4770      	bx	lr
 800c6c0:	f112 0f16 	cmn.w	r2, #22
 800c6c4:	da1a      	bge.n	800c6fc <scalbnf+0xb4>
 800c6c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6ca:	4298      	cmp	r0, r3
 800c6cc:	ee10 3a10 	vmov	r3, s0
 800c6d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6d4:	dd0a      	ble.n	800c6ec <scalbnf+0xa4>
 800c6d6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c718 <scalbnf+0xd0>
 800c6da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c71c <scalbnf+0xd4>
 800c6de:	eef0 7a40 	vmov.f32	s15, s0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bf18      	it	ne
 800c6e6:	eeb0 0a47 	vmovne.f32	s0, s14
 800c6ea:	e7db      	b.n	800c6a4 <scalbnf+0x5c>
 800c6ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c720 <scalbnf+0xd8>
 800c6f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c724 <scalbnf+0xdc>
 800c6f4:	eef0 7a40 	vmov.f32	s15, s0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	e7f3      	b.n	800c6e4 <scalbnf+0x9c>
 800c6fc:	3219      	adds	r2, #25
 800c6fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c702:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c706:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c728 <scalbnf+0xe0>
 800c70a:	ee07 3a10 	vmov	s14, r3
 800c70e:	e7c4      	b.n	800c69a <scalbnf+0x52>
 800c710:	ffff3cb0 	.word	0xffff3cb0
 800c714:	4c000000 	.word	0x4c000000
 800c718:	7149f2ca 	.word	0x7149f2ca
 800c71c:	f149f2ca 	.word	0xf149f2ca
 800c720:	0da24260 	.word	0x0da24260
 800c724:	8da24260 	.word	0x8da24260
 800c728:	33000000 	.word	0x33000000

0800c72c <_init>:
 800c72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72e:	bf00      	nop
 800c730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c732:	bc08      	pop	{r3}
 800c734:	469e      	mov	lr, r3
 800c736:	4770      	bx	lr

0800c738 <_fini>:
 800c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73a:	bf00      	nop
 800c73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73e:	bc08      	pop	{r3}
 800c740:	469e      	mov	lr, r3
 800c742:	4770      	bx	lr
